<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="//Redis/"/>
      <url>//Redis/</url>
      
        <content type="html"><![CDATA[<p>title: Redis 基础<br>categories:<br>    Database<br>tags: </p><pre><code>- Redis</code></pre><a id="more"></a>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>并发编程之生产者消费者模型</title>
      <link href="//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
      <url>//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544029124915&amp;di=9deaae316dcd5ced7a8fb22994c27ca8&amp;imgtype=0&amp;src=http%3A%2F%2Fediterupload.eepw.com.cn%2F200809%2Feb8113270d350df28f31781cf86093fb.jpg" alt="生产者消费者模型"></p><p>生产者消费者模式就是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。这个阻塞队列就是用来给生产者和消费者解耦的。</p><a id="more"></a><h1 id="一、使用生产者消费者模式的原因"><a href="#一、使用生产者消费者模式的原因" class="headerlink" title="一、使用生产者消费者模式的原因"></a>一、使用生产者消费者模式的原因</h1><p>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这种生产消费能力不均衡的问题，于是引入了生产者和消费者模式</p><h1 id="二、生产者-消费者模型的优点"><a href="#二、生产者-消费者模型的优点" class="headerlink" title="二、生产者/消费者模型的优点"></a>二、生产者/消费者模型的优点</h1><ol><li><p>解耦，即降低生产者和消费者之间的依赖关系。 </p><blockquote><p>例如平常生活中寄信的例子，如果我们不适用邮筒（也就是缓区），于是我们就必须得把信直接交给邮递员。大概有的人会说，直接给邮递员这不是挺简单的嘛？其实不然，首先你得认识邮递员，其次该邮递员的身份是真实的吗？这就产生了你和邮递员之间的依赖（相当于生产者和消费者的强耦合）。万一某天邮递员换人了，你还要重新认识一下（相当于消费者变化导致修改生产者代码）。而邮筒相对来说比较固定，你依赖它的成本就比较低（相当于和缓冲区之间的弱耦合）。</p></blockquote></li><li><p>支持并发，即生产者和消费者可以是两个独立的并发主体，互不干扰的运行。  </p><blockquote><p>从寄信的例子来看。如果没有邮筒，你得拿着信傻站在路口等邮递员过来收（相当于生产者阻塞）；又或者邮递员得挨家挨户问，谁要寄信（相当于消费者轮询）。不管是哪种方法，效率都比较低。 </p></blockquote></li><li><p>支持忙闲不均，如果制造数据的速度时快时慢，缓冲区可以对其进行适当缓冲。当数据制造快的时候，消费者来不及处理，未处理的数据可以暂时存在缓冲区中。等生产者的制造速度慢下来，消费者再慢慢处理掉。  </p><blockquote><p>假设邮递员一次只能带走1000封信。万一某次碰上情人节（也可能是圣诞节）送贺卡，需要寄出去的信超过1000封，这时候邮筒这个缓冲区就派上用场了。邮递员把来不及带走的信暂存在邮筒中，等下次过来时再拿走。 </p></blockquote></li></ol><h1 id="三、基于队列实现生产者消费者模型"><a href="#三、基于队列实现生产者消费者模型" class="headerlink" title="三、基于队列实现生产者消费者模型"></a>三、基于队列实现生产者消费者模型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'\033[45m%s 吃 %s\033[0m'</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">'包子%s'</span> %i</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'\033[44m%s 生产了 %s\033[0m'</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><h2 id="1-生产者消费者模型总结"><a href="#1-生产者消费者模型总结" class="headerlink" title="1.生产者消费者模型总结"></a>1.生产者消费者模型总结</h2><ul><li><p>程序中有两类角色   </p><blockquote><p>  一类负责生产数据（生产者）  </p><p>  一类负责处理数据（消费者）</p></blockquote></li></ul><ul><li><p>引入生产者消费者模型为了解决的问题是</p><blockquote><p>  平衡生产者与消费者之间的工作能力，从而提高程序整体处理数据的速度</p></blockquote></li></ul><ul><li><p>如何实现</p><blockquote><p>  生产者<-->队列(缓冲区)&lt;——&gt;消费者</--></p></blockquote></li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544037883955&amp;di=85ce45ac6886e6cf64bcbedf1fd0f1d7&amp;imgtype=0&amp;src=http%3A%2F%2Fitfish.net%2FHome%2FModules%2FImages%2Fitfish_54376_0.jpg" alt="生产者消费者模型"></p><h2 id="2-此时遇到的问题"><a href="#2-此时遇到的问题" class="headerlink" title="2.此时遇到的问题"></a>2.此时遇到的问题</h2><blockquote><p>主进程永远不会结束，原因是：生产者p在生产完后就结束了，但是消费者c在取空了q之后，则一直处于死循环中且卡在q.get()这一步。 解决方式无非是让生产者在生产完毕后，往队列中再发一个结束信号，这样消费者在接收到结束信号后就可以break出死循环。</p><p><strong>注意：结束信号None，不一定要由生产者发，主进程里同样可以发，但主进程需要等生产者结束后才应该发送该信号 。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>:<span class="keyword">break</span> <span class="comment">#收到结束信号则结束</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'\033[45m%s 吃 %s\033[0m'</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">'包子%s'</span> %i</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'\033[44m%s 生产了 %s\033[0m'</span> %(os.getpid(),res))</span><br><span class="line">    <span class="comment"># 生产者发送结束信号</span></span><br><span class="line">    <span class="comment"># q.put(None) #发送结束信号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    q.put(<span class="keyword">None</span>) <span class="comment">#发送结束信号</span></span><br><span class="line">    print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-多个生产者和多个消费者"><a href="#3-多个生产者和多个消费者" class="headerlink" title="3.多个生产者和多个消费者"></a>3.多个生产者和多个消费者</h2><blockquote><p>  有几个消费者就需要发送几次结束信号：这种方式非常的low。</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544037878438&amp;di=84b22bd8203e0a849b7978de444b78e3&amp;imgtype=0&amp;src=http%3A%2F%2F7xswxf.com2.z0.glb.qiniucdn.com%2Fblog%2Fconsumer2.jpg" alt="多生产者和多消费者"></p><ul><li><p>其实我们的思路无非是发送结束信号而已，有另外一种队列提供了这种机制 </p><blockquote><p>JoinableQueue([maxsize])：这就像是一个Queue对象，但队列允许项目的使用者通知生成者项目已经被成功处理。通知进程是使用共享的信号和条件变量来实现的。</p></blockquote></li></ul><ul><li><p>参数介绍</p><blockquote><p>maxsize是队列中允许最大项数，省略则无大小限制。</p></blockquote></li></ul><ul><li><p>方法介绍</p><blockquote><p>JoinableQueue的实例p除了与Queue对象相同的方法之外还具有：</p><ol><li>q.task_done()：使用者使用此方法发出信号，表示q.get()的返回项目已经被处理。如果调用此方法的次数大于从队列中删除项目的数量，将引发ValueError异常</li><li>q.join():生产者调用此方法进行阻塞，直到队列中所有的项目均被处理。阻塞将持续到队列中的每个项目均调用q.task_done（）方法为止</li></ol></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,JoinableQueue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'\033[45m%s 吃 %s\033[0m'</span> %(os.getpid(),res))</span><br><span class="line">        q.task_done() <span class="comment">#向q.join()发送一次信号,证明一个数据已经被取走了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(name,q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">'%s%s'</span> %(name,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">'\033[44m%s 生产了 %s\033[0m'</span> %(os.getpid(),res))</span><br><span class="line">    q.join()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q=JoinableQueue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(<span class="string">'包子'</span>,q))</span><br><span class="line">    p2=Process(target=producer,args=(<span class="string">'骨头'</span>,q))</span><br><span class="line">    p3=Process(target=producer,args=(<span class="string">'泔水'</span>,q))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line">    c2=Process(target=consumer,args=(q,))</span><br><span class="line">    c1.daemon=<span class="keyword">True</span></span><br><span class="line">    c2.daemon=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p_l=[p1,p2,p3,c1,c2]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_l:</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    print(<span class="string">'主'</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#主进程等---&gt;p1,p2,p3等----&gt;c1,c2</span></span><br><span class="line">    <span class="comment">#p1,p2,p3结束了,证明c1,c2肯定全都收完了p1,p2,p3发到队列的数据</span></span><br><span class="line">    <span class="comment">#因而c1,c2也没有存在的价值了,应该随着主进程的结束而结束,所以设置成守护进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Producer-consumer model </tag>
            
            <tag> Message queue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程之协程</title>
      <link href="//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%8F%E7%A8%8B/"/>
      <url>//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="http://images2015.cnblogs.com/blog/1042150/201701/1042150-20170117170030911-224015765.png" alt="协程"></p><p>协程的本质就是在单线程下，由用户自己控制一个任务遇到IO阻塞了就切换另外一个任务去执行，以此来提升效率。 为了实现它，我们需要找寻一种可以满足以下条件的解决方案条件的解决方案 。</p><a id="more"></a><blockquote><p>  可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停的位置继续执行。作为上述条件的补充：可以检测IO操作，在遇到IO操作的情况下才发生切换</p></blockquote><p>对于单线程下，我们不可避免程序中出现IO操作，但如果我们能在自己的程序中（即用户程序级别，而非操作系统级别）控制单线程下的多个任务能在一个任务遇到IO阻塞时就切换到另外一个任务去计算，这样就保证了该线程能够最大限度地处于就绪态，即随时都可以被CPU执行的状态，相当于我们在用户程序级别将自己的IO操作最大限度地隐藏起来，从而可以迷惑操作系统，让其看到：该线程好像是一直在计算，IO比较少，从而更多的将CPU的执行权限分配给我们的线程。</p><h1 id="一、协程介绍"><a href="#一、协程介绍" class="headerlink" title="一、协程介绍"></a>一、协程介绍</h1><h2 id="1-协程"><a href="#1-协程" class="headerlink" title="1.协程"></a>1.协程</h2><p>​    单线程下的并发，又称微线程，纤程。英文名Coroutine。总的来说：<strong>协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的。</strong></p><blockquote><ol><li>Python的线程属于内核级别的，即由操作系统控制调度（如单线程遇到IO或执行时间过长就会被迫交出CPU执行权限，切换其他线程运行）</li><li>单线程内开启协程，一旦遇到IO，就会从应用程序级别（而非操作系统）控制切换，以此来提升效率（非IO操作的切换与效率无关）。</li></ol></blockquote><h2 id="2-单线程内控制协程的切换的优缺点"><a href="#2-单线程内控制协程的切换的优缺点" class="headerlink" title="2.单线程内控制协程的切换的优缺点"></a>2.单线程内控制协程的切换的优缺点</h2><ul><li><p>和操作系统控制线程的切换对比，用户在单线程内控制协程的切换的<strong>优点：</strong> </p><blockquote><ol><li>协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级</li><li>单线程内就可以实现并发的效果，最大限度地利用CPU</li></ol></blockquote></li></ul><ul><li><p>和操作系统控制线程的切换对比，用户在单线程内控制协程的切换的<strong>缺点：</strong> </p><blockquote><ol><li>协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程</li><li>协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程</li></ol></blockquote></li></ul><h2 id="3-协程的特点"><a href="#3-协程的特点" class="headerlink" title="3.协程的特点"></a>3.协程的特点</h2><ol><li>必须在只有一个单线程里实现并发</li><li>修改共享数据不需加锁</li><li>用户程序里自己保存多个控制流的上下文栈</li><li>一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet都无法实现，就用到了gevent模块（select机制））</li></ol><h2 id="4-Greenlet介绍"><a href="#4-Greenlet介绍" class="headerlink" title="4.Greenlet介绍"></a>4.Greenlet介绍</h2><p>如果在单个线程内有多个个任务，若要实现在多个任务之间切换，使用yield生成器的方式过于麻烦（需要先得到初始化一次的生成器，然后再调用send。。。非常麻烦），而使用<code>greenlet</code>模块可以非常简单地实现这20个任务直接的切换 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install greelet</span></span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s eat 1'</span> %name)</span><br><span class="line">    g2.switch(<span class="string">'Namy'</span>)</span><br><span class="line">    print(<span class="string">'%s eat 2'</span> %name)</span><br><span class="line">    g2.switch()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s play 1'</span> %name)</span><br><span class="line">    g1.switch()</span><br><span class="line">    print(<span class="string">'%s play 2'</span> %name)</span><br><span class="line"></span><br><span class="line">g1=greenlet(eat)</span><br><span class="line">g2=greenlet(play)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以在第一次switch时传入参数，以后都不需要</span></span><br><span class="line">g1.switch(<span class="string">'Luffy'</span>)</span><br></pre></td></tr></table></figure><p><code>greenlet</code>只是提供了一种比generator更加便捷的切换方式，当切到一个任务执行时如果遇到IO，那就原地阻塞，仍然是没有解决遇到IO自动切换来提升效率的问题。 </p><blockquote><p>  单线程里的这多个任务的代码通常会既有计算操作又有阻塞操作，我们完全可以在执行任务1时遇到阻塞，就利用阻塞的时间去执行任务2。。。。如此，才能提高效率，这就用到了<code>gevent</code>模块。 </p></blockquote><h2 id="5-Gevent介绍"><a href="#5-Gevent介绍" class="headerlink" title="5.Gevent介绍"></a>5.Gevent介绍</h2><blockquote><p>  <code>gevent</code>是一个第三方库，<strong>可以轻松通过<code>gevent</code>实现并发同步或异步编程</strong>，在<code>gevent</code>中用到的主要模式是<code>gevent</code> , 它是以C扩展模块形式接入Python的轻量级协程。 <code>greenlet</code>全部运行在主程序操作系统进程的内部，但它们被协作式地调度。 </p></blockquote><ul><li><p>用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">g1=gevent.spawn(func,<span class="number">1</span>,,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">4</span>,y=<span class="number">5</span>)创建一个协程对象g1，spawn括号内第一个参数是函数名，如eat，后面可以有多个参数，可以是位置实参或关键字实参，都是传给函数eat的</span><br><span class="line">g2=gevent.spawn(func2)</span><br><span class="line">g1.join() <span class="comment"># 等待g1结束</span></span><br><span class="line">g2.join() <span class="comment"># 等待g2结束</span></span><br><span class="line"><span class="comment"># 或者上述两步合作一步：gevent.joinall([g1,g2])</span></span><br><span class="line">g1.value  <span class="comment"># 拿到func1的返回值</span></span><br></pre></td></tr></table></figure><p><strong>遇到IO阻塞时会自动切换任务</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s eat 1'</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'%s eat 2'</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s play 1'</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'%s play 2'</span> %name)</span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat,<span class="string">'Luffy'</span>)</span><br><span class="line">g2=gevent.spawn(play,name=<span class="string">'Namy'</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line"><span class="comment"># 或者gevent.joinall([g1,g2])</span></span><br><span class="line">print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>上例<code>gevent.sleep(2)</code>模拟的是<code>gevent</code>可以识别的IO阻塞,而<code>time.sleep(2)</code>或其他的阻塞,<code>gevent</code>是不能直接识别的需要用下面一行代码,打补丁,就可以识别了。</strong></p><p><strong><code>from gevent import monkey;monkey.patch_all()</code>必须放到被打补丁者的前面，如<code>time，socket</code>模块之前</strong></p><p><strong>或者我们干脆记忆成：要用<code>gevent</code>，需要将<code>from gevent import monkey;monkey.patch_all()</code>放到文件的开头。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'eat food 1'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'eat food 2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'play 1'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'play 2'</span>)</span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat)</span><br><span class="line">g2=gevent.spawn(play_phone)</span><br><span class="line">gevent.joinall([g1,g2])</span><br><span class="line">print(<span class="string">'主'</span>)</span><br></pre></td></tr></table></figure><p><strong>我们可以用<code>threading.current_thread().getName()</code>来查看每个g1和g2，查看的结果为<code>DummyThread-n</code>，即假线程。</strong></p></li></ul><h1 id="二、Gevent之同步与异步"><a href="#二、Gevent之同步与异步" class="headerlink" title="二、Gevent之同步与异步"></a>二、Gevent之同步与异步</h1><blockquote><p>  改代码中的重要部分是将<code>task</code>函数封装到<code>greenlet</code>内部线程的<code>gevent.spawn</code>。 初始化的<code>greenlet</code>列表存放在数组<code>threads</code>中，此数组被传给<code>gevent.joinall</code> 函数，后者阻塞当前流程，并执行所有给定的<code>greenlet</code>。执行流程只会在 所有<code>greenlet执行</code>完后才会继续向下走。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> spawn,joinall,monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(pid)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Some non-deterministic task</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print(<span class="string">'Task %s done'</span> % pid)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synchronous</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        task(i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">asynchronous</span><span class="params">()</span>:</span></span><br><span class="line">    g_l=[spawn(task,i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    joinall(g_l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Synchronous:'</span>)</span><br><span class="line">    synchronous()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Asynchronous:'</span>)</span><br><span class="line">    asynchronous()</span><br></pre></td></tr></table></figure><h1 id="三、-Gevent之应用举例"><a href="#三、-Gevent之应用举例" class="headerlink" title="三、 Gevent之应用举例"></a>三、 Gevent之应用举例</h1><h2 id="1-爬虫"><a href="#1-爬虫" class="headerlink" title="1.爬虫"></a>1.爬虫</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> %url)</span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">'%d bytes received from %s'</span> %(len(response.text),url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time=time.time()</span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(get_page,<span class="string">'https://www.ice5.vip/'</span>),</span><br><span class="line">    gevent.spawn(get_page,<span class="string">'https://www.taobao.com/'</span>),</span><br><span class="line">    gevent.spawn(get_page,<span class="string">'https://www.jd.com/'</span>),</span><br><span class="line">])</span><br><span class="line">stop_time=time.time()</span><br><span class="line">print(<span class="string">'run time is %s'</span> %(stop_time-start_time))</span><br></pre></td></tr></table></figure><h2 id="2-单线程下的socket并发"><a href="#2-单线程下的socket并发" class="headerlink" title="2.单线程下的socket并发"></a>2.单线程下的socket并发</h2><p><strong>再次提醒：</strong>通过<code>gevent</code>实现单线程下的<code>socket</code>并发（<code>from gevent import monkey;monkey.patch_all()</code>一定要放到导入<code>socket</code>模块之前，否则<code>gevent</code>无法识别<code>socket</code>的阻塞） </p><ul><li><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="comment">#如果不想用money.patch_all()打补丁,可以用gevent自带的socket</span></span><br><span class="line"><span class="comment"># from gevent import socket</span></span><br><span class="line"><span class="comment"># s=socket.socket()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(server_ip,port)</span>:</span></span><br><span class="line">    s=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    s.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    s.bind((server_ip,port))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        conn,addr=s.accept()</span><br><span class="line">        gevent.spawn(talk,conn,addr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(conn,addr)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            res=conn.recv(<span class="number">1024</span>)</span><br><span class="line">            print(<span class="string">'client %s:%s msg: %s'</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],res))</span><br><span class="line">            conn.send(res.upper())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    client.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    msg=client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(msg.decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>多个线程并发客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(server_ip,port)</span>:</span></span><br><span class="line">    c=socket(AF_INET,SOCK_STREAM) <span class="comment">#套接字对象一定要加到函数内，即局部名称空间内，放在函数外则被所有线程共享，则大家公用一个套接字对象，那么客户端端口永远一样了</span></span><br><span class="line">    c.connect((server_ip,port))</span><br><span class="line"></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        c.send((<span class="string">'%s say hello %s'</span> %(threading.current_thread().getName(),count)).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        msg=c.recv(<span class="number">1024</span>)</span><br><span class="line">        print(msg.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        t=Thread(target=client,args=(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Association </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程之 IO模型</title>
      <link href="//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8BIO%E6%A8%A1%E5%9E%8B/"/>
      <url>//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8BIO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO Model </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程之多线程</title>
      <link href="//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2178964645,4286259731&amp;fm=26&amp;gp=0.jpg" alt="多线程"></p><p>在传统操作系统中，<strong>每个进程有一个地址空间，而且默认就有一个控制线程</strong>。线程顾名思义，就是一条流水线工作的过程，一条流水线必须属于一个车间，一个车间的工作过程是一个进程。车间负责把资源整合到一起，是一个资源单位，而一个车间内至少有一个流水线。流水线的工作需要电源，电源就相当于CPU。所以，<strong>进程只是用来把资源集中到一起（进程只是一个资源单位，或者说资源集合），而线程才是CPU上的执行单位。</strong> </p><a id="more"></a><h1 id="一、线程的理论基础"><a href="#一、线程的理论基础" class="headerlink" title="一、线程的理论基础"></a>一、线程的理论基础</h1><h2 id="1-线程的概念"><a href="#1-线程的概念" class="headerlink" title="1.线程的概念"></a>1.线程的概念</h2><blockquote><p>在一个进程中存在多个控制线程，多个控制线程共享该进程的地址空间，相当于一个车间内有多条流水线，都共用一个车间的资源。 </p></blockquote><h2 id="2-创建线程的开销"><a href="#2-创建线程的开销" class="headerlink" title="2.创建线程的开销"></a>2.创建线程的开销</h2><ul><li>创建进程的开销要远大于线程？ </li></ul><p>如果我们的软件是一个工厂，该工厂有多条流水线，流水线工作需要电源，电源只有一个即CPU（单核CPU）</p><p>一个车间就是一个进程，一个车间至少一条流水线（一个进程至少一个线程）</p><p>创建一个进程，就是创建一个车间（申请空间，在该空间内建至少一条流水线）</p><p>而建线程，就只是在一个车间内造一条流水线，无需申请空间，所以创建开销小</p><ul><li>进程之间是竞争关系，线程之间是协作关系？ </li></ul><p>车间直接是竞争/抢电源的关系，竞争（不同的进程直接是竞争关系，是不同的程序员写的程序运行的，迅雷抢占其他进程的网速，360把其他进程当做病毒干死） 一个车间的不同流水线式协同工作的关系（同一个进程的线程之间是合作关系，是同一个程序写的程序内开启动，迅雷内的线程是合作关系，不会自己干自己） </p><h2 id="3-线程与进程的区别"><a href="#3-线程与进程的区别" class="headerlink" title="3.线程与进程的区别"></a>3.线程与进程的区别</h2><ol><li><p>Threads share the address space of the process that created it; processes have their own address space.</p><blockquote><p>  创建线程的进程的地址空间在该进程内是共享的；相反的各个进程有自己的地址空间。</p></blockquote></li><li><p>Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.</p><blockquote><p>线程可以直接访问其进程的数据；但是进程有它们自己的父进程的数据的副本。</p></blockquote></li><li><p>Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.</p><blockquote><p>  线程可以直接与自己进程内的其他线程通信；但是不同的进程间必须使用进程间通信来与兄弟进程通信。</p></blockquote></li><li><p>New threads are easily created; new processes require duplication of the parent process.</p><blockquote><p>  线程的创建很容易；但是创建新的进程赋值父进程。</p></blockquote></li><li><p>Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.</p><blockquote><p>线程可以对同一个进程内的其他线程进行控制；但是进程只能对子进程执行控制。</p></blockquote></li><li><p>Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process does not affect child processes.</p><blockquote><p>主线程的任何变动（取消、优先级更改等）可能会影响到进程内其他线程的行为；父进程的更改不影响子进程。</p></blockquote></li></ol><h2 id="4-为何要用多线程"><a href="#4-为何要用多线程" class="headerlink" title="4.为何要用多线程"></a>4.为何要用多线程</h2><p>多线程指的是，在一个进程中开启多个线程，简单的讲：如果多个任务共用一块地址空间，那么必须在一个进程内开启多个线程。详细的讲分为4点：</p><p>　　1. 多线程共享一个进程的地址空间</p><p>​      2. 线程比进程更轻量级，线程比进程更容易创建可撤销，在许多操作系统中，创建一个线程比创建一个进程要快10-100倍，在有大量线程需要动态和快速修改时，这一特性很有用</p><p>​      3. 若多个线程都是CPU密集型的，那么并不能获得性能上的增强，但是如果存在大量的计算和大量的I/O处理，拥有多个线程允许这些活动彼此重叠运行，从而会加快程序执行的速度。</p><p>​      4. 在多CPU系统中，为了最大限度的利用多核，可以开启多个线程，比开进程开销要小的多。（这一条并不适用于Python）</p><h2 id="5-多线程的应用举例"><a href="#5-多线程的应用举例" class="headerlink" title="5.多线程的应用举例"></a>5.多线程的应用举例</h2><p>开启一个字处理软件进程，该进程肯定需要办不止一件事情，比如监听键盘输入，处理文字，定时自动将文字保存到硬盘，这三个任务操作的都是同一块数据，因而不能用多进程。只能在一个进程里并发地开启三个线程,如果是单线程，那就只能是，键盘输入时，不能处理文字和自动保存，自动保存时又不能输入和处理文字。 </p><hr><blockquote><p>  以下知识了解即可</p></blockquote><h2 id="6-经典的线程模型"><a href="#6-经典的线程模型" class="headerlink" title="6. 经典的线程模型"></a>6. 经典的线程模型</h2><p>多个线程共享同一个进程的地址空间中的资源，是对一台计算机上多个进程的模拟，有时也称线程为轻量级的进程，而对一台计算机上多个进程，则共享物理内存、磁盘、打印机等其他物理资源。多线程的运行也多进程的运行类似，是cpu在多个线程之间的快速切换。</p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=704377531,2671938617&amp;fm=26&amp;gp=0.jpg" alt=""></p><p>不同的进程之间是充满敌意的，彼此是抢占、竞争CPU的关系，如果迅雷会和QQ抢资源。而同一个进程是由一个程序员的程序创建，所以同一进程内的线程是合作关系，一个线程可以访问另外一个线程的内存地址，大家都是共享的，一个线程干死了另外一个线程的内存，那纯属程序员脑子有问题。 </p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2992892561,3353209553&amp;fm=11&amp;gp=0.jpg" alt="线程的堆栈"></p><p>不同于进程，线程库无法利用时钟中断强制线程让出CPU，可以调用thread_yield运行线程自动放弃cpu，让另外一个线程运行。 </p><p>　　线程通常是有益的，但是带来了不小程序设计难度，线程的问题是：</p><p>　　1. 父进程有多个线程，那么开启的子线程是否需要同样多的线程</p><p>　　　如果是，那么附近中某个线程被阻塞，那么copy到子进程后，copy版的线程也要被阻塞吗，想一想nginx的多线程模式接收用户连接。</p><p>　　2. 在同一个进程中，如果一个线程关闭了问题，而另外一个线程正准备往该文件内写内容呢？</p><p>​          如果一个线程注意到没有内存了，并开始分配更多的内存，在工作一半时，发生线程切换，新的线程也发现内存不够用了，又开始分配更多的内存，这样内存就被分配了多次，这些问题都是多线程编程的典型问题，需要仔细思考和设计。</p><h2 id="7-POSIX线程"><a href="#7-POSIX线程" class="headerlink" title="7. POSIX线程"></a>7. POSIX线程</h2><p> 为了实现可移植的线程程序,IEEE在IEEE标准1003.1c中定义了线程标准，它定义的线程包叫Pthread。大部分UNIX系统都支持该标准，简单介绍如下 </p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=799589278,3216866642&amp;fm=26&amp;gp=0.jpg" alt="POSIX线程"></p><h2 id="8-在用户空间实现的线程"><a href="#8-在用户空间实现的线程" class="headerlink" title="8.在用户空间实现的线程"></a>8.在用户空间实现的线程</h2><p>线程的实现可以分为两类：用户级线程(User-Level Thread)和内核线线程(Kernel-Level Thread)，后者又称为内核支持的线程或轻量级进程。在多线程操作系统中，各个系统的实现方式并不相同，在有的系统中实现了用户级线程，有的系统中实现了内核级线程。</p><p>​    用户级线程内核的切换由用户态程序自己控制内核切换,不需要内核干涉，少了进出内核态的消耗，但不能很好的利用多核CPU,目前Linux pthread大体是这么做的。</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3780940801,1990470578&amp;fm=11&amp;gp=0.jpg" alt="在用户空间实现的线程"></p><p>​    在用户空间模拟操作系统对进程的调度，来调用一个进程中的线程，每个进程中都会有一个运行时系统，用来调度线程。此时当该进程获取CPU时，进程内再调度出一个线程去执行，同一时刻只有一个线程执行。     </p><h2 id="9-在内核空间实现的线程"><a href="#9-在内核空间实现的线程" class="headerlink" title="9.在内核空间实现的线程"></a>9.在内核空间实现的线程</h2><p> 内核级线程:切换由内核控制，当线程进行切换的时候，由用户态转化为内核态。切换完毕要从内核态返回用户态；可以很好的利用smp，即利用多核CPI。windows线程就是这样的。 </p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544210912939&amp;di=a4ca3d7ee9b1361917fdede024b0b3cf&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201811%2F20181116135607662609.png" alt="内核空间实现的线程"></p><h2 id="10-用户级与内核级线程的对比"><a href="#10-用户级与内核级线程的对比" class="headerlink" title="10.用户级与内核级线程的对比"></a>10.用户级与内核级线程的对比</h2><p>   <strong>一： 以下是用户级线程和内核级线程的区别：</strong></p><ol><li>内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。</li><li>用户级线程的创建、撤消和调度不需要OS内核的支持，是在语言（如Java）这一级处理的；而内核支持线程的创建、撤消和调度都需OS内核提供支持，而且与进程的创建、撤消和调度大体是相同的。</li><li>用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。</li><li>在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。</li><li>用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。</li></ol><p>​    <strong>二： 内核线程的优缺点</strong></p><p>　　<strong>优点：</strong></p><ol><li>当有多个处理机时，一个进程的多个线程可以同时执行。</li></ol><p>　　<strong>缺点：</strong></p><ol><li>由内核进行调度。</li></ol><p>​    <strong>三： 用户进程的优缺点</strong></p><p>　　<strong>优点：</strong></p><ol><li>线程的调度不需要内核直接参与，控制简单。</li><li>可以在不支持线程的操作系统中实现。</li><li>创建和销毁线程、线程切换代价等线程管理的代价比内核线程少得多。</li><li>允许每个进程定制自己的调度算法，线程管理比较灵活。</li><li>线程能够利用的表空间和堆栈空间比内核级线程多。</li><li>同一进程中只能同时有一个线程在运行，如果有一个线程使用了系统调用而阻塞，那么整个进程都会被挂起。另外，页面失效也会产生同样的问题。</li></ol><p>　　<strong>缺点：</strong></p><ol><li>资源调度按照进程进行，多个处理机下，同一个进程中的线程只能在同一个处理机下分时复用</li></ol><h2 id="11-混合实现"><a href="#11-混合实现" class="headerlink" title="11.混合实现"></a>11.混合实现</h2><p>用户级与内核级的多路复用，内核同一调度内核线程，每个内核线程对应n个用户线程 </p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544210870428&amp;di=a4163a5475c77b7e4d9ae58261cae0af&amp;imgtype=0&amp;src=http%3A%2F%2Fhi.csdn.net%2Fattachment%2F201109%2F15%2F0_1316052575mzot.gif" alt="混合实现"></p><blockquote><p>  以上知识了解即可</p></blockquote><hr><h1 id="二、多线程的代码实现"><a href="#二、多线程的代码实现" class="headerlink" title="二、多线程的代码实现"></a>二、多线程的代码实现</h1><h2 id="1-threading模块介绍"><a href="#1-threading模块介绍" class="headerlink" title="1.threading模块介绍"></a>1.threading模块介绍</h2><p><code>multiprocess</code>模块的完全模仿了<code>threading</code>模块的接口，二者在使用层面，有很大的相似性。</p><p><a href="https://docs.python.org/3/library/threading.html?highlight=threading#" target="_blank" rel="noopener">Threading模块官网介绍</a></p><h2 id="2-开启线程的两种方式"><a href="#2-开启线程的两种方式" class="headerlink" title="2.开启线程的两种方式"></a>2.开启线程的两种方式</h2><ul><li><p>方式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'%s say hello'</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">'egon'</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方式二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sayhi</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">'%s say hi'</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Sayhi(<span class="string">'Luffy'</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-一个进程下开启多个线程与一个进程下开启多个子进程的区别"><a href="#3-一个进程下开启多个线程与一个进程下开启多个子进程的区别" class="headerlink" title="3.一个进程下开启多个线程与一个进程下开启多个子进程的区别"></a>3.一个进程下开启多个线程与一个进程下开启多个子进程的区别</h2><h3 id="3-1-开启速度"><a href="#3-1-开启速度" class="headerlink" title="3.1 开启速度"></a>3.1 开启速度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'主线程/主进程'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#在主进程下开启子进程</span></span><br><span class="line">    t=Process(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'主线程/主进程'</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure><h3 id="3-2-pid"><a href="#3-2-pid" class="headerlink" title="3.2 pid"></a>3.2 pid</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>,os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#part1:在主进程下开启多个线程,每个线程都跟主进程的pid一样</span></span><br><span class="line">    t1=Thread(target=work)</span><br><span class="line">    t2=Thread(target=work)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(<span class="string">'主线程/主进程pid'</span>,os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2:开多个进程,每个进程都有不同的pid</span></span><br><span class="line">    p1=Process(target=work)</span><br><span class="line">    p2=Process(target=work)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    print(<span class="string">'主线程/主进程pid'</span>,os.getpid())</span><br></pre></td></tr></table></figure><h3 id="3-3-数据共享问题"><a href="#3-3-数据共享问题" class="headerlink" title="3.3 数据共享问题"></a>3.3 数据共享问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># n=100</span></span><br><span class="line">    <span class="comment"># p=Process(target=work)</span></span><br><span class="line">    <span class="comment"># p.start()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line">    <span class="comment"># print('主',n) # 毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</span></span><br><span class="line"></span><br><span class="line">    n=<span class="number">1</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">'主'</span>,n)   <span class="comment"># 查看结果为0,因为同一进程内的线程之间共享进程内的数据</span></span><br></pre></td></tr></table></figure><h2 id="4-线程相关的其他方法"><a href="#4-线程相关的其他方法" class="headerlink" title="4.线程相关的其他方法"></a>4.线程相关的其他方法</h2><blockquote><p>  Thread实例对象的方法</p><ol><li>isAlive(): 返回线程是否活动的</li><li>getName(): 返回线程名</li><li>setName(): 设置线程名</li></ol></blockquote><blockquote><p>  threading模块提供的一些方法</p><ol><li>threading.currentThread(): 返回当前的线程变量</li><li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程</li><li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line">    print(threading.current_thread()) <span class="comment">#主线程</span></span><br><span class="line">    print(threading.enumerate()) <span class="comment">#连同主线程在内有两个运行的线程</span></span><br><span class="line">    print(threading.active_count())</span><br><span class="line">    print(<span class="string">'主线程/主进程'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    MainThread</span></span><br><span class="line"><span class="string">    &lt;_MainThread(MainThread, started 140735268892672)&gt;</span></span><br><span class="line"><span class="string">    [&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    Thread-1</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure><ul><li><p>主线程等待子线程结束 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'%s say hello'</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">'egon'</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br><span class="line">    print(t.is_alive())</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Luffy say hello</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-守护线程"><a href="#5-守护线程" class="headerlink" title="5.守护线程"></a>5.守护线程</h2><blockquote><p>无论是进程还是线程，都遵循：守护进/线程会等待主进/线运行完毕后被销毁</p><p><strong>需要强调的是：运行完毕并非终止运行</strong></p></blockquote><ul><li><p>对主进程来说，运行完毕指的是主进程代码运行完毕</p></li><li><p>对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</p></li></ul><h3 id="5-1-详细解释"><a href="#5-1-详细解释" class="headerlink" title="5.1 详细解释"></a>5.1 详细解释</h3><blockquote><p>  主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束。</p></blockquote><blockquote><p>  主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</p></blockquote><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'%s say hello'</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">'egon'</span>,))</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>) <span class="comment">#必须在t.start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br><span class="line">    print(t.is_alive())</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="6-Python-GIL-Global-Interpreter-Lock"><a href="#6-Python-GIL-Global-Interpreter-Lock" class="headerlink" title="6.Python GIL(Global Interpreter Lock)"></a>6.Python GIL(Global Interpreter Lock)</h2><p><a href="https//www.ice5/Python GIL/">Python GIL详解</a></p><p><a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf" target="_blank" rel="noopener">http://www.dabeaz.com/python/UnderstandingGIL.pdf</a></p><h2 id="7-同步锁"><a href="#7-同步锁" class="headerlink" title="7.同步锁"></a>7.同步锁</h2><blockquote><p>  需要注意的是：</p><ol><li>线程抢的是GIL锁，GIL锁相当于执行权限，拿到执行权限后才能拿到互斥锁Lock，其他线程也可以抢到GIL，但如果发现Lock仍然没有被释放则阻塞，即便是拿到执行权限GIL也要立刻交出来</li><li>join是等待所有，即整体串行，而锁只是锁住修改共享数据的部分，即部分串行，要想保证数据安全的根本原理在于让并发变成串行，join与互斥锁都可以实现，毫无疑问，互斥锁的部分串行效率要更高</li><li>一定要注意看本小节最后的GIL与互斥锁的经典分析</li></ol></blockquote><p>​    锁的目的是为了保护共享的数据，同一时间只能有一个线程来修改共享的数据。所以，保护不同的数据就应该加不同的锁。</p><p>​    GIL 与Lock是两把锁，保护的数据不一样，前者是解释器级别的（当然保护的就是解释器级别的数据，比如垃圾回收的数据），后者是保护用户自己开发的应用程序的数据，很明显GIL不负责这件事，只能用户自定义加锁处理，即Lock。</p><p><strong>过程分析：所有线程抢的是GIL锁，或者说所有线程抢的是执行权限</strong></p><p>　　线程1抢到GIL锁，拿到执行权限，开始执行，然后加了一把Lock，还没有执行完毕，即线程1还未释放Lock，有可能线程2抢到GIL锁，开始执行，执行过程中发现Lock还没有被线程1释放，于是线程2进入阻塞，被夺走执行权限，有可能线程1拿到GIL，然后正常执行到释放Lock。。。这就导致了串行运行的效果。</p><p>　　因为是串行，那我们执行</p><p>　　<strong>t1.start()</strong></p><p>　　<strong>t1.join</strong></p><p>　　<strong>t2.start()</strong></p><p>　　<strong>t2.join()</strong></p><p>　　这也是串行执行啊，为何还要加Lock呢，需知join是等待t1所有的代码执行完，相当于锁住了t1的所有代码，而Lock只是锁住一部分操作共享数据的代码。</p><ul><li><p>详细解释</p><p>因为Python解释器帮你自动定期进行内存回收，你可以理解为python解释器里有一个独立的线程，每过一段时间它起wake up做一次全局轮询看看哪些内存数据是可以被清空的，此时你自己的程序 里的线程和 py解释器自己的线程是并发运行的，假设你的线程删除了一个变量，py解释器的垃圾回收线程在清空这个变量的过程中的clearing时刻，可能一个其它线程正好又重新给这个还没来及得清空的内存空间赋值了，结果就有可能新赋值的数据被删除了，为了解决类似的问题，python解释器简单粗暴的加了锁，即当一个线程运行时，其它人都不能动，这样就解决了上述的问题，  这可以说是Python早期版本的遗留问题。　</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(n)  <span class="comment"># 结果可能为99</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁。</strong></p><h3 id="7-1-GIL锁与互斥锁的综合分析"><a href="#7-1-GIL锁与互斥锁的综合分析" class="headerlink" title="7.1 GIL锁与互斥锁的综合分析"></a>7.1 GIL锁与互斥锁的综合分析</h3><blockquote><ol><li>100个线程去抢GIL锁，即抢执行权限</li><li>肯定有一个线程先抢到GIL（暂且称为线程1），然后开始执行，一旦执行就会拿到lock.acquire()</li><li>极有可能线程1还未运行完毕，就有另外一个线程2抢到GIL，然后开始运行，但线程2发现互斥锁lock还未被线程1释放，于是阻塞，被迫交出执行权限，即释放GIL</li><li>直到线程1重新抢到GIL，开始从上次暂停的位置继续执行，直到正常释放互斥锁lock，然后其他的线程再重复2 3 4的过程</li></ol></blockquote><h3 id="7-2-互斥锁与join的区别"><a href="#7-2-互斥锁与join的区别" class="headerlink" title="7.2 互斥锁与join的区别"></a>7.2 互斥锁与<code>join</code>的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不加锁:并发执行,速度快,数据不安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    print(<span class="string">'%s is running'</span> %current_thread().getName())</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    print(<span class="string">'主:%s n:%s'</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:0.5216062068939209 n:99</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不加锁:未加锁部分并发执行,加锁部分串行执行,速度慢,数据安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#未加锁的代码并发运行</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'%s start to run'</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="comment">#加锁的代码串行运行</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    print(<span class="string">'主:%s n:%s'</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:53.294203758239746 n:0</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有的同学可能有疑问:既然加锁会让运行变成串行,那么我在start之后立即使用join,就不用加锁了啊,也是串行的效果啊</span></span><br><span class="line"><span class="comment">#没错:在start之后立刻使用jion,肯定会将100个任务的执行变成串行,毫无疑问,最终n的结果也肯定是0,是安全的,但问题是</span></span><br><span class="line"><span class="comment">#start后立即join:任务内的所有代码都是串行执行的,而加锁,只是加锁的部分即修改共享数据的部分是串行的</span></span><br><span class="line"><span class="comment">#单从保证数据安全方面,二者都可以实现,但很明显是加锁的效率更高.</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'%s start to run'</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    print(<span class="string">'主:%s n:%s'</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Thread-1 start to run</span></span><br><span class="line"><span class="string">Thread-2 start to run</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 start to run</span></span><br><span class="line"><span class="string">主:350.6937336921692 n:0 #耗时是多么的恐怖</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">互斥锁与join的区别（重点！！！）</span><br></pre></td></tr></table></figure><h2 id="8-死锁现象与递归锁"><a href="#8-死锁现象与递归锁" class="headerlink" title="8.死锁现象与递归锁"></a>8.死锁现象与递归锁</h2><blockquote><p>  死锁： 是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，如下就是死锁：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">mutexA=Lock()</span><br><span class="line">mutexB=Lock()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(<span class="string">'\033[41m%s 拿到A锁\033[0m'</span> %self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(<span class="string">'\033[42m%s 拿到B锁\033[0m'</span> %self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(<span class="string">'\033[43m%s 拿到B锁\033[0m'</span> %self.name)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(<span class="string">'\033[44m%s 拿到A锁\033[0m'</span> %self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Thread-1 拿到A锁</span></span><br><span class="line"><span class="string">Thread-1 拿到B锁</span></span><br><span class="line"><span class="string">Thread-1 拿到B锁</span></span><br><span class="line"><span class="string">Thread-2 拿到A锁</span></span><br><span class="line"><span class="string">然后就卡住，死锁了</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock。</strong></p><p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁：</p><blockquote><p>mutexA=mutexB=threading.RLock() #一个线程拿到锁，counter加1,该线程内又碰到加锁的情况，则counter继续加1，这期间所有其他线程都只能等待，等待该线程释放所有锁，即counter递减到0为止。</p></blockquote><h2 id="9-信号量Semaphore"><a href="#9-信号量Semaphore" class="headerlink" title="9.信号量Semaphore"></a>9.信号量Semaphore</h2><p>同进程的一样</p><p>Semaphore管理一个内置的计数器，<br>每当调用acquire()时内置计数器-1；<br>调用release() 时内置计数器+1；<br>计数器不能小于0；当计数器为0时，acquire()将阻塞线程直到其他线程调用release()。</p><p>实例：(同时只有5个线程可以获得semaphore,即可以限制最大连接数为5)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Semaphore</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     if sm.acquire():</span></span><br><span class="line"><span class="comment">#         print (threading.currentThread().getName() + ' get semaphore')</span></span><br><span class="line"><span class="comment">#         time.sleep(2)</span></span><br><span class="line"><span class="comment">#         sm.release()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    sm.acquire()</span><br><span class="line">    print(<span class="string">'%s get sm'</span> %threading.current_thread().getName())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    sm.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sm=Semaphore(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">23</span>):</span><br><span class="line">        t=Thread(target=func)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p>​    与进程池是完全不同的概念，进程池Pool(4)，最大只能产生4个进程，而且从头到尾都只是这四个进程，不会产生新的，而信号量是产生一堆线程/进程。</p><p><strong><a href="http://url.cn/5DMsS9r" target="_blank" rel="noopener">互斥锁与信号量推荐博客</a> </strong></p><h2 id="10-Event"><a href="#10-Event" class="headerlink" title="10.Event"></a>10.Event</h2><p>​    线程的一个关键特性是每个线程都是独立运行且状态不可预测。如果程序中的其 他线程需要通过判断某个线程的状态来确定自己下一步的操作,这时线程同步问题就会变得非常棘手。为了解决这些问题,我们需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。在 初始情况下,Event对象中的信号标志被设置为假。如果有线程等待一个Event对象, 而这个Event对象的标志为假,那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程。如果一个线程等待一个已经被设置为真的Event对象,那么它将忽略这个事件, 继续执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">event.isSet()：返回event的状态值；</span><br><span class="line">event.wait()：如果 event.isSet()==<span class="keyword">False</span>将阻塞线程；</span><br><span class="line">event.set()： 设置event的状态值为<span class="keyword">True</span>，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；</span><br><span class="line">event.clear()：恢复event的状态值为<span class="keyword">False</span>。</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545346122&amp;di=d59aa39846eb1607818b56ae01d8fdaa&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2F20180110235736899125.png" alt="线程运行状态"></p><p>例如，有多个工作线程尝试链接MySQL，我们想要在链接前确保MySQL服务正常才让那些工作线程去连接MySQL服务器，如果连接不成功，都会去尝试重新连接。那么我们就可以采用threading.Event机制来协调各个工作线程的连接操作 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Event</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    count=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> event.is_set():</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError(<span class="string">'链接超时'</span>)</span><br><span class="line">        print(<span class="string">'&lt;%s&gt;第%s次尝试链接'</span> % (threading.current_thread().getName(), count))</span><br><span class="line">        event.wait(<span class="number">0.5</span>)</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">'&lt;%s&gt;链接成功'</span> %threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'\033[45m[%s]正在检查mysql\033[0m'</span> % threading.current_thread().getName())</span><br><span class="line">    time.sleep(random.randint(<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line">    event.set()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    event=Event()</span><br><span class="line">    conn1=Thread(target=conn_mysql)</span><br><span class="line">    conn2=Thread(target=conn_mysql)</span><br><span class="line">    check=Thread(target=check_mysql)</span><br><span class="line"></span><br><span class="line">    conn1.start()</span><br><span class="line">    conn2.start()</span><br><span class="line">    check.start()</span><br></pre></td></tr></table></figure><hr><h2 id="11-条件Condition"><a href="#11-条件Condition" class="headerlink" title="11.条件Condition"></a>11.条件Condition</h2><p>使得线程等待，只有满足某条件时，才释放n个线程 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    con.acquire()</span><br><span class="line">    con.wait()</span><br><span class="line">    print(<span class="string">"run the thread: %s"</span> %n)</span><br><span class="line">    con.release()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> </span><br><span class="line">    con = threading.Condition()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        t.start()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        inp = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> inp == <span class="string">'q'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        con.acquire()</span><br><span class="line">        con.notify(int(inp))</span><br><span class="line">        con.release()</span><br></pre></td></tr></table></figure><h2 id="12-定时器"><a href="#12-定时器" class="headerlink" title="12.定时器"></a>12.定时器</h2><blockquote><p>  定时器，指定n秒后执行某操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello, world"</span>)</span><br><span class="line"> </span><br><span class="line">t = Timer(<span class="number">1</span>, hello)</span><br><span class="line">t.start()  <span class="comment"># after 1 seconds, "hello, world" will be printed</span></span><br></pre></td></tr></table></figure><ul><li><p>验证码定时器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> random,time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.make_cache()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cache</span><span class="params">(self,interval=<span class="number">5</span>)</span>:</span></span><br><span class="line">        self.cache=self.make_code()</span><br><span class="line">        print(self.cache)</span><br><span class="line">        self.t=Timer(interval,self.make_cache)</span><br><span class="line">        self.t.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_code</span><span class="params">(self,n=<span class="number">4</span>)</span>:</span></span><br><span class="line">        res=<span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            s1=str(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">            s2=chr(random.randint(<span class="number">65</span>,<span class="number">90</span>))</span><br><span class="line">            res+=random.choice([s1,s2])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            inp=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> inp.upper() ==  self.cache:</span><br><span class="line">                print(<span class="string">'验证成功'</span>,end=<span class="string">'\n'</span>)</span><br><span class="line">                self.t.cancel()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj=Code()</span><br><span class="line">    obj.check()</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-线程queue"><a href="#13-线程queue" class="headerlink" title="13.线程queue"></a>13.线程queue</h2><p>queue队列 ：使用import queue，用法与进程Queue一样</p><blockquote><p>  queue is especially useful in threaded programming when information must be exchanged safely between multiple threads.</p></blockquote><p><strong>class queue.Queue(maxsize=0) #先进先出</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.Queue()</span><br><span class="line">q.put(<span class="string">'first'</span>)</span><br><span class="line">q.put(<span class="string">'second'</span>)</span><br><span class="line">q.put(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果(先进先出):</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>class queue.LifoQueue(maxsize=0) #last in fisrt out</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.LifoQueue()</span><br><span class="line">q.put(<span class="string">'first'</span>)</span><br><span class="line">q.put(<span class="string">'second'</span>)</span><br><span class="line">q.put(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果(后进先出):</span></span><br><span class="line"><span class="string">third</span></span><br><span class="line"><span class="string">second</span></span><br><span class="line"><span class="string">first</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>class queue.PriorityQueue(maxsize=0) #存储数据时可设置优先级的队列</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line"><span class="comment">#put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优先级越高</span></span><br><span class="line">q.put((<span class="number">20</span>,<span class="string">'a'</span>))</span><br><span class="line">q.put((<span class="number">10</span>,<span class="string">'b'</span>))</span><br><span class="line">q.put((<span class="number">30</span>,<span class="string">'c'</span>))</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">结果(数字越小优先级越高,优先级高的优先出队):</span></span><br><span class="line"><span class="string">(10, 'b')</span></span><br><span class="line"><span class="string">(20, 'a')</span></span><br><span class="line"><span class="string">(30, 'c')</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="14-Python标准模块–concurrent-futures"><a href="#14-Python标准模块–concurrent-futures" class="headerlink" title="14.Python标准模块–concurrent.futures"></a>14.Python标准模块–concurrent.futures</h2><p><a href="https://docs.python.org/dev/library/concurrent.futures.html" target="_blank" rel="noopener">官网原文链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 介绍</span></span><br><span class="line">concurrent.futures模块提供了高度封装的异步调用接口</span><br><span class="line">ThreadPoolExecutor：线程池，提供异步调用</span><br><span class="line">ProcessPoolExecutor: 进程池，提供异步调用</span><br><span class="line">Both implement the same interface, which <span class="keyword">is</span> defined by the abstract Executor <span class="class"><span class="keyword">class</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#2 基本方法</span></span><br><span class="line"><span class="class">#<span class="title">submit</span><span class="params">(fn, *args, **kwargs)</span></span></span><br><span class="line"><span class="class">异步提交任务</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">map</span><span class="params">(func, *iterables, timeout=None, chunksize=<span class="number">1</span>)</span> </span></span><br><span class="line"><span class="class">取代<span class="title">for</span>循环<span class="title">submit</span>的操作</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#<span class="title">shutdown</span><span class="params">(wait=True)</span> </span></span><br><span class="line"><span class="class">相当于进程池的<span class="title">pool</span>.<span class="title">close</span><span class="params">()</span>+<span class="title">pool</span>.<span class="title">join</span><span class="params">()</span>操作</span></span><br><span class="line">wait=True，等待池内所有任务执行完毕回收完资源后才继续</span><br><span class="line">wait=<span class="keyword">False</span>，立即返回，并不会等待池内的任务执行完毕</span><br><span class="line">但不管wait参数为何值，整个程序都会等到所有任务执行完毕</span><br><span class="line">submit和map必须在shutdown之前</span><br><span class="line"></span><br><span class="line"><span class="comment">#result(timeout=None)</span></span><br><span class="line">取得结果</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_done_callback(fn)</span></span><br><span class="line">回调函数</span><br></pre></td></tr></table></figure><h3 id="14-1-ProcessPoolExecutor"><a href="#14-1-ProcessPoolExecutor" class="headerlink" title="14.1 ProcessPoolExecutor"></a>14.1 ProcessPoolExecutor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#介绍</span></span><br><span class="line">The ProcessPoolExecutor class is an Executor subclass that uses a pool of processes to execute calls asynchronously. ProcessPoolExecutor uses the multiprocessing module, which allows it to side-step the Global Interpreter Lock but also means that only picklable objects can be executed and returned.</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">ProcessPoolExecutor</span><span class="params">(max_workers=None, mp_context=None)</span></span></span><br><span class="line">An Executor subclass that executes calls asynchronously using a pool of at most max_workers processes. If max_workers is None or not given, it will default to the number of processors on the machine. If max_workers is lower or equal to 0, then a ValueError will be raised.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'%s is runing'</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    executor=ProcessPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    futures=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">        future=executor.submit(task,i)</span><br><span class="line">        futures.append(future)</span><br><span class="line">    executor.shutdown(<span class="keyword">True</span>)</span><br><span class="line">    print(<span class="string">'+++&gt;'</span>)</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        print(future.result())</span><br></pre></td></tr></table></figure><h3 id="14-2-ThreadPoolExecutor"><a href="#14-2-ThreadPoolExecutor" class="headerlink" title="14.2 ThreadPoolExecutor"></a>14.2 ThreadPoolExecutor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#介绍</span></span><br><span class="line">ThreadPoolExecutor <span class="keyword">is</span> an Executor subclass that uses a pool of threads to execute calls asynchronously.</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">ThreadPoolExecutor</span><span class="params">(max_workers=None, thread_name_prefix=<span class="string">''</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">An</span> <span class="title">Executor</span> <span class="title">subclass</span> <span class="title">that</span> <span class="title">uses</span> <span class="title">a</span> <span class="title">pool</span> <span class="title">of</span> <span class="title">at</span> <span class="title">most</span> <span class="title">max_workers</span> <span class="title">threads</span> <span class="title">to</span> <span class="title">execute</span> <span class="title">calls</span> <span class="title">asynchronously</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Changed</span> <span class="title">in</span> <span class="title">version</span> 3.5:</span> If max_workers <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> given, it will default to the number of processors on the machine, multiplied by <span class="number">5</span>, assuming that ThreadPoolExecutor <span class="keyword">is</span> often used to overlap I/O instead of CPU work <span class="keyword">and</span> the number of workers should be higher than the number of workers <span class="keyword">for</span> ProcessPoolExecutor.</span><br><span class="line"></span><br><span class="line">New <span class="keyword">in</span> version <span class="number">3.6</span>: The thread_name_prefix argument was added to allow users to control the threading.Thread names <span class="keyword">for</span> worker threads created by the pool <span class="keyword">for</span> easier debugging.</span><br><span class="line"></span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line">与ProcessPoolExecutor相同</span><br></pre></td></tr></table></figure><h3 id="14-3-map的用法"><a href="#14-3-map的用法" class="headerlink" title="14.3 map的用法"></a>14.3 map的用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'%s is runing'</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    executor=ThreadPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i in range(11):</span></span><br><span class="line">    <span class="comment">#     future=executor.submit(task,i)</span></span><br><span class="line"></span><br><span class="line">    executor.map(task,range(<span class="number">1</span>,<span class="number">12</span>)) <span class="comment">#map取代了for+submit</span></span><br></pre></td></tr></table></figure><h3 id="14-4-回调函数"><a href="#14-4-回调函数" class="headerlink" title="14.4 回调函数"></a>14.4 回调函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'&lt;进程%s&gt; get %s'</span> %(os.getpid(),url))</span><br><span class="line">    respone=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'url'</span>:url,<span class="string">'text'</span>:respone.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(res)</span>:</span></span><br><span class="line">    res=res.result()</span><br><span class="line">    print(<span class="string">'&lt;进程%s&gt; parse %s'</span> %(os.getpid(),res[<span class="string">'url'</span>]))</span><br><span class="line">    parse_res=<span class="string">'url:&lt;%s&gt; size:[%s]\n'</span> %(res[<span class="string">'url'</span>],len(res[<span class="string">'text'</span>]))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'db.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(parse_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    urls=[</span><br><span class="line">        <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">        <span class="string">'https://www.python.org'</span>,</span><br><span class="line">        <span class="string">'https://www.openstack.org'</span>,</span><br><span class="line">        <span class="string">'https://help.github.com/'</span>,</span><br><span class="line">        <span class="string">'http://www.sina.com.cn/'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># p=Pool(3)</span></span><br><span class="line">    <span class="comment"># for url in urls:</span></span><br><span class="line">    <span class="comment">#     p.apply_async(get_page,args=(url,),callback=pasrse_page)</span></span><br><span class="line">    <span class="comment"># p.close()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line"></span><br><span class="line">    p=ProcessPoolExecutor(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        p.submit(get_page,url).add_done_callback(parse_page) <span class="comment">#parse_page拿到的是一个future对象obj，需要用obj.result()拿到结果</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Threading </tag>
            
            <tag> GIL </tag>
            
            <tag> Lock/Rlock </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络编程Socket</title>
      <link href="//%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BSocket/"/>
      <url>//%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BSocket/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544038313921&amp;di=8d6e8d5ee6206554600f9abe609f2593&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1895326200%2C873420298%26fm%3D214%26gp%3D0.jpg" alt="Socket通信模型"></p><a id="more"></a><h1 id="一、Socket层的位置"><a href="#一、Socket层的位置" class="headerlink" title="一、Socket层的位置"></a>一、Socket层的位置</h1><p>在<a href="https://www.ice5.vip/2018/12/03/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/">网络编程基础</a>中，我们已经了解到Socket层的位置，这边我们来再次回顾一下，加深印象。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544038309996&amp;di=fefa31ad36cb8fa9d8d5aae4a92de30b&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D3233222235%2C290543934%26fm%3D214%26gp%3D0.jpg" alt="Socket位置"></p><h1 id="二、Socket的概念"><a href="#二、Socket的概念" class="headerlink" title="二、Socket的概念"></a>二、Socket的概念</h1><blockquote><p>Socket是应用层与TCP/IP协议族通信的<strong>中间软件抽象层</strong>，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。 </p></blockquote><p>所以，这边我们就暂时无需深入理解<code>tcp/udp</code>协议，<code>socket</code>已经为我们封装好了，我们只需要遵循<code>socket</code>的规定去编程，写出的程序自然就是遵循<code>tcp/udp</code>标准的。 </p><ul><li><strong>注意：</strong></li></ul><blockquote><p>可能会有人将socket说成<code>ip+port</code>，<code>ip</code>是用来标识互联网中的一台主机的位置，而<code>port</code>是用来标识这台机器上的一个应用程序，<code>ip</code>地址是配置到网卡上的，而<code>port</code>是应用程序开启的，<code>ip</code>与<code>port</code>的绑定就标识了互联网中独一无二的一个应用程序，而程序的<code>pid</code>是同一台机器上不同进程或者线程的标识。</p></blockquote><h1 id="三、套接字家族发展史以及分类"><a href="#三、套接字家族发展史以及分类" class="headerlink" title="三、套接字家族发展史以及分类"></a>三、套接字家族发展史以及分类</h1><blockquote><p>套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 BSD Unix。 因此,有时人们也把套接字称为“伯克利套接字”或“BSD 套接字”。一开始,套接字被设计用在同 一台主机上多个应用程序之间的通讯。这也被称进程间通讯,或 IPC。套接字有两种（或者称为有两个种族）,分别是基于文件型的和基于网络型的。 </p></blockquote><h2 id="1-基于文件类型的套接字家族"><a href="#1-基于文件类型的套接字家族" class="headerlink" title="1.基于文件类型的套接字家族"></a>1.基于文件类型的套接字家族</h2><blockquote><p>  套接字家族的名字：AF_UNIX </p></blockquote><p>Unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信 。</p><h2 id="2-基于网络类型的套接字家族"><a href="#2-基于网络类型的套接字家族" class="headerlink" title="2.基于网络类型的套接字家族"></a>2.基于网络类型的套接字家族</h2><blockquote><p>套接字家族的名字：AF_INET </p></blockquote><p>还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET。</p><h1 id="四、套接字工作流程"><a href="#四、套接字工作流程" class="headerlink" title="四、套接字工作流程"></a>四、套接字工作流程</h1><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544038374616&amp;di=5691486fc2a8126cabc629b589898d72&amp;imgtype=0&amp;src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F5183118-609b90e5f0475927.jpg" alt="套接字工作流程"></p><p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><h2 id="1-socket-模块函数用法"><a href="#1-socket-模块函数用法" class="headerlink" title="1.socket()模块函数用法"></a>1.socket()模块函数用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.socket(socket_family,socket_type,protocal=<span class="number">0</span>)</span><br><span class="line">socket_family 可以是 AF_UNIX 或 AF_INET。socket_type 可以是 SOCK_STREAM 或 SOCK_DGRAM。protocol 一般不填,默认值为 <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">获取tcp/ip套接字</span><br><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">获取udp/ip套接字</span><br><span class="line">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">由于 socket 模块中有太多的属性。我们在这里破例使用了<span class="string">'from module import *'</span>语句。使用 <span class="string">'from socket import *'</span>,我们就把 socket 模块里的所有属性都带到我们的命名空间里了,这样能 大幅减短我们的代码。</span><br><span class="line">例如tcpSock = socket(AF_INET, SOCK_STREAM)</span><br></pre></td></tr></table></figure><h2 id="2-服务端套接字函数"><a href="#2-服务端套接字函数" class="headerlink" title="2.服务端套接字函数"></a>2.服务端套接字函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.bind()</td><td>绑定(主机,端口号)到套接字</td></tr><tr><td>s.listen()</td><td>开始TCP监听</td></tr><tr><td>s.accept()</td><td>被动接受TCP客户的连接,(阻塞式)等待连接的到来</td></tr></tbody></table><h2 id="3-客户端套接字函数"><a href="#3-客户端套接字函数" class="headerlink" title="3.客户端套接字函数"></a>3.客户端套接字函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.connect()</td><td>主动初始化TCP服务器连接</td></tr><tr><td>s.connect_ex()</td><td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr></tbody></table><h2 id="4-公共用途的套接字函数"><a href="#4-公共用途的套接字函数" class="headerlink" title="4.公共用途的套接字函数"></a>4.公共用途的套接字函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.recv()</td><td>接收TCP数据</td></tr><tr><td>s.send()</td><td>发送TCP数据(send在待发送数据量大于己端缓存区剩余空间时,数据丢失,不会发完)</td></tr><tr><td>s.sendall()</td><td>发送完整的TCP数据(本质就是循环调用send,sendall在待发送数据量大于己端缓存区剩余空间时,数据不丢失,循环调用send直到发完)</td></tr><tr><td>s.recvfrom()</td><td>接收UDP数据</td></tr><tr><td>s.sendto()</td><td>发送UDP数据</td></tr><tr><td>s.getpeername()</td><td>连接到当前套接字的远端的地址</td></tr><tr><td>s.getsockname()</td><td>当前套接字的地址</td></tr><tr><td>s.getsockopt()</td><td>返回指定套接字的参数</td></tr><tr><td>s.setsockopt()</td><td>设置指定套接字的参数</td></tr><tr><td>s.close()</td><td>关闭套接字</td></tr></tbody></table><h2 id="5-面向锁的套接字方法"><a href="#5-面向锁的套接字方法" class="headerlink" title="5.面向锁的套接字方法"></a>5.面向锁的套接字方法</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.setblocking()</td><td>设置套接字的阻塞与非阻塞模式</td></tr><tr><td>s.settimeout()</td><td>设置阻塞套接字操作的超时时间</td></tr><tr><td>s.gettimeout()</td><td>得到阻塞套接字操作的超时时间</td></tr></tbody></table><h2 id="6-面向文件的套接字的函数"><a href="#6-面向文件的套接字的函数" class="headerlink" title="6.面向文件的套接字的函数"></a>6.面向文件的套接字的函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>s.fileno()</td><td>套接字的文件描述符</td></tr><tr><td>s.makefile()</td><td>创建一个与该套接字相关的文件</td></tr></tbody></table><h1 id="五、基于TCP的套接字"><a href="#五、基于TCP的套接字" class="headerlink" title="五、基于TCP的套接字"></a>五、基于TCP的套接字</h1><blockquote><p>  TCP是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端</p></blockquote><h2 id="1-TCP服务端"><a href="#1-TCP服务端" class="headerlink" title="1.TCP服务端"></a>1.TCP服务端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ss = socket() <span class="comment">#创建服务器套接字</span></span><br><span class="line">ss.bind()      <span class="comment">#把地址绑定到套接字</span></span><br><span class="line">ss.listen()      <span class="comment">#监听链接</span></span><br><span class="line">inf_loop:      <span class="comment">#服务器无限循环</span></span><br><span class="line">    cs = ss.accept() <span class="comment">#接受客户端链接</span></span><br><span class="line">    comm_loop:         <span class="comment">#通讯循环</span></span><br><span class="line">        cs.recv()/cs.send() <span class="comment">#对话(接收与发送)</span></span><br><span class="line">    cs.close()    <span class="comment">#关闭客户端套接字</span></span><br><span class="line">ss.close()        <span class="comment">#关闭服务器套接字(可选)</span></span><br></pre></td></tr></table></figure><h2 id="2-TCP客户端"><a href="#2-TCP客户端" class="headerlink" title="2.TCP客户端"></a>2.TCP客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">cs = socket()    <span class="comment"># 创建客户套接字</span></span><br><span class="line">cs.connect()    <span class="comment"># 尝试连接服务器</span></span><br><span class="line">comm_loop:        <span class="comment"># 通讯循环</span></span><br><span class="line">     cs.send()/cs.recv()    <span class="comment"># 对话(发送/接收)</span></span><br><span class="line">cs.close()            <span class="comment"># 关闭客户套接字</span></span><br></pre></td></tr></table></figure><h2 id="3-举例"><a href="#3-举例" class="headerlink" title="3.举例"></a>3.举例</h2><blockquote><p>  socket通信流程与打电话流程类似，我们就以打电话为例来实现套接字通信</p></blockquote><ul><li><strong>服务端</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8081</span>)          <span class="comment"># 电话卡</span></span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="comment"># 买手机</span></span><br><span class="line">s.bind(ip_port)                     <span class="comment"># 手机插卡</span></span><br><span class="line">s.listen(<span class="number">5</span>)                         <span class="comment"># 手机待机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:                         <span class="comment"># 新增接收链接循环,可以不停的接电话</span></span><br><span class="line">    conn,addr=s.accept()            <span class="comment"># 手机接电话</span></span><br><span class="line">    <span class="comment"># print(conn)</span></span><br><span class="line">    <span class="comment"># print(addr)</span></span><br><span class="line">    print(<span class="string">'接到来自%s的电话'</span> %addr[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:                     <span class="comment"># 新增通信循环,可以不断的通信,收发消息</span></span><br><span class="line">        msg=conn.recv(BUFSIZE)      <span class="comment"># 听消息,听话</span></span><br><span class="line">        <span class="comment"># if len(msg) == 0:break    # 如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生</span></span><br><span class="line">        print(msg,type(msg))</span><br><span class="line">        conn.send(msg.upper())      <span class="comment"># 发消息,说话</span></span><br><span class="line">    conn.close()                    <span class="comment"># 挂电话</span></span><br><span class="line">s.close()                           <span class="comment"># 手机关机</span></span><br></pre></td></tr></table></figure><ul><li><strong>客户端</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8081</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect_ex(ip_port)                  <span class="comment"># 拨电话</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:                            <span class="comment"># 新增通信循环,客户端可以不断发收消息</span></span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    s.send(msg.encode(<span class="string">'utf-8'</span>))         <span class="comment"># 发消息,说话(只能发送字节类型)</span></span><br><span class="line">    feedback=s.recv(BUFSIZE)            <span class="comment"># 收消息,听话</span></span><br><span class="line">    print(feedback.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">s.close()                               <span class="comment"># 挂电话</span></span><br></pre></td></tr></table></figure><ul><li><p>在重启服务端时可能会遇到<code>OSError</code>的问题</p><blockquote><p>  出现改原因是由于你的服务端仍然存在四次挥手的time_wait状态在占用地址（如果不懂，请深入研究1.tcp三次握手，四次挥手 2.syn洪水攻击 3.服务器高并发情况下会有大量的time_wait状态的优化方法） </p></blockquote></li></ul><p><strong>解决方法</strong></p><ol><li><p>加入一条socket配置，重用ip和端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phone=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">phone.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>) <span class="comment"># 就是它，在bind前加</span></span><br><span class="line">phone.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>))</span><br></pre></td></tr></table></figure></li><li><p>发现系统存在大量TIME_WAIT状态的连接，通过调整Linux内核参数解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑文件，加入以下内容</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后执行 /sbin/sysctl -p 让参数生效</span></span><br><span class="line"> </span><br><span class="line">net.ipv4.tcp_syncookies = 1 # 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1   # 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1 # 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</span><br><span class="line">net.ipv4.tcp_fin_timeout    # 修改系統默认的 TIMEOUT 时间</span><br></pre></td></tr></table></figure></li></ol><h1 id="六、基于UDP的套接字"><a href="#六、基于UDP的套接字" class="headerlink" title="六、基于UDP的套接字"></a>六、基于UDP的套接字</h1><blockquote><p>  UDP是无链接的，先启动哪一端都不会报错</p></blockquote><h2 id="1-UDP服务端"><a href="#1-UDP服务端" class="headerlink" title="1.UDP服务端"></a>1.UDP服务端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ss = socket()                      <span class="comment"># 创建一个服务器的套接字</span></span><br><span class="line">ss.bind()                          <span class="comment"># 绑定服务器套接字</span></span><br><span class="line">inf_loop:                          <span class="comment"># 服务器无限循环</span></span><br><span class="line">    cs = ss.recvfrom()/ss.sendto() <span class="comment"># 对话(接收与发送)</span></span><br><span class="line">ss.close()                         <span class="comment"># 关闭服务器套接字</span></span><br></pre></td></tr></table></figure><h2 id="2-UDP客户端"><a href="#2-UDP客户端" class="headerlink" title="2.UDP客户端"></a>2.UDP客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">cs = socket()                      <span class="comment"># 创建客户套接字</span></span><br><span class="line">comm_loop:                         <span class="comment"># 通讯循环</span></span><br><span class="line">    cs.sendto()/cs.recvfrom()      <span class="comment"># 对话(发送/接收)</span></span><br><span class="line">cs.close()                         <span class="comment"># 关闭客户套接字</span></span><br></pre></td></tr></table></figure><h2 id="3-举例-1"><a href="#3-举例-1" class="headerlink" title="3.举例"></a>3.举例</h2><ul><li>服务端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">udp_server_client=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">udp_server_client.bind(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg,addr=udp_server_client.recvfrom(BUFSIZE)</span><br><span class="line">    print(msg,addr)</span><br><span class="line">    udp_server_client.sendto(msg.upper(),addr)</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">udp_server_client=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    udp_server_client.sendto(msg.encode(<span class="string">'utf-8'</span>),ip_port)</span><br><span class="line">    back_msg,addr=udp_server_client.recvfrom(BUFSIZE)</span><br><span class="line">    print(back_msg.decode(<span class="string">'utf-8'</span>),addr)</span><br></pre></td></tr></table></figure><h1 id="七、粘包现象以及粘包的解决方案"><a href="#七、粘包现象以及粘包的解决方案" class="headerlink" title="七、粘包现象以及粘包的解决方案"></a>七、粘包现象以及粘包的解决方案</h1><blockquote><p>  基于TCP的socket，在运行时会发生粘包；基于UDP的socket，在运行时永远不会发生粘包 。所以说粘包是TCP产生的一种特有的现象。</p></blockquote><p><strong>需要注意的是：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res=subprocess.Popen(cmd.decode(<span class="string">'utf-8'</span>),</span><br><span class="line">shell=<span class="keyword">True</span>,</span><br><span class="line">stderr=subprocess.PIPE,</span><br><span class="line">stdout=subprocess.PIPE)</span><br></pre></td></tr></table></figure><p>上述代码的结果编码是以当前所在的系统为准的，如果是windows，那么<strong><code>res.stdout.read()</code>读出的就是GBK编码的</strong>，在接收端需<strong>要用GBK解码</strong>，<strong>且只能从管道里读一次结果</strong>。</p><h2 id="1-Socket收发消息的原理"><a href="#1-Socket收发消息的原理" class="headerlink" title="1.Socket收发消息的原理"></a>1.Socket收发消息的原理</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544042942966&amp;di=d56193176396d1b0e47c55363a57ecb9&amp;imgtype=0&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2F20180219180702013048.png" alt="Socket收发消息的原理"></p><p>发送端可以是一K一K地发送数据，而接收端的应用程序可以两K两K地提走数据，当然也有可能一次提走3K或6K数据，或者一次只提走几个字节的数据，也就是说，应用程序所看到的数据是一个整体，或说是一个流（stream），一条消息有多少字节对应用程序是不可见的，因此<strong>TCP协议是面向流的协议</strong>，这也是容易出现粘包问题的原因。而<strong>UDP是面向消息</strong>的协议，每个UDP段都是一条消息，应用程序必须以消息为单位提取数据，不能一次提取任意字节的数据，这一点和TCP是很不同的。怎样定义消息呢？可以认为对方一次性write/send的数据为一个消息，需要明白的是当对方send一条信息的时候，无论底层怎样分段分片，TCP协议层会把构成整条消息的数据段排序完成后才呈现在内核缓冲区。 </p><blockquote><p>  <strong>所谓粘包问题主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的。 </strong></p></blockquote><p>此外，发送方引起的粘包是由TCP协议本身造成的。</p><ol><li>TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一个TCP段。</li><li>若连续几次需要send的数据都很少，通常TCP会根据优化算法把这些数据合成一个TCP段后一次发送出去，这样接收方就收到了粘包数据。</li></ol><blockquote><ol><li>TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</li><li>UDP（user datagram protocol，用户数据报协议）是无连接的，面向消息的，提供高效率服务。不会使用块的合并优化算法，, 由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。 <strong>即面向消息的通信是有消息保护边界的。</strong></li><li><strong>TCP是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机制，防止程序卡住，而UDP是基于数据报的，即便是你输入的是空内容（直接回车），那也不是空消息，UDP协议会帮你封装上消息头。</strong></li></ol></blockquote><p>UDP的recvfrom是阻塞的，一个recvfrom(x)必须对唯一一个sendinto(y),收完了x个字节的数据就算完成,若是y&gt;x数据就丢失，这意味着UDP根本不会粘包，但是会丢数据，不可靠 </p><p>TCP的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack时才会清除缓冲区内容。数据是可靠的，但是会粘包。 </p><h2 id="2-发生粘包的两种情况"><a href="#2-发生粘包的两种情况" class="headerlink" title="2.发生粘包的两种情况"></a>2.发生粘包的两种情况</h2><ul><li>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>)</span><br><span class="line">tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcp_socket_server.bind(ip_port)</span><br><span class="line">tcp_socket_server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">conn,addr=tcp_socket_server.accept()</span><br><span class="line"></span><br><span class="line">data1=conn.recv(<span class="number">10</span>)</span><br><span class="line">data2=conn.recv(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----&gt;'</span>,data1.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(<span class="string">'-----&gt;'</span>,data2.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex(ip_port)</span><br><span class="line"></span><br><span class="line">s.send(<span class="string">'hello'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">s.send(<span class="string">'feng'</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><ul><li>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再收的时候还是从缓冲区拿上次遗留的数据，产生粘包） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcp_socket_server.bind(ip_port)</span><br><span class="line">tcp_socket_server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">conn,addr=tcp_socket_server.accept()</span><br><span class="line"></span><br><span class="line">data1=conn.recv(<span class="number">2</span>) <span class="comment">#一次没有收完整</span></span><br><span class="line">data2=conn.recv(<span class="number">10</span>)<span class="comment">#下次收的时候,会先取旧的数据,然后取新的</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----&gt;'</span>,data1.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(<span class="string">'-----&gt;'</span>,data2.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex(ip_port)</span><br><span class="line"></span><br><span class="line">s.send(<span class="string">'hello feng'</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h2 id="3-拆包的发生情况"><a href="#3-拆包的发生情况" class="headerlink" title="3.拆包的发生情况"></a>3.拆包的发生情况</h2><p>当发送端缓冲区的长度大于网卡的MTU时，tcp会将这次发送的数据拆成几个数据包发送出去。 </p><h2 id="4-为何TCP是可靠传输，UDP是不可靠传输"><a href="#4-为何TCP是可靠传输，UDP是不可靠传输" class="headerlink" title="4.为何TCP是可靠传输，UDP是不可靠传输"></a>4.为何TCP是可靠传输，UDP是不可靠传输</h2><blockquote><p>  TCP在数据传输时，发送端先把数据发送到自己的缓存中，然后协议控制将缓存中的数据发往对端，对端返回一个ack=1，发送端则清理缓存中的数据，对端返回ack=0，则重新发送数据，所以TCP是可靠的。</p></blockquote><blockquote><p>  UDP发送数据，对端是不会返回确认信息的，因此不可靠。</p></blockquote><h2 id="5-send-字节流-和recv-1024-及sendall"><a href="#5-send-字节流-和recv-1024-及sendall" class="headerlink" title="5.send(字节流)和recv(1024)及sendall"></a>5.send(字节流)和recv(1024)及sendall</h2><blockquote><p>recv里指定的1024意思是从缓存里一次拿出1024个字节的数据 </p></blockquote><blockquote><p>send的字节流是先放入己端缓存，然后由协议控制将缓存内容发往对端，如果待发送的字节流大小大于缓存剩余空间，那么数据丢失，用sendall就会循环调用send，数据不会丢失 </p></blockquote><h2 id="6-解决粘包的处理方法"><a href="#6-解决粘包的处理方法" class="headerlink" title="6. 解决粘包的处理方法"></a><strong>6. 解决粘包的处理方法</strong></h2><blockquote><p>  为字节流加上自定义固定长度报头，报头中包含字节流长度，然后一次send到对端，对端在接收时，先从缓存中取出定长的报头，然后再取真实数据。</p></blockquote><ul><li>在解决粘包之前，我们先介绍下<strong>struct模块：</strong> 该模块可以把一个类型，如数字，转成固定长度的bytes 。</li></ul><p><img src="https://images2015.cnblogs.com/blog/1036857/201704/1036857-20170422071900493-2119801952.png" alt="struct模块"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json,struct</span><br><span class="line"><span class="comment">#假设通过客户端上传1T:1073741824000的文件a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为避免粘包,必须自定制报头</span></span><br><span class="line">header=&#123;<span class="string">'file_size'</span>:<span class="number">1073741824000</span>,<span class="string">'file_name'</span>:<span class="string">'/a/b/c/d/e/a.txt'</span>,<span class="string">'md5'</span>:<span class="string">'8f6fbf8347faa4924a76856701edb0f3'</span>&#125; <span class="comment">#1T数据,文件路径和md5值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为了该报头能传送,需要序列化并且转为bytes</span></span><br><span class="line">head_bytes=bytes(json.dumps(header),encoding=<span class="string">'utf-8'</span>) <span class="comment">#序列化并转成bytes,用于传输</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为了让客户端知道报头的长度,用struck将报头长度这个数字转成固定长度:4个字节</span></span><br><span class="line">head_len_bytes=struct.pack(<span class="string">'i'</span>,len(head_bytes)) <span class="comment">#这4个字节里只包含了一个数字,该数字是报头的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端开始发送</span></span><br><span class="line">conn.send(head_len_bytes) <span class="comment">#先发报头的长度,4个bytes</span></span><br><span class="line">conn.send(head_bytes) <span class="comment">#再发报头的字节格式</span></span><br><span class="line">conn.sendall(文件内容) <span class="comment">#然后发真实内容的字节格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端开始接收</span></span><br><span class="line">head_len_bytes=s.recv(<span class="number">4</span>) <span class="comment">#先收报头4个bytes,得到报头长度的字节格式</span></span><br><span class="line">x=struct.unpack(<span class="string">'i'</span>,head_len_bytes)[<span class="number">0</span>] <span class="comment">#提取报头的长度</span></span><br><span class="line"></span><br><span class="line">head_bytes=s.recv(x) <span class="comment">#按照报头长度x,收取报头的bytes格式</span></span><br><span class="line">header=json.loads(json.dumps(header)) <span class="comment">#提取报头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后根据报头的内容提取真实的数据,比如</span></span><br><span class="line">real_data_len=s.recv(header[<span class="string">'file_size'</span>])</span><br><span class="line">s.recv(real_data_len)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于struct的详细用法</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">values1 = (<span class="number">1</span>, <span class="string">'abc'</span>.encode(<span class="string">'utf-8'</span>), <span class="number">2.7</span>)</span><br><span class="line">values2 = (<span class="string">'defg'</span>.encode(<span class="string">'utf-8'</span>),<span class="number">101</span>)</span><br><span class="line">s1 = struct.Struct(<span class="string">'I3sf'</span>)</span><br><span class="line">s2 = struct.Struct(<span class="string">'4sI'</span>)</span><br><span class="line"></span><br><span class="line">print(s1.size,s2.size)</span><br><span class="line">prebuffer=ctypes.create_string_buffer(s1.size+s2.size)</span><br><span class="line">print(<span class="string">'Before : '</span>,binascii.hexlify(prebuffer))</span><br><span class="line"><span class="comment"># t=binascii.hexlify('asdfaf'.encode('utf-8'))</span></span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line"></span><br><span class="line">s1.pack_into(prebuffer,<span class="number">0</span>,*values1)</span><br><span class="line">s2.pack_into(prebuffer,s1.size,*values2)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'After pack'</span>,binascii.hexlify(prebuffer))</span><br><span class="line">print(s1.unpack_from(prebuffer,<span class="number">0</span>))</span><br><span class="line">print(s2.unpack_from(prebuffer,s1.size))</span><br><span class="line"></span><br><span class="line">s3=struct.Struct(<span class="string">'ii'</span>)</span><br><span class="line">s3.pack_into(prebuffer,<span class="number">0</span>,<span class="number">123</span>,<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'After pack'</span>,binascii.hexlify(prebuffer))</span><br><span class="line">print(s3.unpack_from(prebuffer,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><ul><li><strong>服务端（自定制报头）</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,struct,json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">phone=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>) <span class="comment">#就是它，在bind前加</span></span><br><span class="line">phone.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>))</span><br><span class="line">phone.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    conn,addr=phone.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        cmd=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'cmd: %s'</span> %cmd)</span><br><span class="line"></span><br><span class="line">        res=subprocess.Popen(cmd.decode(<span class="string">'utf-8'</span>),</span><br><span class="line">                             shell=<span class="keyword">True</span>,</span><br><span class="line">                             stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.PIPE)</span><br><span class="line">        err=res.stderr.read()</span><br><span class="line">        print(err)</span><br><span class="line">        <span class="keyword">if</span> err:</span><br><span class="line">            back_msg=err</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_msg=res.stdout.read()</span><br><span class="line">        conn.send(struct.pack(<span class="string">'i'</span>,len(back_msg))) <span class="comment">#先发back_msg的长度</span></span><br><span class="line">        conn.sendall(back_msg) <span class="comment">#在发真实的内容</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><ul><li><strong>客户端（自定制报头）</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,time,struct</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex((<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    msg=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">'quit'</span>:<span class="keyword">break</span></span><br><span class="line">    s.send(msg.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    l=s.recv(<span class="number">4</span>)</span><br><span class="line">    x=struct.unpack(<span class="string">'i'</span>,l)[<span class="number">0</span>]</span><br><span class="line">    print(type(x),x)</span><br><span class="line">    <span class="comment"># print(struct.unpack('I',l))</span></span><br><span class="line">    r_s=<span class="number">0</span></span><br><span class="line">    data=<span class="string">b''</span></span><br><span class="line">    <span class="keyword">while</span> r_s &lt; x:</span><br><span class="line">        r_d=s.recv(<span class="number">1024</span>)</span><br><span class="line">        data+=r_d</span><br><span class="line">        r_s+=len(r_d)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data.decode('utf-8'))</span></span><br><span class="line">    print(data.decode(<span class="string">'gbk'</span>)) <span class="comment">#windows默认gbk编码</span></span><br></pre></td></tr></table></figure><ul><li>具体思路步骤</li></ul><p>我们可以把报头做成字典，字典里包含将要发送的真实数据的详细信息，然后json序列化，然后用struck将序列化后的数据长度打包成4个字节（4个自己足够用了） </p><blockquote><p>发送时：</p><p>先发报头长度</p><p>再编码报头内容然后发送</p><p>最后发真实内容</p></blockquote><blockquote><p>  接收时：</p><p>  先手报头长度，用struct取出来</p><p>  根据取出的长度收取报头内容，然后解码，反序列化</p><p>  从反序列化的结果中取出待取数据的详细信息，然后去取真实的数据内容</p></blockquote><ul><li>服务端复杂一点的报头</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,struct,json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">phone=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>) <span class="comment"># 就是它，在bind前加</span></span><br><span class="line">phone.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>))</span><br><span class="line">phone.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    conn,addr=phone.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        cmd=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'cmd: %s'</span> %cmd)</span><br><span class="line"></span><br><span class="line">        res=subprocess.Popen(cmd.decode(<span class="string">'utf-8'</span>),</span><br><span class="line">                             shell=<span class="keyword">True</span>,</span><br><span class="line">                             stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.PIPE)</span><br><span class="line">        err=res.stderr.read()</span><br><span class="line">        print(err)</span><br><span class="line">        <span class="keyword">if</span> err:</span><br><span class="line">            back_msg=err</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            back_msg=res.stdout.read()</span><br><span class="line"></span><br><span class="line">        headers=&#123;<span class="string">'data_size'</span>:len(back_msg)&#125;</span><br><span class="line">        head_json=json.dumps(headers)</span><br><span class="line">        head_json_bytes=bytes(head_json,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        conn.send(struct.pack(<span class="string">'i'</span>,len(head_json_bytes))) <span class="comment"># 先发报头的长度</span></span><br><span class="line">        conn.send(head_json_bytes)                       <span class="comment"># 再发报头</span></span><br><span class="line">        conn.sendall(back_msg)                           <span class="comment"># 在发真实的内容</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct,json</span><br><span class="line">ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>)</span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    cmd=input(<span class="string">'&gt;&gt;: '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">continue</span></span><br><span class="line">    client.send(bytes(cmd,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    head=client.recv(<span class="number">4</span>)</span><br><span class="line">    head_json_len=struct.unpack(<span class="string">'i'</span>,head)[<span class="number">0</span>]</span><br><span class="line">    head_json=json.loads(client.recv(head_json_len).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    data_len=head_json[<span class="string">'data_size'</span>]</span><br><span class="line"></span><br><span class="line">    recv_size=<span class="number">0</span></span><br><span class="line">    recv_data=<span class="string">b''</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; data_len:</span><br><span class="line">        recv_data+=client.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size+=len(recv_data)</span><br><span class="line"></span><br><span class="line">    print(recv_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># print(recv_data.decode('gbk')) #windows默认gbk编码</span></span><br></pre></td></tr></table></figure><h1 id="八、认证客户端的链接合法性"><a href="#八、认证客户端的链接合法性" class="headerlink" title="八、认证客户端的链接合法性"></a>八、认证客户端的链接合法性</h1><blockquote><p>  若想要在分布式系统中实现一个简单的客户端链接认证功能，又不像SSL那么复杂，那么利用hmac+加盐的方式来实现 </p></blockquote><ul><li>服务端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hmac,os</span><br><span class="line"></span><br><span class="line">secret_key=<span class="string">b'linhaifeng bang bang bang'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_auth</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    认证客户端链接</span></span><br><span class="line"><span class="string">    :param conn:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'开始验证新链接的合法性'</span>)</span><br><span class="line">    msg=os.urandom(<span class="number">32</span>)</span><br><span class="line">    conn.sendall(msg)</span><br><span class="line">    h=hmac.new(secret_key,msg)</span><br><span class="line">    digest=h.digest()</span><br><span class="line">    respone=conn.recv(len(digest))</span><br><span class="line">    <span class="keyword">return</span> hmac.compare_digest(respone,digest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_handler</span><span class="params">(conn,bufsize=<span class="number">1024</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> conn_auth(conn):</span><br><span class="line">        print(<span class="string">'该链接不合法,关闭'</span>)</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">'链接合法,开始通信'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data=conn.recv(bufsize)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">break</span></span><br><span class="line">        conn.sendall(data.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_handler</span><span class="params">(ip_port,bufsize,backlog=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    只处理链接</span></span><br><span class="line"><span class="string">    :param ip_port:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_server.bind(ip_port)</span><br><span class="line">    tcp_socket_server.listen(backlog)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        conn,addr=tcp_socket_server.accept()</span><br><span class="line">        print(<span class="string">'新连接[%s:%s]'</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line">        data_handler(conn,bufsize)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    server_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure><ul><li>合法客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hmac,os</span><br><span class="line">secret_key=<span class="string">b'linhaifeng bang bang bang'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_auth</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    验证客户端到服务器的链接</span></span><br><span class="line"><span class="string">    :param conn:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    msg=conn.recv(<span class="number">32</span>)</span><br><span class="line">    h=hmac.new(secret_key,msg)</span><br><span class="line">    digest=h.digest()</span><br><span class="line">    conn.sendall(digest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(ip_port,bufsize=<span class="number">1024</span>)</span>:</span></span><br><span class="line">    tcp_socket_client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_client.connect(ip_port)</span><br><span class="line"></span><br><span class="line">    conn_auth(tcp_socket_client)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'quit'</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tcp_socket_client.sendall(data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        respone=tcp_socket_client.recv(bufsize)</span><br><span class="line">        print(respone.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    tcp_socket_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    client_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure><ul><li>不知道加密方式的非法客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(ip_port,bufsize=<span class="number">1024</span>)</span>:</span></span><br><span class="line">    tcp_socket_client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_client.connect(ip_port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'quit'</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tcp_socket_client.sendall(data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        respone=tcp_socket_client.recv(bufsize)</span><br><span class="line">        print(respone.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    tcp_socket_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    client_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure><ul><li>不知道secret_key 的非法客户端</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hmac,os</span><br><span class="line">secret_key=<span class="string">b'linhaifeng bang bang bang1111'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_auth</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    验证客户端到服务器的链接</span></span><br><span class="line"><span class="string">    :param conn:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    msg=conn.recv(<span class="number">32</span>)</span><br><span class="line">    h=hmac.new(secret_key,msg)</span><br><span class="line">    digest=h.digest()</span><br><span class="line">    conn.sendall(digest)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(ip_port,bufsize=<span class="number">1024</span>)</span>:</span></span><br><span class="line">    tcp_socket_client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    tcp_socket_client.connect(ip_port)</span><br><span class="line"></span><br><span class="line">    conn_auth(tcp_socket_client)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data=input(<span class="string">'&gt;&gt;: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">'quit'</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tcp_socket_client.sendall(data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        respone=tcp_socket_client.recv(bufsize)</span><br><span class="line">        print(respone.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    tcp_socket_client.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip_port=(<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>)</span><br><span class="line">    bufsize=<span class="number">1024</span></span><br><span class="line">    client_handler(ip_port,bufsize)</span><br></pre></td></tr></table></figure><h1 id="九、socketserver-实现并发"><a href="#九、socketserver-实现并发" class="headerlink" title="九、socketserver 实现并发"></a>九、socketserver 实现并发</h1><blockquote><p>  基于TCP的套接字，关键就是两个循环，一个链接循环，一个通信循环 。</p><p>  socketserver模块中分两大类：server类（解决链接问题）和request类（解决通信问题） </p></blockquote><ul><li>server类</li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544045255035&amp;di=c034f1bde8078c4d717828e8bbc803e6&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D1106475537%2C2928948223%26fm%3D214%26gp%3D0.jpg" alt="server类"></p><ul><li>request类</li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544045876026&amp;di=0308f2776091a1cb7786acf6c206a5c8&amp;imgtype=0&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2F20180111004914214347.png" alt="request类"></p><ul><li>继承关系</li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544045430040&amp;di=ff36cdaf80ba0b95c1989bb4b8bec65b&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201804%2F20180419011716055263.png" alt="继承关系"></p><p>以下述代码为例，分析socketserver源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftpserver=socketserver.ThreadingTCPServer((&apos;127.0.0.1&apos;,8080),FtpServer)</span><br><span class="line">ftpserver.serve_forever()</span><br></pre></td></tr></table></figure><p>查找属性的顺序：ThreadingTCPServer-&gt;ThreadingMixIn-&gt;TCPServer-&gt;BaseServer</p><ol><li>实例化得到ftpserver，先找类ThreadingTCPServer的<code>__init__</code>,在TCPServer中找到，进而执行server_bind,server_active</li><li>找ftpserver下的serve_forever,在BaseServer中找到，进而执行self._handle_request_noblock()，该方法同样是在BaseServer中</li><li>执行self._handle_request_noblock()进而执行request, client_address = self.get_request()（就是TCPServer中的self.socket.accept()），然后执行self.process_request(request, client_address)</li><li>在ThreadingMixIn中找到process_request，开启多线程应对并发，进而执行process_request_thread，执行self.finish_request(request, client_address)</li><li>上述四部分完成了链接循环，本部分开始进入处理通讯部分，在BaseServer中找到finish_request,触发我们自己定义的类的实例化，去找<code>__init__</code>方法，而我们自己定义的类没有该方法，则去它的父类也就是BaseRequestHandler中找….</li></ol><p>源码分析总结：</p><p>基于tcp的socketserver我们自己定义的类中的</p><ol><li>self.server即套接字对象</li><li>self.request即一个链接</li><li>self.client_address即客户端地址</li></ol><p>基于udp的socketserver我们自己定义的类中的</p><ol><li>self.request是一个元组（第一个元素是客户端发来的数据，第二部分是服务端的udp套接字对象），如(b’adsf’, &lt;socket.socket fd=200, family=AddressFamily.AF_INET, type=SocketKind.SOCK_DGRAM, proto=0, laddr=(‘127.0.0.1’, 8080)&gt;)</li><li>self.client_address即客户端地址</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WEB服务器之Nginx</title>
      <link href="//Nginx%E9%83%A8%E7%BD%B2/"/>
      <url>//Nginx%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543846943979&amp;di=637072e9dc9da57e53561cf9642c1612&amp;imgtype=0&amp;src=http%3A%2F%2Fp2.so.qhimgs1.com%2Ft0179b2681575b65e42.jpg" alt="Nginx"></p><p>在传统的Web项目中，并发量小，用户使用的少。 当然，为了解决并发，可以使用负载均衡 ，也就是多加几个服务器。Nginx同Apache一样都是一种WEB服务器。 基于REST架构风格，以统一资源描述符(Uniform Resources Identifier)URI或者统一资源定位符(Uniform Resources Locator)URL作为沟通依据，通过HTTP协议提供各种网络服务。所以什么情况下该使用Nginx呢？或者说Nginx带来的好处有哪些？</p><a id="more"></a><h1 id="一、Nginx和Apache"><a href="#一、Nginx和Apache" class="headerlink" title="一、Nginx和Apache"></a>一、Nginx和Apache</h1><h2 id="1-Apache介绍"><a href="#1-Apache介绍" class="headerlink" title="1.Apache介绍"></a>1.Apache介绍</h2><blockquote><p>Apache相对Nginx的发展历程比较漫长，而且是世界第一大服务器。它有着很多有点：稳定、开源、跨平台等。它兴起的年代，互联网产业远比不上现在，所以它被设计为一个重量级的且不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。 所以Apache不可能成为高性能WEB服务器，轻量级高并发服务器Nginx就应运而生了。</p></blockquote><h2 id="2-Nginx介绍"><a href="#2-Nginx介绍" class="headerlink" title="2.Nginx介绍"></a>2.Nginx介绍</h2><blockquote><p>  Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。 Nginx常用做静态内容服务和代理服务器，直面外来请求转发给后面的应用服务 (Django)。如今，更加追求效率的环境中 ，Nginx是处理大并发，反向代理，负载均衡需求的优秀选择 </p></blockquote><blockquote><p>  Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在 不间断服务的情况下进行软件版本的升级。Nginx 安装简单，配置简洁（还能够支持perl语法），Bugs非常少的服务器。</p></blockquote><h1 id="二、Nginx之代理"><a href="#二、Nginx之代理" class="headerlink" title="二、Nginx之代理"></a>二、Nginx之代理</h1><blockquote><p>  代理是介于客户端和服务端的一种服务，某些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击。 提供代理服务的电脑系统或其它类型的网络终端称为<strong>代理服务器</strong>（<strong>Proxy Server</strong>） </p></blockquote><h2 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1.正向代理"></a>1.正向代理</h2><blockquote><p>  正向代理<strong>发生在 <code>client</code>端</strong>，用户能感知到的，并且是<strong>用户主动发起</strong>的代理。 正向代理也是大家最常接触的到的代理模式 。我们不能访问外网，但是可以访问代理服务器，然后代理服务器帮我们从外网中获取数据。但是在使用之前，用户往往需要<code>主动</code>在<code>client</code>端配置代理。 黑客为了隐藏身份，用的就是正向代理。 </p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543851046253&amp;di=05fa906ee419d5b38615af0d869932f6&amp;imgtype=0&amp;src=http%3A%2F%2Fpic002.cnblogs.com%2Fimages%2F2012%2F399666%2F2012041716551420.jpg" alt="正向代理"></p><ul><li>正向代理的用途</li></ul><ol><li>访问无法访问的资源，如<code>https://www.google.com</code> </li><li>可以做缓存，加速访问资源 </li><li>对客户端访问授权，上网进行认证 </li><li>代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息 </li></ol><h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2.反向代理"></a>2.反向代理</h2><blockquote><p>  反向代理<strong>发生在 <code>server端</code></strong>，从用户角度看是不知道发生了代理的。用户访问 <code>服务器A</code>，<code>服务器A</code>就给用户返回了数据。但是<code>服务器A</code>上其实并没有数据，它是偷偷从<code>服务器B</code>上获取数据，然后再返回给用户的。这个过程是在 <code>server</code>端发生的，用户并不知道 。</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543851598019&amp;di=c8fe86d5bbfafa3669dd2d0b086a1852&amp;imgtype=0&amp;src=http%3A%2F%2Fs6.sinaimg.cn%2Fmw690%2F005NDN77gy71HwZczbL15%26690" alt="反向代理"></p><ul><li>反向代理的用途</li></ul><ol><li>负载均衡，通过反向代理服务器来优化网站的负载 </li><li>保证内网的安全，可以使用反向代理提供WAF功能，阻止web攻击 。有很多大型网站，通常将反向代理作为公网访问地址，Web服务器是内网 </li></ol><blockquote><p>  Nginx支持配置反向代理，通过反向代理实现网站的负载均衡。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream www proxy test <span class="number">80</span> &#123;</span><br><span class="line">    server <span class="number">192.168</span><span class="number">.10</span><span class="number">.10</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  www.mysite.com;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://www_proxy_test_80;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Nginx配置"><a href="#3-Nginx配置" class="headerlink" title="3.Nginx配置"></a>3.Nginx配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">worker_processes <span class="number">1</span>;            <span class="comment">#全局有效</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections <span class="number">1024</span>;    <span class="comment">#events部分有效</span></span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include    mime.types;             <span class="comment">#http部分有效</span></span><br><span class="line">    default_type    applicaiotion/octet-stream;</span><br><span class="line">    sendfile    on;</span><br><span class="line">    keepalive_timeout    <span class="number">65</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen    <span class="number">80</span>;</span><br><span class="line">        server_name    localhost;        <span class="comment">#http的server部分有效</span></span><br><span class="line">        location / &#123;                        <span class="comment">#http/server的location部分有效</span></span><br><span class="line">            root    html;</span><br><span class="line">            index    index.html    index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root    html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Nginx、uwsgi、Django"><a href="#三、Nginx、uwsgi、Django" class="headerlink" title="三、Nginx、uwsgi、Django"></a>三、Nginx、uwsgi、Django</h1><h2 id="1-Nginx安装"><a href="#1-Nginx安装" class="headerlink" title="1.Nginx安装"></a>1.Nginx安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nginx  <span class="comment">#安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/nginx start  <span class="comment">#启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/nginx stop  <span class="comment">#关闭</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/nginx restart  <span class="comment">#重启</span></span></span><br></pre></td></tr></table></figure><h2 id="2-安装-uwsgi"><a href="#2-安装-uwsgi" class="headerlink" title="2.安装 uwsgi"></a>2.安装 uwsgi</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install uwsgi   <span class="comment"># 前提是已安装python并设置好环境变量</span></span></span><br></pre></td></tr></table></figure><blockquote><p>  测试uwsgi，创建index.py文件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b"Hello World"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>  通过uwsgi运行该文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uwsgi --http :8001 --wsgi-file index.py</span></span><br></pre></td></tr></table></figure><blockquote><p>  配置Django与uwsgi连接 ,Django项目的位置假设是 /home/mysite/</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uwsgi --http :8001 --<span class="built_in">chdir</span> /home/mysite/ --wsgi-file mysite/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>http</td><td>协议类型和端口号</td></tr><tr><td>process</td><td>开启的进程数量</td></tr><tr><td>workers</td><td>开启的进程数量，等同于processes</td></tr><tr><td>chdir</td><td>指定运行目录  （chdir to specified directory before apps loading）</td></tr><tr><td>wsgi-file</td><td>载入wsgi-file（load .wsgi file）</td></tr><tr><td>stats</td><td>在指定的地址上，开启状态服务（enable the stats server on the specified address）</td></tr><tr><td>threads</td><td>运行线程。由于GIL的存在，这个好像没啥用</td></tr><tr><td>master</td><td>允许主进程存在（enable master process）</td></tr><tr><td>daemonize</td><td>使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上</td></tr><tr><td>pidfile</td><td>指定pid文件的位置，记录主进程的pid号</td></tr><tr><td>vacuum</td><td>当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）</td></tr></tbody></table><h2 id="3-Nginx-uwsgi-Django"><a href="#3-Nginx-uwsgi-Django" class="headerlink" title="3.Nginx + uwsgi + Django"></a>3.Nginx + uwsgi + Django</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">├── manage.py</span><br><span class="line">├── mysite/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── mysite_uwsgi.ini</span><br></pre></td></tr></table></figure><ul><li>1.由于子目录<code>mysite</code>下 <code>wsgi.py</code> 已经存在，只需要再创建<code>mysite_uwsgi.ini</code>配置文件即可，当然，<code>uwsgi</code>支持多种类型的配置文件，如<code>xml</code>，<code>ini</code>等。此处，使用<code>ini</code>类型的配置。  </li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite_uwsgi.ini file</span></span><br><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="comment"># Django-related settings</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定项目执行的端口号</span></span><br><span class="line"><span class="attr">socket</span> = :<span class="number">8000</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># the base directory (full path)</span></span><br><span class="line"><span class="comment"># 指定项目的目录</span></span><br><span class="line"><span class="attr">chdir</span>           = /home/mysite</span><br><span class="line"><span class="comment"># Django s wsgi file</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>          = mysite.wsgi</span><br><span class="line"><span class="comment"># process-related settings</span></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line"><span class="attr">master</span>          = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maximum number of worker processes</span></span><br><span class="line"><span class="attr">processes</span>       = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... with appropriate permissions - may be needed</span></span><br><span class="line"><span class="comment"># chmod-socket    = 664</span></span><br><span class="line"><span class="comment"># clear environment on exit</span></span><br><span class="line"><span class="attr">vacuum</span>          = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>2.切换到<code>mysite</code>项目目录下，通过<code>uwsgi</code>命令读取<code>mysite_uwsgi.ini</code>文件启动项目 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/mysite/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uwsgi --ini mysite_uwsgi.ini</span></span><br></pre></td></tr></table></figure><ul><li>3.修改<code>nginx.conf</code>配置文件。打开<code>/etc/nginx/nginx.conf</code>文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 指定的是nginx代理uwsgi对外的端口号</span></span><br><span class="line">    listen         <span class="number">8099</span>; </span><br><span class="line">    <span class="comment"># 设置的一个网址（例，www.example.com）或者 ip</span></span><br><span class="line">    server_name    <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line">    charset UTF<span class="number">-8</span>;</span><br><span class="line">    access_log      /var/log/nginx/mysite_access.log;</span><br><span class="line">    error_log       /var/log/nginx/mysite_error.log;</span><br><span class="line"></span><br><span class="line">    client_max_body_size <span class="number">75</span>M;</span><br><span class="line"></span><br><span class="line">    location / &#123; </span><br><span class="line">        <span class="comment"># nginx 和 uwsgi 关联</span></span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>;</span><br><span class="line">        uwsgi_read_timeout <span class="number">2</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /static &#123;</span><br><span class="line">        expires <span class="number">30</span>d;</span><br><span class="line">        autoindex on; </span><br><span class="line">        add_header Cache-Control private;</span><br><span class="line">        alias /home/mysite/;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>  上面设置完成之后，重启Nginx服务器，以使Nginx的配置生效 。可以由<code>Nginx</code>来处理静态文件(/static/ 和 /media/ ）。非静态文件请求<code>Nginx</code>会发给 <code>socket 8077</code>，然后让<code>uWSGI</code>来进行处理。 </p></blockquote><h1 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a>四、负载均衡</h1><blockquote><p>服务器的性能达到极限时，可以使用服务器集群来提高网站的整体性能。在该服务器集群中，需要有一台服务器充当调度者的角色，用户发的所有请求都会首先由它接收，调度者再根据每台服务器的负载情况将请求分配给某一台后端服务器去处理。在这个过程中，调度者如何合理分配任务，保证所有后端服务器都将性能充分发挥，从而保持服务器集群的整体性能最优，这就是负载均衡问题。负载均衡实现的方式有哪些呢？</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543856161632&amp;di=13cf940f5a2bfe62fccd36f6985608a0&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D3882834601%2C452123266%26fm%3D214%26gp%3D0.jpg" alt="负载均衡"></p><ul><li>调度策略</li></ul><blockquote><p><strong>随机分配策略:</strong> 当调度服务器收到用户请求后，随机决定使用指定的某台后端服务器，然后将该服务器的IP封装在HTTP响应消息的Location属性中，返回给浏览器即可。 </p></blockquote><blockquote><p>  <strong>轮询策略(RR):</strong>  调度服务器需要维护一个值，用于记录上次分配的后端服务器的IP(需要额外的开销)。那么当新的请求到来时，调度者将请求依次分配给下一台服务器。 假如有多个请求同时到来时，为了避免线程的安全问题，因此需要锁定互斥资源，从而降低了性能。而随机分配策略不需要维护额外的值，也就不存在线程安全问题，因此性能比轮询要高。  </p></blockquote><h2 id="1-HTTP重定向实现负载均衡"><a href="#1-HTTP重定向实现负载均衡" class="headerlink" title="1.HTTP重定向实现负载均衡"></a>1.<code>HTTP</code>重定向实现负载均衡</h2><p>​       当客户端向后端服务器发起请求时，请求首先被集群调度者截获；调度者会根据某种调度策略，选择一台服务器，并将选中的服务器的IP地址封装在HTTP响应消息头部的Location字段中，并将响应消息的状态码设为302，最后将这个响应消息返回给浏览器。</p><p>​        当浏览器收到响应消息后，解析Location字段，并向该URL发起请求，然后指定的服务器处理该用户的请求，最后将结果返回给用户。</p><p>​        在使用HTTP重定向来实现服务器集群负载均衡的过程中，需要一台服务器作为请求调度者。用户的一项操作需要发起两次HTTP请求，一次向调度服务器发送请求，获取后端服务器的IP，第二次向后端服务器发送请求，获取处理结果。 </p><p><strong>优缺点分析</strong></p><blockquote><p>采用HTTP重定向来实现服务器集群的负载均衡实现起来较为容易，逻辑比较简单，但缺点也较为明显。</p></blockquote><blockquote><p>在HTTP重定向方法中，调度服务器只在客户端第一次向网站发起请求的时候起作用。当调度服务器向浏览器返回响应信息后，客户端此后的操作都基于新的URL进行的(也就是后端服务器)，此后浏览器就不会与调度服务器产生关系，进而会产生如下几个问题：</p></blockquote><ul><li>由于不同用户的访问时间、访问页面深度有所不同，从而每个用户对各自的后端服务器所造成的压力也不同。而调度服务器在调度时，无法知道当前用户将会对服务器造成多大的压力，因此这种方式无法实现真正意义上的负载均衡，只不过是把请求次数平均分配给每台服务器罢了。</li><li>若分配给该用户的后端服务器出现故障，并且如果页面被浏览器缓存，那么当用户再次访问网站时，请求都会发给出现故障的服务器，从而导致访问失败。</li></ul><h2 id="2-DNS负载均衡"><a href="#2-DNS负载均衡" class="headerlink" title="2.DNS负载均衡"></a>2.DNS负载均衡</h2><blockquote><p>  网络中数据包是采用<code>IP</code>地址在网络中传播，而为了方便，我们使用域名来访问网站。那么，访问网站之前，首先需要将域名解析成IP地址，该工作就是由<code>DNS</code>完成的，也就是域名服务器。 用户提交的请求不会直接发送给想要访问的网站，而是首先发给域名服务器，它将域名解析成<code>IP</code>地址并返回给用户,用户收到<code>IP</code>之后才会向该<code>IP</code>发起请求。 所以，<code>DNS</code>服务器有一个天然的优势，若一个域名指向了多个<code>IP</code>地址，那么每次进行域名解析时，<code>DNS</code>只要选一个<code>IP</code>返回给用户，就能够实现服务器集群的负载均衡。  </p></blockquote><p><strong>优缺点分析</strong></p><blockquote><p><code>DNS</code>负载均衡的优点就是配置简单。服务器集群的调度工作完全由<code>DNS</code>服务器承担，就可以把精力放在后端服务器上，保证它们的稳定性与吞吐量。完全不用担心<code>DNS</code>服务器的性能，即便是使用了轮询策略，它的吞吐率依然卓越。此外，<code>DNS</code>负载均衡具有较强的扩展性，完全可以为一个域名解析较多的<code>IP</code>，而且不用担心性能问题。</p></blockquote><blockquote><p>由于集群的调度权交给了<code>DNS</code>服务器，没办法随意地控制调度者，无法定制调度策略。<code>DNS</code>服务器也无法了解每台服务器的负载情况，因此无法实现真正意义上的负载均衡。它和<code>HTTP</code>重定向一样，只不过把所有请求平均分配给后端服务器罢了。此外，当我们发现某一台后端服务器发生故障时，即使我们立即将该服务器从域名解析中去除，但由于<code>DNS</code>服务器会有缓存，该<code>IP</code>仍然会在<code>DNS</code>中保留一段时间，那么就会导致一部分用户无法正常访问网站。这是一个致命的问题！好在这个问题可以用动态DNS来解决。 </p></blockquote><blockquote><p>动态DNS能够通过程序动态修改DNS服务器中的域名解析。从而当监控程序发现某台服务器宕了之后，能立即通知DNS将其删掉。 </p></blockquote><h2 id="3-反向代理负载均衡"><a href="#3-反向代理负载均衡" class="headerlink" title="3.反向代理负载均衡"></a>3.反向代理负载均衡</h2><p><strong>优点</strong></p><ol><li><p><strong>隐藏后端服务器：</strong> 与<code>HTTP</code>重定向相比，<strong>反向代理能够隐藏后端服务器</strong>，任何浏览器都不会与后端服务器直接交互，从而能够确保调度者的控制权，提升集群的整体性能。</p></li><li><p><strong>合理分配任务 ：</strong> <code>HTTP</code>重定向和<code>DNS</code>负载均衡都无法实现真正意义上的负载均衡，也就是调度服务器无法根据后端服务器的实际负载情况分配任务。但<strong>反向代理服务器支持手动设定每台后端服务器的权重</strong>。我们可以根据服务器的配置设置不同的权重，权重的不同会导致被调度者选中的概率的不同。  </p></li><li><p><strong>故障转移：</strong> 与<code>DNS</code>负载均衡相比，<strong>反向代理能够更快速地移除故障结点</strong>。当监控程序发现某一后端服务器出现故障时，能够及时通知反向代理服务器，并立即将其删除。 </p></li></ol><p><strong>缺点</strong></p><ol><li><strong>调度者压力过大：</strong> 由于所有的请求都先由反向代理服务器处理，那么当请求量超过调度服务器的最大负载时，调度服务器的吞吐率降低会直接降低集群的整体性能。 </li><li><strong>限制扩展：</strong> 当后端服务器也无法满足巨大的吞吐量时，就需要增加后端服务器的数量，可没办法无限量地增加，因为会受到调度服务器的最大吞吐量的制约。 </li></ol><p><strong>粘滞会话</strong></p><blockquote><p>反向代理服务器会引发一个问题。若某台后端服务器处理了用户的请求，并保存了该用户的<code>session</code>或存储了缓存，那么当该用户再次发送请求时，无法保证该请求仍然由保存了其<code>session</code>或缓存的服务器处理，若由其他服务器处理，先前的<code>session</code>或缓存就找不到了。 </p></blockquote><ul><li>解决方式</li></ul><ol><li>修改反向代理服务器的任务分配策略，以用户<code>IP</code>作为标识较为合适。相同的用户<code>IP</code>会交由同一台后端服务器处理，从而就避免了粘滞会话的问题。 </li><li>在<code>Cookie</code>中标注请求的服务器<code>ID</code>，当再次提交请求时，调度者将该请求分配给<code>Cookie</code>中标注的服务器处理即可。 </li></ol><h2 id="4-负载均衡组件"><a href="#4-负载均衡组件" class="headerlink" title="4.负载均衡组件"></a>4.负载均衡组件</h2><ul><li><strong>1.Apache</strong> </li></ul><blockquote><p>它是Apache软件基金会的一个开放源代码的跨平台的网页服务器，属于老牌的web服务器了，支持基于Ip或者域名的虚拟主机，支持代理服务器，支持安全Socket层(SSL)等等，目前互联网主要使用它做静态资源服务器，也可以做代理服务器转发请求(如：图片链等)，结合tomcat等servlet容器处理jsp。 </p></blockquote><ul><li><strong>2.Nginx</strong> </li></ul><blockquote><p>俄罗斯人开发的一个高性能的 HTTP和反向代理服务器。由于Nginx 超越 Apache 的高性能和稳定性，使得国内使用 Nginx 作为 Web 服务器的网站也越来越多，其中包括新浪博客、新浪播客、网易新闻、腾讯网、搜狐博客等门户网站频道等，在3w以上的高并发环境下，ngnix处理能力相当于apache的10倍。 </p></blockquote><ul><li><strong>3.Keepalived</strong></li></ul><blockquote><p>这里说的keepalived不是apache或者tomcat等某个组件上的属性字段，它也是一个组件，可以实现web服务器的高可用(HA high availably)。它可以检测web服务器的工作状态，如果该服务器出现故障被检测到，将其剔除服务器群中，直至正常工作后，keepalive会自动检测到并加入到服务器群里面。实现主备服务器发生故障时ip瞬时无缝交接。它是LVS集群节点健康检测的一个用户空间守护进程，也是LVS的引导故障转移模块（director failover）。Keepalived守护进程可以检查LVS池的状态。如果LVS服务器池当中的某一个服务器宕机了。keepalived会通过一 个setsockopt呼叫通知内核将这个节点从LVS拓扑图中移除。 </p></blockquote><ul><li><strong>4.memcached</strong> </li></ul><blockquote><p>它是一个高性能分布式内存对象缓存系统。当初是Danga Interactive为了LiveJournal快速发展开发的系统，用于对业务查询数据缓存，减轻数据库的负载。其守护进程(daemon)是用C写的，但是客户端支持几乎所有语言(客户端基本上有3种版本[memcache client for Java;spymemcached;xMecache])，服务端和客户端通过简单的协议通信；在memcached里面缓存的数据必须序列化。 </p></blockquote><ul><li><strong>5.lvs</strong> </li></ul><blockquote><p>Linux Virtual Server的简写，意即Linux虚拟服务器，是一个虚拟的服务器集群系统。由毕业于国防科技大学的章文嵩博士于1998年5月创立，可以实现LINUX平台下的简单负载均衡。 了解更多，访问官网：<a href="http://zh.linuxvirtualserver.org/。" target="_blank" rel="noopener">http://zh.linuxvirtualserver.org/。</a> </p></blockquote><ul><li><strong>6.HAProxy</strong> </li></ul><blockquote><p>  HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。HAProxy特别适用于那些负载特大的web站点， 这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上.。</p></blockquote><ul><li><strong>7.terracotta</strong> </li></ul><blockquote><p>一款由美国Terracotta公司开发的著名开源Java集群平台。它在JVM与Java应用之间实现了一个专门处理集群功能的抽象层，允许用户在不改变系统代码的情况下实现java应用的集群。支持数据的持久化、session的复制以及高可用(HA)。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL基础知识</title>
      <link href="//MySQL/"/>
      <url>//MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就<strong>增加了速度并提高了灵活性</strong>。Linux作为操作系统，Apache 或Nginx作为 Web 服务器，MySQL 作为数据库，PHP/Perl/Python作为服务器端脚本解释器。由于这四个软件都是免费或开放源码软件（FLOSS)，因此使用这种方式不用花一分钱（除开人工成本）就可以建立起一个稳定、免费的网站系统，被业界称为“LAMP“或“LNMP”组合。</p><a id="more"></a><h1 id="一、-Mysql简单认识"><a href="#一、-Mysql简单认识" class="headerlink" title="一、 Mysql简单认识"></a>一、 Mysql简单认识</h1><h2 id="1-1-数据（Data）的概念"><a href="#1-1-数据（Data）的概念" class="headerlink" title="1.1 数据（Data）的概念"></a>1.1 数据（Data）的概念</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据是用来描述事物的符号记录,它既可以是数字,也可以是文字、图片、图像、声音等,数据的表现形式多种多样,但它们都可以经过数字化之后存入计算机。</span><br><span class="line"><span class="comment">&lt;!-- eg --&gt;</span></span><br><span class="line">Luffu,male,18,ONE-PIECE</span><br></pre></td></tr></table></figure><h2 id="1-2-数据库（DataBase）的概念"><a href="#1-2-数据库（DataBase）的概念" class="headerlink" title="1.2 数据库（DataBase）的概念"></a>1.2 数据库（DataBase）的概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据库是以某种有组织方式存储的数据集合,即保存有组织的数据的容器(通常是一个文件或者一组文件);可将其想象成一个文件柜,此文件柜是存放数据(不管数据是什么以及如何组织)的物理位置(计算机的存储设备上)。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意概念的混淆--&gt;</span></span><br><span class="line">数据库这个属于并不是人们通常使用的数据库软件,数据库软件应称为DBMS(数据库管理系统)。</span><br></pre></td></tr></table></figure><h2 id="1-3-表（table）"><a href="#1-3-表（table）" class="headerlink" title="1.3 表（table）"></a>1.3 表（table）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">某种特定类型数据的结构化清单。</span><br><span class="line"><span class="comment">&lt;!-- 理解 --&gt;</span></span><br><span class="line">存储在表中的数据是一种类型的数据或者一个清单</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表名的唯一性 --&gt;</span></span><br><span class="line">表明一般是用来标识自己的,其唯一性取决于多方面,可以是数据库名和表明的结合;虽然在同一个数据库中不能命名两个同样的表明,但是在不同的数据库中却可以使用相同的表明。</span><br></pre></td></tr></table></figure><h2 id="1-4-记录"><a href="#1-4-记录" class="headerlink" title="1.4 记录"></a>1.4 记录</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 列 --&gt;</span></span><br><span class="line">表中的一个字段,所有的表都是由一个或者多个列组成的,每个列都应该有相应的数据类型(datatype)。</span><br><span class="line"><span class="comment">&lt;!-- 分解数据 --&gt;</span></span><br><span class="line">可以将多个不同的数据分解成不同的列,这样更易于区分,也有利于对数据的筛选和处理</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 行 --&gt;</span></span><br><span class="line">表中的一条记录,经常有人将行(row)称作数据库记录(record),通常来说,这俩术语是可以通用的;但从计数上来说,行才是其正确的术语。</span><br><span class="line"><span class="comment">&lt;!-- 数据存储 --&gt;</span></span><br><span class="line">表中的数据都是按行存储的,所保存的每个记录存储在自己的行内。</span><br></pre></td></tr></table></figure><h2 id="1-5-主键（primary-key）"><a href="#1-5-主键（primary-key）" class="headerlink" title="1.5 主键（primary key）"></a>1.5 主键（primary key）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一列(或一组列),其值能够唯一的区分表中的每个行;每一行都应该有可以唯一标识自己的一列(或一组列),唯一标识表中每行的这个列(或这组列)称为主键</span><br><span class="line"><span class="comment">&lt;!-- 主键规则 --&gt;</span></span><br><span class="line">a.任意两行都不具有相同的主键值;</span><br><span class="line">b.每个行都必须具有一个主键值(主键列不允许有 NULL 值)。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 选择主键的好习惯 --&gt;</span></span><br><span class="line">a.不更新主键列中的值;</span><br><span class="line">b.不重用主键列的值;</span><br><span class="line">c.不在逐渐列中使用可能会更改的值</span><br></pre></td></tr></table></figure><h2 id="1-6-数据库服务器、数据库管理系统、数据库、表与记录的关系-重点在于理解"><a href="#1-6-数据库服务器、数据库管理系统、数据库、表与记录的关系-重点在于理解" class="headerlink" title="1.6 数据库服务器、数据库管理系统、数据库、表与记录的关系(重点在于理解)"></a>1.6 数据库服务器、数据库管理系统、数据库、表与记录的关系(重点在于理解)</h2><ul><li>数据库服务器：计算机(对内存要求较高)</li><li>数据库管理系统：如MySQL、Oracle、SQLite、Access、MS SQL Server  (一个软件)</li><li>数据库：product（即文件夹）</li><li>表：product_list（文件夹当中的文件）</li><li>记录：1 《MySQL必知必会》978-7-115-19112-0  39  （由多个字段组成的信息,即文件中的一行内容）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 总结 --&gt;</span></span><br><span class="line">数据库服务器：运行数据库管理软件</span><br><span class="line">数据库管理系统：管理数据库的软件</span><br><span class="line">数据库：即文件夹,用来组织文件/表</span><br><span class="line">表：即文件,用来存放多行内容/多条记录</span><br></pre></td></tr></table></figure><h1 id="2-SQL的概念"><a href="#2-SQL的概念" class="headerlink" title="2 SQL的概念"></a>2 SQL的概念</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Structured Query Language --&gt;</span></span><br><span class="line">SQL是结构化的查询语言,是一种专门用来与数据库通信的语言。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SQL优点 --&gt;</span></span><br><span class="line">a.不是某个特定供应商专有语言,几乎所有的数据库都适用;</span><br><span class="line">b.由描述性很强的英语单词组成,简单易学;</span><br><span class="line">c.看上去简单,实际上是一种强有力的语言,灵活使用,可进行非常复杂和高级的数据库操作。</span><br></pre></td></tr></table></figure><h1 id="二、-Mysql基础操作"><a href="#二、-Mysql基础操作" class="headerlink" title="二、 Mysql基础操作"></a>二、 Mysql基础操作</h1><h2 id="1-连接MySQL"><a href="#1-连接MySQL" class="headerlink" title="1 连接MySQL"></a>1 连接MySQL</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要信息--&gt;</span></span><br><span class="line">a.主机名（计算机名）,若连接的是本地 MySQL 服务器,为 localhost;</span><br><span class="line">b.端口（如果使用默认端口3306之外的端口）;</span><br><span class="line">c.合法的用户名</span><br><span class="line">d.用户口令（非必须）</span><br></pre></td></tr></table></figure><h2 id="2-选择数据库"><a href="#2-选择数据库" class="headerlink" title="2 选择数据库"></a>2 选择数据库</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--use关键字--&gt;</span></span><br><span class="line">use 库名;</span><br><span class="line"><span class="comment">&lt;!--注意--&gt;</span></span><br><span class="line">一定要加英文状态下的分号,否则进不去,因为在 MySQL 中是用分号来表示结束的</span><br></pre></td></tr></table></figure><h2 id="3-常用数据库和表的SQL-语句"><a href="#3-常用数据库和表的SQL-语句" class="headerlink" title="3 常用数据库和表的SQL 语句"></a>3 常用数据库和表的SQL 语句</h2><table><thead><tr><th style="text-align:center">SQL语句</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">showdatabases;</td><td style="text-align:center">显示数据库名称</td></tr><tr><td style="text-align:center">show create database 库名;</td><td style="text-align:center">显示特定数据库的结构以及基本信息</td></tr><tr><td style="text-align:center">show tables;</td><td style="text-align:center">获得数据库中的所有表的列表</td></tr><tr><td style="text-align:center">show create table 表名;</td><td style="text-align:center">显示特定表的结构以及基本信息</td></tr><tr><td style="text-align:center">describe 表名(简写成desc 表名);</td><td style="text-align:center">对每个字段返回一行,行中包括字段名、数据类型、是否允许NULL等信息</td></tr><tr><td style="text-align:center">show columns from 表名;</td><td style="text-align:center">desc 表名的另一种写法</td></tr><tr><td style="text-align:center">———————————————-</td><td style="text-align:center">—————————————————————————————————–</td></tr><tr><td style="text-align:center">show status;</td><td style="text-align:center">显示广泛的服务器状态信息</td></tr><tr><td style="text-align:center">show grant;</td><td style="text-align:center">显示授予用户的安全权限</td></tr><tr><td style="text-align:center">show error;</td><td style="text-align:center">显示服务器错误</td></tr><tr><td style="text-align:center">show warnings;</td><td style="text-align:center">显示服务器警告</td></tr></tbody></table><h1 id="三、-检索数据"><a href="#三、-检索数据" class="headerlink" title="三、 检索数据"></a>三、 检索数据</h1><h2 id="1-select语句"><a href="#1-select语句" class="headerlink" title="1 select语句"></a>1 select语句</h2><table><thead><tr><th>select语句</th><th>解释</th></tr></thead><tbody><tr><td>select * from 表名;</td><td>检索所有的列</td></tr><tr><td>select column from 表名;</td><td>从表中检索出单个列</td></tr><tr><td>select column1,column2 from 表名;</td><td>从表中检索出多个列</td></tr><tr><td>——————————————————————–</td><td>——————————————————————-</td></tr><tr><td>select distinct row from 表名;</td><td>从表中检索出不同的行</td></tr><tr><td>select * from 表名 limit 5;</td><td>检索单个列,且只从表开始部分检索出5条数据</td></tr><tr><td>select * from 表名 limit 5,5;</td><td>表示从表中第五行开始检索出5行的记录</td></tr><tr><td>select * from 表名 limit 5 offset 3;</td><td>表示从第3行开始去3条记录</td></tr><tr><td>select 表名.column from 表名;</td><td>从指定的表名中检索出指定的列数据</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意--&gt;</span></span><br><span class="line">a.SQL 语句不区分大小写,但是对于 SQL 关键字使用大写,对所有列和表名使用小写,可以是代码易于阅读。</span><br><span class="line">b.选择多个列时,注意在列名之间加上逗号,但最后一个列名不加逗号。</span><br><span class="line">c.通配符 * 不要随意使用,严重降低检索效率。</span><br><span class="line">d.行0检索出来的是第一行而不是行1,所以 limit 1,将检索出第二行而不是第一行,若行数不够则只能返回能得到的行数。</span><br></pre></td></tr></table></figure><h2 id="2-排序检索数据"><a href="#2-排序检索数据" class="headerlink" title="2 排序检索数据"></a>2 排序检索数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--子句的概念--&gt;</span></span><br><span class="line">SQL语句是由子句构成的,通常由关键字和所提供的数据组成的,有些子句是必须的,有些子句是可选的。</span><br><span class="line"><span class="comment">&lt;!--排序的子句--&gt;</span></span><br><span class="line">order by:只能位于 from 子句之后,但是在limit之前。</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">SQL语句</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">select pro_name from products order by pro_name;</td><td style="text-align:center">从表products中选取pro_name这一列并按照pro_name排序</td></tr><tr><td style="text-align:center">select pro_id,pro_name,pro_price from products order by pro_price,pro_name;</td><td style="text-align:center">从表中选择数据并按照价格姓名排序,若在价格相同的情况下,继续使用姓名排序。</td></tr><tr><td style="text-align:center">select pro_price from products order by pro_price desc;</td><td style="text-align:center">从表中检索出数据并按照价格降序进行排序</td></tr><tr><td style="text-align:center">select pro_price from products order by pro_price asc;</td><td style="text-align:center">从表中检索出数据并按照价格升序进行排序,一般默认情况就是升序。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多个列上进行降序排列--&gt;</span></span><br><span class="line">desc只直接作用于其前面的列,若想在多个列上进行降序排序,必须对每个列指定desc关键字。</span><br></pre></td></tr></table></figure><h2 id="3-过滤数据"><a href="#3-过滤数据" class="headerlink" title="3 过滤数据"></a>3 过滤数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- where --&gt;</span></span><br><span class="line">只返回指定条件的记录</span><br><span class="line"><span class="comment">&lt;!-- between ... and ... --&gt;</span></span><br><span class="line">只返回范围内的开始值和结束值(不包括开头和结尾)</span><br><span class="line"><span class="comment">&lt;!-- 空值 --&gt;</span></span><br><span class="line">NULL:无值,它与字段中包含0,空字符串、或仅仅包含空格不同。</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">SQL语句</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">select * from products where id=2;</td><td style="text-align:center">从表中检索出id=2的记录</td></tr><tr><td style="text-align:center">select * from poducts where id between 5 and 10;</td><td style="text-align:center">从表中检索出id在5-10之间的记录</td></tr><tr><td style="text-align:center">select * from products where email is null;</td><td style="text-align:center">从表中检索出email是空值的记录</td></tr></tbody></table><h2 id="4-数据过滤升级"><a href="#4-数据过滤升级" class="headerlink" title="4 数据过滤升级"></a>4 数据过滤升级</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 操作符 --&gt;</span></span><br><span class="line">用来联结或改变where子句中的子句关键字。</span><br><span class="line"><span class="comment">&lt;!-- and --&gt;</span></span><br><span class="line">用在where子句中的关键字,用来只是检索满足所有给定条件的行。</span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line">用在where子句中的关键字,用来表示检索匹配任一给定条件的行。</span><br><span class="line"><span class="comment">&lt;!-- in --&gt;</span></span><br><span class="line">where子句中用来指定要匹配值的清单的关键字,功能与or相当。</span><br><span class="line"><span class="comment">&lt;!-- not --&gt;</span></span><br><span class="line">where子句中用来否定后跟条件的关键字。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- and和or的优先级 --&gt;</span></span><br><span class="line">在and和or同时使用时,and的优先级高于or,若想检索出的结果不被打乱,可以加上括号。</span><br></pre></td></tr></table></figure><table><thead><tr><th>SQL语句</th><th>解释</th></tr></thead><tbody><tr><td>select * from products where id=2 and price=123;</td><td>检索出同时是id=2和price=123的记录</td></tr><tr><td>select * from products where id=2 or price=123;</td><td>检索出id=2或者price=123的记录</td></tr><tr><td>select pro_name from products where id in (1,2,3,4,5);</td><td>检索出id在1-5范围内的pro_name</td></tr><tr><td>select pro_name from products where id not in (1,2,3,4,5);</td><td>检索出id不在1-5范围内的pro_name</td></tr></tbody></table><h2 id="5-用通配符进行过滤"><a href="#5-用通配符进行过滤" class="headerlink" title="5 用通配符进行过滤"></a>5 用通配符进行过滤</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通配符--&gt;</span></span><br><span class="line">用来匹配值的一部分的特殊字符</span><br><span class="line"><span class="comment">&lt;!--搜索模式--&gt;</span></span><br><span class="line">由字面值、通配符或者两者组合构成的搜索条件</span><br><span class="line"><span class="comment">&lt;!--注意--&gt;</span></span><br><span class="line">通配符的位置会影响到结果,使用时应注意通配符的位置</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">通配符</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">like</td><td style="text-align:center">严格意义上like是谓词,而不是操作符</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">可以匹配多个任意字符,根据位置不同而不同</td></tr><tr><td style="text-align:center">_</td><td style="text-align:center">可以匹配单个任意字符</td></tr></tbody></table><h2 id="6-正则"><a href="#6-正则" class="headerlink" title="6 正则"></a>6 正则</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 写法 --&gt;</span></span><br><span class="line">select sth from table where sth REGEXP '正则表达式' order by sth;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- LIKE与REGEXP的区别 --&gt;</span></span><br><span class="line">LIKE匹配整个列,若匹配的文本在列中,LIKE不会找到它,所以就不会有结果返回;REGEXP在列之内进行匹配,若被匹配的文本在列值中出现,REGEXP将会找到并返回这个文本。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- '1|2 3'和'[12] 3'的区别 --&gt;</span></span><br><span class="line">'1|2 3'  表示的是匹配 '1' 或者 '2 3';</span><br><span class="line">'[12] 3' 表示的是匹配 '1 3' 或者 '2 3'</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MySQL中的转义符与其他正则表达式中的转义符 --&gt;</span></span><br><span class="line">MySQL中需要使用两个 \\ 来表示转义符,如 \\- 表示 - , \\. 表示 . ;</span><br><span class="line">其他正则表示是用 \ 来表示转义符。</span><br></pre></td></tr></table></figure><h1 id="四、-字段"><a href="#四、-字段" class="headerlink" title="四、 字段"></a>四、 字段</h1><h2 id="1-字段"><a href="#1-字段" class="headerlink" title="1 字段"></a>1 字段</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字段 --&gt;</span></span><br><span class="line">与列的意思基本上相同,不过数据库列一般称为列,而术语字段通常用在计算字段连接上。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 拼接 --&gt;</span></span><br><span class="line">将值联结到一起构成单个值。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MySQL的不同之处 --&gt;</span></span><br><span class="line">多数的DBMS使用 + 或 || 实现字符串拼接,而MySQL是使用Concat()函数来实现。当将SQL语句转成MySQL时需要注意。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Trim()函数 --&gt;</span></span><br><span class="line">去掉两边的空格</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用别名 --&gt;</span></span><br><span class="line">在实际的表列明包含不符合规定的字符时重新命名它。</span><br></pre></td></tr></table></figure><h1 id="五、-聚合函数"><a href="#五、-聚合函数" class="headerlink" title="五、 聚合函数"></a>五、 聚合函数</h1><h2 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1 聚合函数"></a>1 聚合函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 聚合函数 --&gt;</span></span><br><span class="line">运行在行组上,计算和返回单个值的函数。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 列值为NULL的行 --&gt;</span></span><br><span class="line">函数将忽略列值为NULL的行</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">avg()</td><td style="text-align:center">返回某列的平均值,若需要多个列的平均值,需要多个avg()函数</td></tr><tr><td style="text-align:center">count()</td><td style="text-align:center">返回某列的行数</td></tr><tr><td style="text-align:center">max()</td><td style="text-align:center">返回某列的最大值</td></tr><tr><td style="text-align:center">min()</td><td style="text-align:center">返回某列的最小值</td></tr><tr><td style="text-align:center">sum()</td><td style="text-align:center">返回某列值之和</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 聚集不同的值 DISTINCT --&gt;</span></span><br><span class="line">a.指定列名,则distinct只能用于count()。distinct不能用于count(*) ,因此不允许使用count(distinct),否则产生错误。</span><br><span class="line">b.将distinct用于max()和min()从技术上可用,但是没有实际价值。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合聚合函数 --&gt;</span></span><br><span class="line">可以同时使用多个聚合函数。</span><br></pre></td></tr></table></figure><h1 id="六、-数据分组"><a href="#六、-数据分组" class="headerlink" title="六、 数据分组"></a>六、 数据分组</h1><h2 id="1-创建分组"><a href="#1-创建分组" class="headerlink" title="1 创建分组"></a>1 创建分组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- group by的规定 --&gt;</span></span><br><span class="line">a.group by子句可以包含任意数目的列,可以对分组进行嵌套,为数据分组提供更细致的控制。</span><br><span class="line">b.若在group by子句中潜逃了分组,数据将在最后规定的分组上进行汇总。</span><br><span class="line">c.group by子句中的每个列都必须是检索列或者有效的表达式(不能是聚合函数)。</span><br></pre></td></tr></table></figure><h2 id="2-过滤分组"><a href="#2-过滤分组" class="headerlink" title="2 过滤分组"></a>2 过滤分组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- having与where的区别 --&gt;</span></span><br><span class="line">where:在数据分组前进行过滤,过滤的是行;</span><br><span class="line">having:在数据分组之后进行过滤,过滤的是分组。</span><br></pre></td></tr></table></figure><h2 id="3-分组和排序"><a href="#3-分组和排序" class="headerlink" title="3 分组和排序"></a>3 分组和排序</h2><table><thead><tr><th style="text-align:center">order by</th><th style="text-align:center">group by</th></tr></thead><tbody><tr><td style="text-align:center">排序产生的输出</td><td style="text-align:center">分组行,输出的可能不是分组的顺序</td></tr><tr><td style="text-align:center">任意列都可使用</td><td style="text-align:center">只可使用选择列或表达式列,而且必须使用每个选择列表达式。</td></tr><tr><td style="text-align:center">不一定需要</td><td style="text-align:center">若与聚合函数配合使用,则必须使用</td></tr></tbody></table><h1 id="七、-关键词执行顺序汇总"><a href="#七、-关键词执行顺序汇总" class="headerlink" title="七、 关键词执行顺序汇总"></a>七、 关键词执行顺序汇总</h1><table><thead><tr><th style="text-align:center">子句</th><th style="text-align:center">说明</th><th style="text-align:center">是否必要</th></tr></thead><tbody><tr><td style="text-align:center">select</td><td style="text-align:center">返回的列或者表达式</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">distinct</td><td style="text-align:center">去除重复的值</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">from</td><td style="text-align:center">从中检索数据的表</td><td style="text-align:center">仅在从表中选择数据是使用</td></tr><tr><td style="text-align:center">where</td><td style="text-align:center">行级过滤</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">group by</td><td style="text-align:center">分组的说明</td><td style="text-align:center">仅在按组计算聚合时使用</td></tr><tr><td style="text-align:center">having</td><td style="text-align:center">组级过滤</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">order by</td><td style="text-align:center">输出的顺序排序</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">limit</td><td style="text-align:center">需要检索出的具体行数</td><td style="text-align:center">×</td></tr></tbody></table><h1 id="八、-子查询和组合查询"><a href="#八、-子查询和组合查询" class="headerlink" title="八、 子查询和组合查询"></a>八、 子查询和组合查询</h1><h2 id="1-子查询"><a href="#1-子查询" class="headerlink" title="1 子查询"></a>1 子查询</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子查询 --&gt;</span></span><br><span class="line">将一条select语句的执行结果用于另一条select语句的whereas子句</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">使用子查询时,列必须匹配。在where子句中使用子查询,应保证select语句具有与where子句中相同数目的列。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相关子查询 --&gt;</span></span><br><span class="line">涉及外部查询的子查询;如 where table1.id = table2.new_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 操作符 --&gt;</span></span><br><span class="line">in   =    !=</span><br><span class="line">select c_name where c_id in (select c_id from table1 where c_id != 0) from table2 roder by c_name;</span><br></pre></td></tr></table></figure><h2 id="2-组合查询"><a href="#2-组合查询" class="headerlink" title="2 组合查询"></a>2 组合查询</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合查询的使用 --&gt;</span></span><br><span class="line">a.在单个查询中从不同的表返回类似结构的数据;</span><br><span class="line">b.对单个表执行多个查询,按单个查询返回数据。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- union规则 --&gt;</span></span><br><span class="line">a.union必须由两条或者两条以上的select语句组成,语句间用关键字union分隔。</span><br><span class="line">b.union中的每个查询必须包含相同列、表达式或聚合函数。</span><br><span class="line">c.类数据类型必须兼容：类型不必完全相同,但必须是DBMS可以隐含地转换的类型。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用union --&gt;</span></span><br><span class="line">给出每条select语句,在语句之间放上关键字union</span><br><span class="line">select c_name from table1 where c_id&gt;0;</span><br><span class="line">select p_name from table2 where p_id between 5 and 10;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select c_name from table1 where c_id&gt;0</span><br><span class="line">union</span><br><span class="line">select p_name from table2 where p_id between 5 and 10;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 包含或取消重复的行 --&gt;</span></span><br><span class="line">可以使用union all来显示出所有的行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对组合查询结果排序 --&gt;</span></span><br><span class="line">使用union查询时,只能使用一条order by子句,且必须出现在最后一条select语句之后。</span><br></pre></td></tr></table></figure><h1 id="九、-联结表和创建高级联结"><a href="#九、-联结表和创建高级联结" class="headerlink" title="九、 联结表和创建高级联结"></a>九、 联结表和创建高级联结</h1><h2 id="1-联结"><a href="#1-联结" class="headerlink" title="1 联结"></a>1 联结</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外键 --&gt;</span></span><br><span class="line">外键为某个表中的一列,包含另外一个表的主键值,定义了两个表之间的关系。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可伸缩性 --&gt;</span></span><br><span class="line">能够适应不断增加的工作量而不失败,设计良好的数据库或应用程序称之为可伸缩性好。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建联结 --&gt;</span></span><br><span class="line">select c_name,c_addr,p_name from customer,product where customer.c_id = products.p_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内部联结 --&gt;</span></span><br><span class="line">select c_name,p_name,p_price from customer inner join products on customer.c_id = products.p_id;</span><br></pre></td></tr></table></figure><h2 id="2-高级联结"><a href="#2-高级联结" class="headerlink" title="2 高级联结"></a>2 高级联结</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自联结 --&gt;</span></span><br><span class="line">自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。</span><br><span class="line">子查询解决方案:select p_name from products where c_id in (select c_id from customer where p_id=10);</span><br><span class="line">联结查询:select p.p_name from customer as c,products as p where p.p_id = c.c_id and c.c_id=10;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自然联结 --&gt;</span></span><br><span class="line">无论何时对表进行联结,应至少有一个列出现在不知一个表中(被联结的列)。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 外部联结 --&gt;</span></span><br><span class="line">将一个表中的行与另外一个表中的行相关联,包含没有关联行的那些行。</span><br><span class="line">语法与内部联结相似,left outer join 或者 right outer join</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带有聚合函数的联结 --&gt;</span></span><br><span class="line">select c.c_name,c.c_id count(o.order_num) as num_ord from customer as c inner join orders as o on c.c_id = o.c_id;</span><br></pre></td></tr></table></figure><h1 id="十、-数据操作"><a href="#十、-数据操作" class="headerlink" title="十、 数据操作"></a>十、 数据操作</h1><h2 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1 插入数据"></a>1 插入数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插入数据 --&gt;</span></span><br><span class="line">a.insert into tablename values (value1,value2,...)</span><br><span class="line">b.insert into tablename(字段1,字段2,...) values (value1,value2,...)</span><br><span class="line">a 的语法虽然简单但是不安全,应尽量避免使用。b 的语法复杂但是更安全,且不用根据表结构来插入数据了。</span><br></pre></td></tr></table></figure><h2 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2 更新数据"></a>2 更新数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新数据 --&gt;</span></span><br><span class="line">update tablename set 字段名1 = value1,</span><br><span class="line">[字段名2 = value2,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line">where 字段名 = value;</span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">使用update时应该配合使用where语句,若没有where语句,MySQL将会更细心表中的所有数据。</span><br></pre></td></tr></table></figure><h2 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3 删除数据"></a>3 删除数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除数据 --&gt;</span></span><br><span class="line">delete from tablename where 字段名 = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">delete删除的是行</span><br><span class="line">使用delete时应该配合使用where语句,若没有where语句,MySQL将会更细心表中的所有数据。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 快速的删除所有行 --&gt;</span></span><br><span class="line">使用truncate table,实际上是删除原来的表并重新创建一个表,而不是逐行的删除数据。</span><br></pre></td></tr></table></figure><h1 id="十一、-表操作"><a href="#十一、-表操作" class="headerlink" title="十一、 表操作"></a>十一、 表操作</h1><h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1 创建表"></a>1 创建表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建表 --&gt;</span></span><br><span class="line">create table tablename[if not exists](</span><br><span class="line">id int primary_key auto_increment,</span><br><span class="line">name varchar(32) not null,</span><br><span class="line">password varchar(64) nul null default="123",</span><br><span class="line">) ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要知道的引擎 --&gt;</span></span><br><span class="line">InnoDB:可靠地事物处理引擎,不支持全文本搜索;</span><br><span class="line">MEMORY:功能等同于MyISAM,由于数据存储在内存中,速度很快,但是断电就丢失(适合用于临时表);</span><br><span class="line">MyISAM:性能极高,支持全文本搜索,但不支持事物处理。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">外键不能跨引擎,混用引擎有缺陷,外键不能跨引擎,即一个使用引擎的表不能引用具有不同引擎的表的外键。</span><br></pre></td></tr></table></figure><h2 id="2-更新表"><a href="#2-更新表" class="headerlink" title="2 更新表"></a>2 更新表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加列 --&gt;</span></span><br><span class="line">alter table tablename add 字段1 类型</span><br><span class="line">[,字段2 类型]</span><br><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- 删除列 --&gt;</span></span><br><span class="line">alter table tablename drop column 字段;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- alter table常见用途 --&gt;</span></span><br><span class="line">用来定义外键,alter table talbename add constraint fk_tablename1_tablename2 foreign key (tablename2的字段id) refernces tablename2的字段 (tablename2的字段id)</span><br><span class="line"></span><br><span class="line">alter table orderitems add constraint fk_orderitems_orders foreign key (order_num) references orders(order_num);</span><br></pre></td></tr></table></figure><h2 id="3-删除表"><a href="#3-删除表" class="headerlink" title="3 删除表"></a>3 删除表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除表 --&gt;</span></span><br><span class="line">drop table tablename;</span><br></pre></td></tr></table></figure><h2 id="4-重命名表"><a href="#4-重命名表" class="headerlink" title="4 重命名表"></a>4 重命名表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 重命名表 --&gt;</span></span><br><span class="line">rename table oldtablename to newtablename;</span><br></pre></td></tr></table></figure><h1 id="十二、-视图"><a href="#十二、-视图" class="headerlink" title="十二、 视图"></a>十二、 视图</h1><h2 id="1-视图"><a href="#1-视图" class="headerlink" title="1 视图"></a>1 视图</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">视图是一个虚拟的表,与包含数据的表是不一样的,视图只包含使用时动态检索数据的查询。所以,对视图进行增加或者删除操作,实际上是对其基表进行增加或者删除。但是视图一般都是用来检索,而不是用来更新。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图的常见应用 --&gt;</span></span><br><span class="line">a.重用SQL语句</span><br><span class="line">b.简化复杂的SQL操作。即编写查询之后,可以更方便的重用它而了解它的基本查询细节</span><br><span class="line">c.使用的是表的组成部分而不是整个表</span><br><span class="line">d.保护数据,可以给用户授予表的特定部分的访问权限而不是整个表的访问权限</span><br><span class="line">e.更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视图的使用--&gt;</span></span><br><span class="line">创建视图：create view viewname as </span><br><span class="line">select ...</span><br><span class="line">;</span><br><span class="line">查看视图：show create view viewname;</span><br><span class="line">更新视图：create or replace view; 或者先 drop 再 create</span><br><span class="line">删除视图：drop view viewname;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 更新视图的注意点 --&gt;</span></span><br><span class="line">并非所有的视图都是可以更新的。若MySQL不能准确地确定被更新的 基数据,则不允许更新。则视图定义中有一下操作时,不能进行视图更新：</span><br><span class="line">a.分组(group by 和 having)</span><br><span class="line">b.联结</span><br><span class="line">c.子查询</span><br><span class="line">d.并</span><br><span class="line">e.聚合函数</span><br><span class="line">f.distinct</span><br><span class="line">g.导出列</span><br><span class="line">上述的限制只限于MySQL5以前,之后可能会更改。</span><br></pre></td></tr></table></figure><h1 id="十三、-游标"><a href="#十三、-游标" class="headerlink" title="十三、 游标"></a>十三、 游标</h1><h2 id="1-游标"><a href="#1-游标" class="headerlink" title="1 游标"></a>1 游标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用游标注意事项 --&gt;</span></span><br><span class="line">游标只能用于存储过程。不像多数DBMS,MySQL游标只能使用于存储过程和函数。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用游标的步骤 --&gt;</span></span><br><span class="line">a.先声明(定义)游标,这个过程并没有检索数据,只是定义了使用的SELECT语句。</span><br><span class="line">b.打开游标以供使用。这个过程将定义的SELECT语句将数据检索出来。</span><br><span class="line">c.对于填有数据的游标,根据需要检索各行。</span><br><span class="line">d.结束游标使用时,关闭游标。</span><br></pre></td></tr></table></figure><h2 id="2-使用游标"><a href="#2-使用游标" class="headerlink" title="2 使用游标"></a>2 使用游标</h2><h4 id="2-1-创建游标"><a href="#2-1-创建游标" class="headerlink" title="2.1 创建游标"></a>2.1 创建游标</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE processorders()</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE ordernumbers CURSOR  <span class="comment">&lt;!--declare命名游标--&gt;</span></span><br><span class="line">FOR</span><br><span class="line">SELECT order_num FROM orders;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">存储过程处理完成之后,游标就会消失。</span><br></pre></td></tr></table></figure><h4 id="2-2-打开和关闭游标"><a href="#2-2-打开和关闭游标" class="headerlink" title="2.2 打开和关闭游标"></a>2.2 打开和关闭游标</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打开 --&gt;</span></span><br><span class="line">OPEN ordernumbers;</span><br><span class="line"><span class="comment">&lt;!-- 关闭 --&gt;</span></span><br><span class="line">CLOSE ordernumbers;  <span class="comment">&lt;!--关闭所有内部内存和资源--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-使用游标数据"><a href="#2-3-使用游标数据" class="headerlink" title="2.3 使用游标数据"></a>2.3 使用游标数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE processorder()</span><br><span class="line">BEGIN</span><br><span class="line"><span class="comment">&lt;!--Declare local variable--&gt;</span></span><br><span class="line">DECLARE ordernumers CURSOR</span><br><span class="line">DECLARE done BOOLEAN DEFAULT 0;</span><br><span class="line">DECLARE o INT;</span><br><span class="line">DECLARE t DECIMAL(8,2);</span><br><span class="line"><span class="comment">&lt;!--Declare the cursor--&gt;</span></span><br><span class="line">DECLARE ordernumbers CURSOR</span><br><span class="line">FOR</span><br><span class="line">SELECT order_num FORM orders;</span><br><span class="line"><span class="comment">&lt;!--Declare continue handler--&gt;</span></span><br><span class="line">DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1; <span class="comment">&lt;!--循环的结束条件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Create a table to store the results--&gt;</span></span><br><span class="line">CREATE TABLE IF NOT EXISTS ordertotals</span><br><span class="line">(order_num INT, total DECIMAL(8,2));</span><br><span class="line"><span class="comment">&lt;!--Open the cursor--&gt;</span></span><br><span class="line">OPEN ordernumbers;</span><br><span class="line"><span class="comment">&lt;!--Loop through all rows--&gt;</span></span><br><span class="line">REPEAT</span><br><span class="line"><span class="comment">&lt;!--Get order number--&gt;</span></span><br><span class="line">FETCH ordernumvers INTO O; <span class="comment">&lt;!--使用fetch检索order_num直至done为真--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Get the total for this order--&gt;</span></span><br><span class="line">CALL ordertotal(o, 1, t);</span><br><span class="line"><span class="comment">&lt;!--Insert order and total into ordertotals--&gt;</span></span><br><span class="line">INSERT INTO ordertotals(order_num, total) VALUES(o, t);</span><br><span class="line"><span class="comment">&lt;!--End of loop--&gt;</span></span><br><span class="line">UNTIL done END REPEAT;</span><br><span class="line"><span class="comment">&lt;!--Close the cursor--&gt;</span></span><br><span class="line">CLOSE ordernumbers;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h1 id="十五、-触发器"><a href="#十五、-触发器" class="headerlink" title="十五、 触发器"></a>十五、 触发器</h1><h2 id="1-触发器"><a href="#1-触发器" class="headerlink" title="1 触发器"></a>1 触发器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发器 --&gt;</span></span><br><span class="line">在某个表发生变化时另一个表更改时自动处理</span><br><span class="line"><span class="comment">&lt;!-- 支持语句 --&gt;</span></span><br><span class="line">DELETE</span><br><span class="line">INSERT</span><br><span class="line">UPDATE</span><br><span class="line">其他语句不支持触发器</span><br></pre></td></tr></table></figure><h2 id="2-创建触发器"><a href="#2-创建触发器" class="headerlink" title="2 创建触发器"></a>2 创建触发器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定条件 --&gt;</span></span><br><span class="line">a.唯一的触发器名</span><br><span class="line">b.触发器关联的表</span><br><span class="line">c.触发器应该相应的活动</span><br><span class="line">d.触发器何时执行</span><br><span class="line"><span class="comment">&lt;!-- 语法 --&gt;</span></span><br><span class="line">CREATE TRIGGER newproduct AFTER INSERT ON products FOR EACH ROW SELECT 'Product added';</span><br><span class="line"><span class="comment">&lt;!-- 触发器支持的只有表,视图不支持 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-删除触发器"><a href="#3-删除触发器" class="headerlink" title="3 删除触发器"></a>3 删除触发器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除触发器 --&gt;</span></span><br><span class="line">DROP TRIGGER newproduct;</span><br></pre></td></tr></table></figure><h2 id="4-INSERT-触发器"><a href="#4-INSERT-触发器" class="headerlink" title="4 INSERT 触发器"></a>4 INSERT 触发器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER neworder AFTER INSERT ON orders FOR EACH ROW SELECT NEW.order_num;</span><br></pre></td></tr></table></figure><h2 id="5-DELETE-触发器"><a href="#5-DELETE-触发器" class="headerlink" title="5 DELETE 触发器"></a>5 DELETE 触发器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER deleteorder BEFORE DELETE ON orders FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO archive_orders(order_num, order_date, cust_id)</span><br><span class="line">VALUES(OLD.order_num, OLD.order_date, OLD.CUST_ID);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h2 id="6-UPDATE-触发器"><a href="#6-UPDATE-触发器" class="headerlink" title="6 UPDATE 触发器"></a>6 UPDATE 触发器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors</span><br><span class="line">FOR EACH ROW SET.vend_state = Upper(NEW.vend_state);</span><br></pre></td></tr></table></figure><h1 id="十六、-事物处理"><a href="#十六、-事物处理" class="headerlink" title="十六、 事物处理"></a>十六、 事物处理</h1><h2 id="1-事物处理"><a href="#1-事物处理" class="headerlink" title="1 事物处理"></a>1 事物处理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事物处理 --&gt;</span></span><br><span class="line">可以用于维护数据库的完整性,即保证同一批次的MySQL操作要么全部操作成功,要么全部操作失败。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事物处理的几个术语 --&gt;</span></span><br><span class="line">事物(transaction):指的是一组SQL语句;</span><br><span class="line">回退(rollback):指的是撤销指定SQL语句的过程;</span><br><span class="line">提交(commit):将未存储的SQL语句结果写入数据库表;</span><br><span class="line">保留点(savepoint):指事物处理中设置的临时占位符(place-holder),可以对这一操作进行回退。</span><br></pre></td></tr></table></figure><h2 id="2-控制事物处理"><a href="#2-控制事物处理" class="headerlink" title="2 控制事物处理"></a>2 控制事物处理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标识事物开始 --&gt;</span></span><br><span class="line">START TRANSACTION</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用ROLLBACK --&gt;</span></span><br><span class="line">SELECT * FROM ordertotals; <span class="comment">&lt;!--显示记录--&gt;</span></span><br><span class="line">START TRANSACTION;  <span class="comment">&lt;!--开始事物--&gt;</span></span><br><span class="line">DELETE FROM ordertotals;  <span class="comment">&lt;!--删除记录--&gt;</span></span><br><span class="line">SELECT * FROM ordertotals; <span class="comment">&lt;!--显示空的记录表--&gt;</span></span><br><span class="line">ROLLBACK;                  <span class="comment">&lt;!--事物回退--&gt;</span></span><br><span class="line">SELECT * FROM ordertotals;  <span class="comment">&lt;!--重新显示记录--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以回退的SQL语句 --&gt;</span></span><br><span class="line">INSERT</span><br><span class="line">UPDATE</span><br><span class="line">DELETE</span><br><span class="line"><span class="comment">&lt;!-- 不能回退的SQL语句 --&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">CREATE</span><br><span class="line">DROP</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MySQL中的SQL语句都是针对数据库表执行和表写的,一般都是隐含提交(implicit commit)。即提交操作自动进行。</span><br><span class="line">但是在事物处理中,提交并不会自动执行,所以就需要用到 COMMIT 语句。</span><br><span class="line"><span class="comment">&lt;!-- 使用COMMIT --&gt;</span></span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM orderitems WHERE order_num = 10000; <span class="comment">&lt;!--删除记录--&gt;</span></span><br><span class="line">DELETE FROM orders WHERE order_num=10000;       <span class="comment">&lt;!--若上一条记录删除失败,则不会执行COMMIT操作--&gt;</span></span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 更改默认的提交行为 --&gt;</span></span><br><span class="line">SET autocommit=0;</span><br><span class="line">autocommit针对的是每个连接而不是服务器。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用保留点 --&gt;</span></span><br><span class="line">可以支持回到部分事物处理</span><br><span class="line">SAVEPOINT delete1;  <span class="comment">&lt;!--保留点应取唯一名字--&gt;</span></span><br><span class="line">ROLLBACK TO delete1;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 释放保留点 --&gt;</span></span><br><span class="line">MySQL5之后支持释放保留点</span><br><span class="line">RELEASE SAVEPOINT</span><br></pre></td></tr></table></figure><h1 id="十七、-存储过程"><a href="#十七、-存储过程" class="headerlink" title="十七、 存储过程"></a>十七、 存储过程</h1><h2 id="1-使用存储过程的原因"><a href="#1-使用存储过程的原因" class="headerlink" title="1 使用存储过程的原因"></a>1 使用存储过程的原因</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 原因 --&gt;</span></span><br><span class="line">优点：</span><br><span class="line">a.将接口封装在易于使用的单元中,简化复杂的操作。</span><br><span class="line">b.不要求反复建立一系列处理步骤,保证了数据的安全性。因为程序执行的步骤越多,出错的概率也就越大。</span><br><span class="line">c.简化对变动的管理。即安全性。</span><br><span class="line">d.提高性能。使用存储过程比使用单独的SQL语句要快。</span><br><span class="line">e.存在只能用在单个请求中的MySQL元素和特性,存储过程即可以使用他们来编写功能更强更灵活的代码。</span><br><span class="line">总结上述：即简单、安全、高性能。</span><br><span class="line">缺点：</span><br><span class="line">a.编写比SQL语句复杂。</span><br><span class="line">b.没有创建存储过程的安全访问权限。</span><br></pre></td></tr></table></figure><h2 id="2-存储过程的使用"><a href="#2-存储过程的使用" class="headerlink" title="2 存储过程的使用"></a>2 存储过程的使用</h2><h4 id="2-1-创建存储过程"><a href="#2-1-创建存储过程" class="headerlink" title="2.1 创建存储过程"></a>2.1 创建存储过程</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 临时更改MySQL命令行客户机的分隔符 --&gt;</span></span><br><span class="line">DELEMITER //  <span class="comment">&lt;!--告诉程序使用 // 作为临时结束分隔符--&gt;</span></span><br><span class="line">CREATE PROCEDURE productpricing()</span><br><span class="line">BEGIN</span><br><span class="line">SELECT Avg(prod_price) AS priceaverage</span><br><span class="line">FROM products</span><br><span class="line">END //    <span class="comment">&lt;!--标志存储过程结束--&gt;</span></span><br><span class="line">DELIMITER ;  <span class="comment">&lt;!--恢复原来的分隔符--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">\ 符号不能作为语句分隔符,其余均可。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用存储过程 --&gt;</span></span><br><span class="line">CALL productpricing()</span><br></pre></td></tr></table></figure><h4 id="2-2-删除存储过程"><a href="#2-2-删除存储过程" class="headerlink" title="2.2 删除存储过程"></a>2.2 删除存储过程</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE productpricing;</span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">a.后边没有使用 ()</span><br><span class="line">b.过程不存在,则会报错;可使用DROP PROCEDURE IF EXISTS productpricing</span><br></pre></td></tr></table></figure><h4 id="2-3-配合参数使用"><a href="#2-3-配合参数使用" class="headerlink" title="2.3 配合参数使用"></a>2.3 配合参数使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建 --&gt;</span></span><br><span class="line">CREATE PROCEDURE productpricing(</span><br><span class="line">OUT pl DECIMAL(8,2),  <span class="comment">&lt;!--out关键字指出相应参数用来从存储过程传出值给调用者,IN表示传递给存储过程--&gt;</span></span><br><span class="line">OUT ph DECIMAL(8,2),  <span class="comment">&lt;!--INOUT表示对存储过程传入和传出--&gt;</span></span><br><span class="line">OUT pa DECIMAL(8,2),  <span class="comment">&lt;!--DECIMAL为数据类型--&gt;</span></span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT Min(prod_price) INTO pl from products; <span class="comment">&lt;!--存储过程代码位于begin与end之间--&gt;</span></span><br><span class="line">SELECT Max(prod_price) INTO ph from products; <span class="comment">&lt;!--通过INTO关键字保存至相应的变量--&gt;</span></span><br><span class="line">SELECT Avg(prod_price) INTO pa from products;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line">CALL productpricing(@pricelow,</span><br><span class="line">   @pricehigh,</span><br><span class="line">   @priceaverage);</span><br><span class="line">这条语句并不会显示任何数据。仅仅是返回以后可以显示的变量;若想要显示数据,可以使用一下语句：</span><br><span class="line">SELECT @pricehigh, @pricelow, @priceaverage;</span><br></pre></td></tr></table></figure><h4 id="2-4-检查存储过程"><a href="#2-4-检查存储过程" class="headerlink" title="2.4 检查存储过程"></a>2.4 检查存储过程</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE ordertotal; <span class="comment">&lt;!--显示传建一个存储过程的create语句--&gt;</span></span><br><span class="line">SHOW PROCEDURE STATUS;  <span class="comment">&lt;!--显示何时、有谁创建等详细信息的存储过程--&gt;</span></span><br><span class="line">SHOW PROCEDURE STATUS LIKE 'ORDERTOTAL'; <span class="comment">&lt;!--过滤模式--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发编程之多进程</title>
      <link href="//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
      <url>//%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>进程简单点说就是一个正在执行的过程。进程是对所有程序中正在运行的程序的一个抽象。进程的概念起源于操作系统，是操作系统最核心的概念，也是操作系统提供的最古老也是最重要的抽象概念之一。操作系统的其他所有内容都是围绕进程的概念展开的。若想要真正了解进程，则必须事先了解操作系统。</p><a id="more"></a><h1 id="一、多进程理论基础"><a href="#一、多进程理论基础" class="headerlink" title="一、多进程理论基础"></a>一、多进程理论基础</h1><h2 id="1-进程的概念"><a href="#1-进程的概念" class="headerlink" title="1.进程的概念"></a>1.进程的概念</h2><p>正在进行的一个过程或者说一个任务。而负责执行任务则是CPU。</p><h2 id="2-进程与程序的区别"><a href="#2-进程与程序的区别" class="headerlink" title="2.进程与程序的区别"></a>2.进程与程序的区别</h2><p>进程指的是程序的运行过程，程序仅仅只是一堆代码 </p><blockquote><p>  需要强调的是：同一个程序执行两次，那也是两个进程，比如打开QQ，虽然都是同一个软件，但是一个可以登录248369的账号，一个可以登录13579的账号</p></blockquote><h2 id="3-并发与并行"><a href="#3-并发与并行" class="headerlink" title="3.并发与并行"></a>3.并发与并行</h2><blockquote><p>不管是并行还是并发，在用户看来程序都是”同时”运行的。不管是进程还是线程，都只是一个任务而已，真是干活的是CPU，CPU来做这些任务，而一个CPU同一时刻只能执行一个任务。</p></blockquote><ul><li><p>并发：是伪并行，即看起来是同时运行。单个CPU <code>&amp;</code> 多道技术就可以实现并发，（并行也属于并发） </p></li><li><p>并行：同时运行，只有具备多个CPU才能实现并行 </p><blockquote><p>单核下，可以利用多道技术，多个核，每个核也都可以利用多道技术（<strong>多道技术[^1]是针对单核而言的</strong>）</p><p>有四个核，六个任务，这样同一时间有四个任务被执行，假设分别被分配给了CPU1，CPU2，CPU3，CPU4，一旦任务1遇到I/O就被迫中断执行，此时任务5就拿到CPU1的时间片去执行，这就是单核下的多道技术，而一旦任务1的I/O结束了，操作系统会重新调用它(<strong>需知进程的调度、分配给哪个CPU运行，由操作系统说了算</strong>)，可能被分配给四个CPU中的任意一个去执行</p></blockquote></li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543969097980&amp;di=d59734eeb18907a76219453c79e885eb&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.wang1314.com%2Fuploadfile%2F2016%2F2016-03-03%2F1456973846151.PNG" alt="并行与并发"></p><h2 id="4-同步-异步-amp-阻塞-非阻塞"><a href="#4-同步-异步-amp-阻塞-非阻塞" class="headerlink" title="4.同步/异步 &amp;阻塞/非阻塞"></a>4.同步/异步 <code>&amp;</code>阻塞/非阻塞</h2><h3 id="4-1-同步"><a href="#4-1-同步" class="headerlink" title="4.1.同步"></a>4.1.同步</h3><blockquote><p>  所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不会返回。按照这个定义，其实绝大多数函数都是同步调用。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例：</span></span><br><span class="line"><span class="number">1.</span> multiprocessing.Pool下的apply <span class="comment"># 发起同步调用后，就在原地等着任务结束，根本不考虑任务是在计算还是在io阻塞，总之就是一股脑地等任务结束</span></span><br><span class="line"><span class="number">2.</span> concurrent.futures.ProcessPoolExecutor().submit(func,).result()</span><br><span class="line"><span class="number">3.</span> concurrent.futures.ThreadPoolExecutor().submit(func,).result()</span><br></pre></td></tr></table></figure><h3 id="4-2-异步"><a href="#4-2-异步" class="headerlink" title="4.2.异步"></a>4.2.异步</h3><blockquote><p>异步的概念和同步相对。当一个异步功能调用发出后，调用者不能立刻得到结果。当该异步功能完成后，通过状态、通知或回调来通知调用者。如果异步功能用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一 种很严重的错误）。如果是使用通知的方式，效率则很高，因为异步功能几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#举例：</span></span><br><span class="line"><span class="number">1.</span> multiprocessing.Pool().apply_async() <span class="comment">#发起异步调用后，并不会等待任务结束才返回，相反，会立即获取一个临时结果（并不是最终的结果，可能是封装好的一个对象）。</span></span><br><span class="line"><span class="number">2.</span> concurrent.futures.ProcessPoolExecutor(<span class="number">3</span>).submit(func,)</span><br><span class="line"><span class="number">3.</span> concurrent.futures.ThreadPoolExecutor(<span class="number">3</span>).submit(func,)</span><br></pre></td></tr></table></figure><h3 id="4-3-阻塞"><a href="#4-3-阻塞" class="headerlink" title="4.3.阻塞"></a>4.3.阻塞</h3><blockquote><p>阻塞调用是指调用结果返回之前，当前线程会被挂起（如遇到IO操作）。函数只有在得到结果之后才会将阻塞的线程激活。有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#举例：</span></span><br><span class="line"><span class="number">1.</span> 同步调用：apply一个累计<span class="number">1</span>亿次的任务，该调用会一直等待，直到任务返回结果为止，但并未阻塞住（即便是被抢走cpu的执行权限，那也是处于就绪态）;</span><br><span class="line"><span class="number">2.</span> 阻塞调用：当socket工作在阻塞模式的时候，如果没有数据的情况下调用recv函数，则当前线程就会被挂起，直到有数据为止。</span><br></pre></td></tr></table></figure><h3 id="4-4-非阻塞"><a href="#4-4-非阻塞" class="headerlink" title="4.4.非阻塞"></a>4.4.非阻塞</h3><blockquote><p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前也会立刻返回，同时该函数不会阻塞当前线程。</p></blockquote><h3 id="4-5-总结"><a href="#4-5-总结" class="headerlink" title="4.5 总结"></a>4.5 总结</h3><blockquote><ol><li>同步与异步针对的是函数/任务的调用方式：同步就是当一个进程发起一个函数（任务）调用的时候，一直等到函数（任务）完成，而进程继续处于激活状态。而异步情况下是当一个进程发起一个函数（任务）调用的时候，不会等函数返回，而是继续往下执行当，函数返回的时候通过状态、通知、事件等方式通知进程任务完成。</li><li>阻塞与非阻塞针对的是进程或线程：阻塞是当请求不能满足的时候就将进程挂起，而非阻塞则不会阻塞当前进程</li></ol></blockquote><h2 id="5-进程的创建与终止"><a href="#5-进程的创建与终止" class="headerlink" title="5.进程的创建与终止"></a>5.进程的创建与终止</h2><h3 id="5-1-创建"><a href="#5-1-创建" class="headerlink" title="5.1 创建"></a>5.1 创建</h3><blockquote><p>  但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如微波炉中的控制器，一旦启动微波炉，所有的进程都已经存在。而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式创建新的进程</p></blockquote><p>　　1. 系统初始化（查看进程Linux中用<code>ps</code>命令，windows中用任务管理器，前台进程负责与用户交互，后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮件、web页面、新闻、打印）</p><p>　　2. 一个进程在运行过程中开启了子进程（如nginx开启多进程，os.fork,subprocess.Popen等）</p><p>　　3. 用户的交互式请求，而创建一个新进程（如用户双击暴风影音）</p><p>　　4. 一个批处理作业的初始化（只在大型机的批处理系统中应用）</p><blockquote><p>  无论哪一种，新进程的创建都是由一个已经存在的进程执行了一个用于创建进程的系统调用而创建的：</p></blockquote><p>　　1. 在UNIX中该系统调用是：fork，fork会创建一个与父进程一模一样的副本，二者有相同的存储映像、同样的环境字符串和同样的打开文件（在shell解释器进程中，执行一个命令就会创建一个子进程）</p><p>　　2. 在windows中该系统调用是：<code>CreateProcess</code>，<code>CreateProcess</code>既处理进程的创建，也负责把正确的程序装入新进程。</p><blockquote><p>关于创建的子进程，UNIX和windows</p></blockquote><p>　　1.相同的是：进程创建后，父进程和子进程有各自不同的地址空间（<strong>多道技术要求物理层面实现进程之间内存的隔离</strong>），任何一个进程的在其地址空间中的修改都不会影响到另外一个进程。</p><p>　　2.不同的是：在UNIX中，子进程的初始地址空间是父进程的一个副本，提示：子进程和父进程是可以有只读的共享内存区的。但是对于windows系统来说，从一开始父进程与子进程的地址空间就是不同的。</p><h3 id="5-2-终止"><a href="#5-2-终止" class="headerlink" title="5.2 终止"></a>5.2 终止</h3><ol><li>正常退出（自愿，如用户点击交互式页面的叉号，或程序执行完毕调用发起系统调用正常退出，在Linux中用exit，在windows中用<code>ExitProcess</code>）</li></ol><p>　　2. 出错退出（自愿，<code>python a.py</code>中<code>a.py</code>不存在）</p><p>　　3. 严重错误（非自愿，执行非法指令，如引用不存在的内存，1/0等，可以捕捉异常，try…except…）</p><p>　　4. 被其他进程杀死（非自愿，如kill -9）</p><h2 id="6-进程的层次结构"><a href="#6-进程的层次结构" class="headerlink" title="6.进程的层次结构"></a>6.进程的层次结构</h2><p>无论UNIX还是windows，进程只有一个父进程，不同的是：</p><p>　　1. 在UNIX中所有的进程，都是以<code>init</code>进程为根，组成树形结构。父子进程共同组成一个进程组，这样，当从键盘发出一个信号时，该信号被送给当前与键盘相关的进程组中的所有成员。</p><p>　　2. 在windows中，没有进程层次的概念，所有的进程都是地位相同的，唯一类似于进程层次的暗示，是在创建进程时，父进程得到一个特别的令牌（<strong>称为句柄</strong>）,该句柄可以用来控制子进程，但是父进程有权把该句柄传给其他子进程，这样就没有层次了。</p><h2 id="7-进程的状态"><a href="#7-进程的状态" class="headerlink" title="7.进程的状态"></a>7.进程的状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f access.log |grep '404'</span><br></pre></td></tr></table></figure><p>执行程序tail，开启一个子进程，执行程序grep，开启另外一个子进程，两个进程之间基于管道’|’通讯，将tail的结果作为grep的输入。</p><p>　　进程grep在等待输入（即I/O）时的状态称为阻塞，此时grep命令都无法运行</p><p>　　其实在两种情况下会导致一个进程在逻辑上不能运行，</p><p>　　1. 进程挂起是自身原因，遇到I/O阻塞，便要让出CPU让其他进程去执行，这样保证CPU一直在工作</p><p>　　2. 与进程无关，是操作系统层面，可能会因为一个进程占用时间过多，或者优先级等原因，而调用其他的进程去使用CPU。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543970068308&amp;di=1fda8af88712b3927bebecd50db7e445&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D3789410392%2C280005871%26fm%3D214%26gp%3D0.jpg" alt="进程的三种状态" title="进程的三种状态"></p><h2 id="8-进程并发的实现"><a href="#8-进程并发的实现" class="headerlink" title="8.进程并发的实现"></a>8.进程并发的实现</h2><p>进程并发的实现在于，硬件中断一个正在运行的进程，把此时进程运行的所有状态保存下来，为此，操作系统维护一张表格，即进程表（process table），每个进程占用一个进程表项（这些表项也称为进程控制块）。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543970844805&amp;di=acbdfb143831cde8dfe79eff1ab4750f&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.mamicode.com%2Finfo%2F201805%2F20180519122636852496.png" alt="计算机进程表"></p><blockquote><p>  该表存放了进程状态的重要信息：程序计数器、堆栈指针、内存分配状况、所有打开文件的状态、帐号和调度信息，以及其他在进程由运行态转为就绪态或阻塞态时，必须保存的信息，从而保证该进程在再次启动时，就像从未被中断过一样。 </p></blockquote><h2 id="9-僵尸进程与孤儿进程"><a href="#9-僵尸进程与孤儿进程" class="headerlink" title="9.僵尸进程与孤儿进程"></a>9.僵尸进程与孤儿进程</h2><blockquote><p><strong>僵尸进程(有害)：</strong>一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。详解如下</p></blockquote><p>在Unix/Linux中，正常情况下子进程是通过父进程创建的，子进程在创建新的进程。子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程到底什么时候结束，如果子进程一结束就立刻回收其全部资源，那么在父进程内将无法获取子进程的状态信息。</p><blockquote><p>  因此，UNⅨ提供了一种机制可以保证父进程可以在任意时刻获取子进程结束时的状态信息：</p><ol><li>在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。但是仍然为其保留一定的信息（包括进程号the process ID，退出状态the termination status of the process，运行时间the amount of CPU time taken by the process等）</li><li>直到父进程通过wait / waitpid来取时才释放. 但这样就导致了问题，如果进程不调用wait / waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</li></ol></blockquote><p>任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。  如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。</p><blockquote><p>僵尸进程危害场景：</p><p>例如有个进程，它定期的产 生一个子进程，这个子进程需要做的事情很少，做完它该做的事情之后就退出了，因此这个子进程的生命周期很短，但是，父进程只管生成新的子进程，至于子进程 退出之后的事情，则一概不闻不问，这样，系统运行上一段时间之后，系统中就会存在很多的僵死进程，倘若用ps命令查看的话，就会看到很多状态为Z的进程。 严格地来说，僵死进程并不是问题的根源，罪魁祸首是产生出大量僵死进程的那个父进程。因此，当我们寻求如何消灭系统中大量的僵死进程时，答案就是把产生大 量僵死进程的那个元凶枪毙掉（也就是通过kill发送SIGTERM或者SIGKILL信号啦）。枪毙了元凶进程之后，它产生的僵死进程就变成了孤儿进 程，这些孤儿进程会被init进程接管，init进程会wait()这些孤儿进程，释放它们占用的系统进程表中的资源，这样，这些已经僵死的孤儿进程 就能瞑目而去了。</p></blockquote><blockquote><p><strong>孤儿进程(无害)：</strong>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</p></blockquote><p>孤儿进程是没有父进程的进程，孤儿进程这个重任就落到了init进程身上，init进程就好像是一个民政局，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候，内核就把孤 儿进程的父进程设置为init，而init进程会循环地wait()它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。</p><h1 id="二、多进程的代码实现"><a href="#二、多进程的代码实现" class="headerlink" title="二、多进程的代码实现"></a>二、多进程的代码实现</h1><h2 id="1-multiprocessing模块介绍"><a href="#1-multiprocessing模块介绍" class="headerlink" title="1.multiprocessing模块介绍"></a>1.multiprocessing模块介绍</h2><p>​        在python中多线程无法利用多核优势，如果想要充分地使用多核CPU的资源（<code>os.cpu_count()</code>查看），在python中大部分情况需要使用多进程。Python提供了<code>multiprocessing</code>。<br>        <code>multiprocessing</code>模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数），该模块与多线程模块<code>threading</code>的编程接口类似。</p><p>　     <code>multiprocessing</code>模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，提供了<code>Process、Queue、Pipe、Lock</code>等组件。</p><p>​    <strong>强调：与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内。</strong></p><h2 id="2-Process类的介绍"><a href="#2-Process类的介绍" class="headerlink" title="2.Process类的介绍"></a>2.Process类的介绍</h2><ul><li><p><strong>创建进程的类</strong> </p><blockquote><p>Process([group [, target [, name [, args [, kwargs]]]]])，由该类实例化得到的对象，表示一个子进程中的任务（尚未启动）</p><p><strong>强调：</strong> </p><ol><li><p>需要使用关键字的方式来指定参数</p></li><li><p>args指定的为传给target函数的位置参数，是一个元组形式，必须有逗号</p></li></ol></blockquote></li><li><p><strong>参数介绍</strong> </p><p>group参数如果没有使用，值始终为None</p><p>target表示调用对象，即子进程要执行的任务</p><p>args表示调用对象的位置参数元组，args=(1,)</p><p>kwargs表示调用对象的字典，kwargs={‘book’:’Magic’,’Price’:99}</p><p>name为子进程的名称</p></li><li><p><strong>进程的方法介绍</strong></p><blockquote><p>  1 <code>p.start()</code>：启动进程，并调用该子进程中的 p.run()  </p><p>  2 <code>p.run()</code>:进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法   3 p.terminate():强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁 </p><p>  4 <code>p.is_alive()</code>:如果p仍然运行，返回True </p><p>  5 <code>p.join([timeout])</code>:主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间，需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程 </p></blockquote></li><li><p><strong>进程的属性介绍</strong></p><blockquote><p>  1 <code>p.daemon</code>：默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为True后，p不能创建自己的新进程，必须在p.start()之前设置 </p><p>  2  <code>p.name</code>:进程的名称 </p><p>  3 <code>p.pid</code>：进程的pid </p><p>  4 p.exitcode:进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</p><p>  5 p.authkey:进程的身份验证键,默认是由os.urandom()随机生成的32字符的字符串。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可） </p></blockquote></li></ul><ul><li><strong>创建进程的两种方式</strong></li></ul><blockquote><p><strong>注意：在windows中Process()必须放到<code>if __name__ == &#39;__main__&#39;</code>:下</strong><br><code>if __name__ == &quot;__main__&quot;</code><br>since statements inside this if-statement will not get called upon import.<br>由于Windows没有fork，多处理模块启动一个新的Python进程并导入调用模块。<br>如果在导入时调用Process（），那么这将启动无限继承的新进程（或直到机器耗尽资源）。<br>这是隐藏对Process（）内部调用的原，使用<code>if __name__ == “__main __”</code>，这个if语句中的语句将不会在导入时被调用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(animal)</span>:</span></span><br><span class="line">    print(<span class="string">'%s running'</span> %animal)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    print(<span class="string">'%s running end'</span> %animal)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># if __name__ == "__main__":</span></span><br><span class="line">p1=Process(target=task,args=(<span class="string">'dog'</span>,)) </span><br><span class="line">p2=Process(target=task,args=(<span class="string">'cat'</span>,))</span><br><span class="line">p3=Process(target=task,args=(<span class="string">'pig'</span>,))</span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">print(<span class="string">'This is main process...'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,animal)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.animal=animal</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s running'</span> %self.animal)</span><br><span class="line"></span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">        print(<span class="string">'%s running end'</span> %self.animal)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># if __name__ == "__main__":</span></span><br><span class="line">p1=Task(<span class="string">'dog'</span>)</span><br><span class="line">p2=Task(<span class="string">'cat'</span>)</span><br><span class="line">p3=Task(<span class="string">'pig'</span>)</span><br><span class="line"></span><br><span class="line">p1.start() <span class="comment"># start内部会自动调用run</span></span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">print(<span class="string">'This is main process...'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>  <strong>进程之间的内存空间是隔离的:</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">n=<span class="number">10086</span> <span class="comment"># 在windows系统中应该把全局变量定义在if __name__ == '__main__'之上就可以了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n=<span class="number">10000</span></span><br><span class="line">    print(<span class="string">'子进程内: '</span>,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p=Process(target=work)</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'主进程内: '</span>,n)</span><br></pre></td></tr></table></figure><ul><li><p><strong>Process对象的join方法</strong> </p><blockquote><p>  主进程等待设有<code>join</code>的子进程运行结束，主进程才可以继续往下执行，其它的子进程还是可以继续执行各自的任务的。 <strong>注意和串行区分开来</strong></p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,animal)</span>:</span></span><br><span class="line">        self.animal=animal</span><br><span class="line">        super().__init__()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s is running'</span> %self.animal)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s running end'</span> %self.animal)</span><br><span class="line"></span><br><span class="line">p=Task(<span class="string">'dog'</span>)</span><br><span class="line">p.start()</span><br><span class="line">p.join(<span class="number">1</span>)   <span class="comment"># 1指的是主进程等待子进程的时间，超过该时间就不继续等待了</span></span><br><span class="line">print(<span class="string">'开始'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-守护进程"><a href="#3-守护进程" class="headerlink" title="3.守护进程"></a>3.守护进程</h2><p>守护进程是由主进程创建的</p><p>　　其一：守护进程会在主进程代码执行结束后就终止</p><p>　　其二：守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p><p><strong>注意：进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,animal)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.animal=animal</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s running'</span> %self.animal)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s running end'</span> %self.animal)</span><br><span class="line"></span><br><span class="line">p=Task(<span class="string">'dog'</span>)</span><br><span class="line">p.daemon=<span class="keyword">True</span> <span class="comment">#一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span></span><br><span class="line">p.start()</span><br><span class="line">print(<span class="string">'main process'</span>)</span><br></pre></td></tr></table></figure><h2 id="4-进程同步（锁）"><a href="#4-进程同步（锁）" class="headerlink" title="4.进程同步（锁）"></a>4.进程同步（锁）</h2><blockquote><p>进程之间数据会不共享，但是可以共享同一套文件系统，所以访问同一个文件或同一个打印终端，一般没有问题，而共享带来的问题是竞争，竞争带来的结果就是错乱，这时就需要使用加锁来处理数据了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若不加锁则是并发运行，虽然效率高，但是使用的时候会竞争同一终端，导致打印结果错乱</span></span><br><span class="line"><span class="comment"># 加锁之后由并发变成了串行,牺牲了运行效率,但避免了竞争</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(lock)</span>:</span></span><br><span class="line">    lock.acquire()   <span class="comment"># 加锁</span></span><br><span class="line">    print(<span class="string">'%s is running'</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'%s is done'</span> %os.getpid())</span><br><span class="line">    lock.release()   <span class="comment"># 释放锁</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        p=Process(target=work,args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><ul><li><p><strong>总结：</strong></p><blockquote><p>加锁可以保证多个进程修改同一块数据时，同一时间只能有一个任务可以进行修改，即串行的修改，没错，速度是慢了，但牺牲了速度却保证了数据安全。</p><p>即使可以用文件共享数据实现进程间通信，但问题是：</p><ol><li>效率低（共享数据基于文件，而文件是硬盘上的数据）</li><li>需要自己加锁处理</li></ol></blockquote></li></ul><p>一种能够兼顾的解决方案：</p><ol><li><p>效率高（多个进程共享一块内存的数据）</p></li><li><p>帮我们处理好锁问题。这就是<code>mutiprocessing</code>模块为我们提供的基于消息的IPC通信机制：队列和管道。</p><blockquote><ol><li>队列和管道都是将数据存放于内存中</li><li>队列又是基于（管道+锁）实现的，可以让我们从复杂的锁问题中解脱出来，我们应该尽量避免使用共享数据，尽可能使用消息传递和队列，避免处理复杂的同步和锁问题，而且在进程数目增多时，往往可以获得更好的可获展性。</li></ol></blockquote></li></ol><h2 id="5-队列"><a href="#5-队列" class="headerlink" title="5.队列"></a>5.队列</h2><blockquote><p>进程彼此之间互相隔离，要实现进程间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的。</p></blockquote><ul><li><p>创建队列的类（底层就是以管道和锁定的方式实现） </p><blockquote><p>Queue([maxsize]):创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。</p></blockquote></li></ul><ul><li><p>参数介绍</p><blockquote><p>  maxsize是队列中允许最大项数，省略则无大小限制。 </p></blockquote></li></ul><ul><li><p>方法介绍</p><blockquote><ol><li>q.put方法用以插入数据到队列中，put方法还有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会抛出Queue.Full异常。如果blocked为False，但该Queue已满，会立即抛出Queue.Full异常。</li><li>q.get方法可以从队列读取并且删除一个元素。同样，get方法有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，那么在等待时间内没有取到任何元素，会抛出Queue.Empty异常。如果blocked为False，有两种情况存在，如果Queue有一个值可用，则立即返回该值，否则，如果队列为空，则立即抛出Queue.Empty异常。</li><li>q.get_nowait():同q.get(False)。</li><li>q.put_nowait():同q.put(False)。</li><li>q.empty():调用此方法时q为空则返回True，该结果不可靠，比如在返回True的过程中，如果队列中又加入了项目。</li><li>q.full()：调用此方法时q已满则返回True，该结果不可靠，比如在返回True的过程中，如果队列中的项目被取走。</li><li>q.qsize():返回队列中目前项目的正确数量，结果也不可靠，理由同q.empty()和q.full()一样。</li><li>q.cancel_join_thread():不会在进程退出时自动连接后台线程。可以防止join_thread()方法阻塞。</li><li>q.close():关闭队列，防止队列中加入更多数据。调用此方法，后台线程将继续写入那些已经入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将调用此方法。关闭队列不会在队列使用者中产生任何类型的数据结束信号或异常。例如，如果某个使用者正在被阻塞在get()操作上，关闭生产者中的队列不会导致get()方法返回错误。</li><li>q.join_thread()：连接队列的后台线程。此方法用于在调用q.close()方法之后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread方法可以禁止这种行为。</li></ol></blockquote></li></ul><ul><li><a href="https://www.ice5.vip/2018/12/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/">生产者消费者模型</a></li></ul><h2 id="6-管道"><a href="#6-管道" class="headerlink" title="6.管道"></a>6.管道</h2><ul><li><p>创建管道的类</p><blockquote><p>  Pipe([duplex]):在进程之间创建一条管道，并返回元组（conn1,conn2）,其中conn1，conn2表示管道两端的连接对象，强调一点：必须在产生Process对象之前产生管道</p></blockquote></li></ul><ul><li><p>参数介绍</p><blockquote><p>dumplex:默认管道是全双工的，如果将duplex射成False，conn1只能用于接收，conn2只能用于发送。</p></blockquote></li></ul><ul><li><p>主要方法</p><blockquote><p>conn1.recv():接收conn2.send(obj)发送的对象。如果没有消息可接收，recv方法会一直阻塞。如果连接的另外一端已经关闭，那么recv方法会抛出EOFError。</p><p>conn1.send(obj):通过连接发送对象。obj是与序列化兼容的任意对象</p></blockquote></li></ul><ul><li><p>其他方法</p><blockquote><p>conn1.close():关闭连接。如果conn1被垃圾回收，将自动调用此方法</p><p>conn1.fileno():返回连接使用的整数文件描述符</p><p>conn1.poll([timeout]):如果连接上的数据可用，返回True。timeout指定等待的最长时限。如果省略此参数，方法将立即返回结果。如果将timeout射成None，操作将无限期地等待数据到达。</p><p>conn1.recv_bytes([maxlength]):接收c.send_bytes()方法发送的一条完整的字节消息。maxlength指定要接收的最大字节数。如果进入的消息，超过了这个最大值，将引发IOError异常，并且在连接上无法进行进一步读取。如果连接的另外一端已经关闭，再也不存在任何数据，将引发EOFError异常。</p><p>conn.send_bytes(buffer [, offset [, size]])：通过连接发送字节数据缓冲区，buffer是支持缓冲区接口的任意对象，offset是缓冲区中的字节偏移量，而size是要发送字节数。结果数据以单条消息的形式发出，然后调用c.recv_bytes()函数进行接收。</p><p>conn1.recv_bytes_into(buffer [, offset]):接收一条完整的字节消息，并把它保存在buffer对象中，该对象支持可写入的缓冲区接口（即bytearray对象或类似的对象）。offset指定缓冲区中放置消息处的字节位移。返回值是收到的字节数。如果消息长度大于可用的缓冲区空间，将引发BufferTooShort异常。</p></blockquote></li></ul><ul><li>基于管道实现进程间通信（与队列的方式是类似的，队列就是管道加锁实现的）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pipe</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(p,name)</span>:</span></span><br><span class="line">    left,right=p</span><br><span class="line">    left.close()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            baozi=right.recv()</span><br><span class="line">            print(<span class="string">'%s 收到包子:%s'</span> %(name,baozi))</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            right.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(seq,p)</span>:</span></span><br><span class="line">    left,right=p</span><br><span class="line">    right.close()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> seq:</span><br><span class="line">        left.send(i)</span><br><span class="line">        <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    left,right=Pipe()</span><br><span class="line"></span><br><span class="line">    c1=Process(target=consumer,args=((left,right),<span class="string">'c1'</span>))</span><br><span class="line">    c1.start()</span><br><span class="line"></span><br><span class="line">    seq=(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">    producer(seq,(left,right))</span><br><span class="line"></span><br><span class="line">    right.close()</span><br><span class="line">    left.close()</span><br><span class="line"></span><br><span class="line">    c1.join()</span><br><span class="line">    print(<span class="string">'主进程'</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：生产者和消费者都没有使用管道的某个端点，就应该将其关闭，如在生产者中关闭管道的右端，在消费者中关闭管道的左端。如果忘记执行这些步骤，程序可能再消费者中的recv()操作上挂起。管道是由操作系统进行引用计数的,必须在所有进程中关闭管道后才能生产EOFError异常。因此在生产者中关闭管道不会有任何效果，付费消费者中也关闭了相同的管道端点。</strong> </p><h2 id="7-数据共享"><a href="#7-数据共享" class="headerlink" title="7.数据共享"></a>7.数据共享</h2><blockquote><p>  基于消息传递的并发编程是未来大势所趋，即便是使用线程，推荐做法也是将程序设计为大量独立的线程集合，通过消息队列交换数据。这样极大地减少了对使用锁定和其他同步手段的需求，还可以扩展到分布式系统中</p></blockquote><p><strong>进程间的通信应该尽量避免使用本节所讲的共享数据的方式：进程间数据是独立的，可以借助于队列或管道实现通信，二者都是基于消息传递的虽然进程间数据独立，但可以通过Manager实现数据共享，事实上Manager的功能远不止于此。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Process,Lock</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(d,lock)</span>:</span></span><br><span class="line">    <span class="comment"># with lock: #不加锁而操作共享的数据,肯定会出现数据错乱</span></span><br><span class="line">        d[<span class="string">'count'</span>]-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> m:</span><br><span class="line">        dic=m.dict(&#123;<span class="string">'count'</span>:<span class="number">100</span>&#125;)</span><br><span class="line">        p_l=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">            p=Process(target=work,args=(dic,lock))</span><br><span class="line">            p_l.append(p)</span><br><span class="line">            p.start()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> p_l:</span><br><span class="line">            p.join()</span><br><span class="line">        print(dic)</span><br><span class="line">        <span class="comment">#&#123;'count': 94&#125;</span></span><br></pre></td></tr></table></figure><h2 id="8-信号量"><a href="#8-信号量" class="headerlink" title="8.信号量"></a>8.信号量</h2><blockquote><p>  互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如饭馆有50个座位，那最多只允许50个人共同吃饭，后面的人只能等饭店里面有人吃完才能再进去，如果指定信号量为50，那么来一个人获得一把锁，计数加1，当计数等于50时，后面的人均需要等待。一旦释放，就有人可以获得一把锁</p><p>  <strong>信号量与进程池的概念很像，但是要区分开，信号量涉及到加锁的概念</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Semaphore</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_wc</span><span class="params">(sem,user)</span>:</span></span><br><span class="line">    sem.acquire()</span><br><span class="line">    print(<span class="string">'%s 占了一个座位'</span> %user)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">3</span>)) <span class="comment"># 模拟每个人吃饭速度不一样，0代表有的人刚坐下就起来了</span></span><br><span class="line">    sem.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sem=Semaphore(<span class="number">5</span>)</span><br><span class="line">    p_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        p=Process(target=go_wc,args=(sem,<span class="string">'user%s'</span> %i,))</span><br><span class="line">        p.start()</span><br><span class="line">        p_l.append(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> p_l:</span><br><span class="line">        i.join()</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;'</span>)</span><br></pre></td></tr></table></figure><h2 id="9-事件"><a href="#9-事件" class="headerlink" title="9.事件"></a>9.事件</h2><blockquote><p>  python线程的事件用于主线程控制其他线程的执行，事件主要提供了三个方法<code>set、wait、clear</code>。</p><p>  事件处理的机制：全局定义了一个“Flag”，如果“Flag”值为 False，那么当程序执行 event.wait 方法时就会阻塞，如果“Flag”值为True，那么event.wait 方法时便不再阻塞。</p><p>  clear：将“Flag”设置为False<br>  set：将“Flag”设置为True</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Event</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> e.is_set(): <span class="comment">#Flase</span></span><br><span class="line">            print(<span class="string">'\033[31m红灯亮\033[0m，car%s等着'</span> %n)</span><br><span class="line">            e.wait()</span><br><span class="line">            print(<span class="string">'\033[32m车%s 看见绿灯亮了\033[0m'</span> %n)</span><br><span class="line">            time.sleep(random.randint(<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            print(<span class="string">'走你,car'</span>, n)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">police_car</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> e.is_set():</span><br><span class="line">            print(<span class="string">'\033[31m红灯亮\033[0m，car%s等着'</span> % n)</span><br><span class="line">            e.wait(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">'灯的是%s，警车走了,car %s'</span> %(e.is_set(),n))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traffic_lights</span><span class="params">(e,inverval)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        time.sleep(inverval)</span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            e.clear() <span class="comment">#e.is_set() ----&gt;False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            e.set()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e=Event()</span><br><span class="line">    <span class="comment"># for i in range(10):</span></span><br><span class="line">    <span class="comment">#     p=Process(target=car,args=(e,i,))</span></span><br><span class="line">    <span class="comment">#     p.start()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p = Process(target=police_car, args=(e, i,))</span><br><span class="line">        p.start()</span><br><span class="line">    t=Process(target=traffic_lights,args=(e,<span class="number">10</span>))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;'</span>)</span><br></pre></td></tr></table></figure><h2 id="10-进程池"><a href="#10-进程池" class="headerlink" title="10.进程池"></a>10.进程池</h2><p>在利用Python进行系统管理的时候，特别是同时操作多个文件目录，或者远程控制多台主机，并行操作可以节约大量的时间。多进程是实现并发的手段之一，需要注意的问题是： </p><ol><li><p>很明显需要并发执行的任务通常要远大于核数</p></li><li><p>一个操作系统不可能无限开启进程，通常有几个核就开几个进程</p></li><li><p>进程开启过多，效率反而会下降（开启进程是需要占用系统资源的，而且开启多余核数目的进程也无法做到并行）</p><blockquote><p>例如当被操作对象数目不大时，可以直接利用multiprocessing中的Process动态成生多个进程，十几个还好，但如果是上百个，上千个。。。手动的去限制进程数量却又太过繁琐，此时可以发挥进程池的功效。 </p></blockquote><blockquote><p>对于远程过程调用的高级应用程序而言，应该使用进程池，Pool可以提供指定数量的进程，供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，就重用进程池中的进程。</p></blockquote></li></ol><ul><li><p><strong>创建进程池的类</strong> </p><blockquote><p>如果指定numprocess为3，则进程池会从无到有创建三个进程，然后自始至终使用这三个进程去执行所有任务，不会开启其他进程 </p></blockquote><blockquote><p>Pool([numprocess  [,initializer [, initargs]]])</p></blockquote></li></ul><ul><li><p>参数介绍</p><blockquote><ol><li>numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值</li><li>initializer：是每个工作进程启动时要执行的可调用对象，默认为None</li><li>initargs：是要传给initializer的参数组</li></ol></blockquote></li></ul><ul><li><p><strong>方法介绍</strong> </p><blockquote><ol><li>p.apply(func [, args [, kwargs]]):在一个池工作进程中执行func(*args,**kwargs),然后返回结果。需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行func函数，必须从不同线程调用p.apply()函数或者使用p.apply_async()</li><li>p.apply_async(func [, args [, kwargs]]):在一个池工作进程中执行func(*args,**kwargs),然后返回结果。此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</li><li>p.close():关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</li><li>P.jion():等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</li></ol></blockquote></li></ul><ul><li>具体应用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步调用apply</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'%s run'</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p=Pool(<span class="number">3</span>) <span class="comment">#进程池中从无到有创建三个进程,以后一直是这三个进程在执行任务</span></span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        res=p.apply(work,args=(i,)) <span class="comment">#同步调用，直到本次任务执行完毕拿到res，等待任务work执行的过程中可能有阻塞也可能没有阻塞，但不管该任务是否存在阻塞，同步调用都会在原地等着，只是等的过程中若是任务发生了阻塞就会被夺走cpu的执行权限</span></span><br><span class="line">        res_l.append(res)</span><br><span class="line">    print(res_l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步调用apply_async</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'%s run'</span> %os.getpid())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p=Pool(<span class="number">3</span>) <span class="comment">#进程池中从无到有创建三个进程,以后一直是这三个进程在执行任务</span></span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        res=p.apply_async(work,args=(i,)) <span class="comment">#同步运行,阻塞、直到本次任务执行完毕拿到res</span></span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#异步apply_async用法：如果使用异步提交的任务，主进程需要使用jion，等待进程池内任务都处理完，然后可以用get收集结果，否则，主进程结束，进程池可能还没来得及执行，也就跟着一起结束了</span></span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_l:</span><br><span class="line">        print(res.get()) <span class="comment">#使用get来获取apply_aync的结果,如果是apply,则没有get方法,因为apply是同步执行,立刻获取结果,也根本无需get</span></span><br></pre></td></tr></table></figure><ul><li>apply_async与apply</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一：使用进程池（异步调用,apply_async）</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print( <span class="string">"msg:"</span>, msg)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pool = Pool(processes = <span class="number">3</span>)</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">"hello %d"</span> %(i)</span><br><span class="line">        res=pool.apply_async(func, (msg, ))   <span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line">        res_l.append(res)</span><br><span class="line">    print(<span class="string">"==============================&gt;"</span>) <span class="comment">#没有后面的join，或get，则程序整体结束，进程池中的任务还没来得及全部执行完也都跟着主进程一起结束了</span></span><br><span class="line"></span><br><span class="line">    pool.close() <span class="comment">#关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成</span></span><br><span class="line">    pool.join()   <span class="comment">#调用join之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束</span></span><br><span class="line"></span><br><span class="line">    print(res_l) <span class="comment">#看到的是&lt;multiprocessing.pool.ApplyResult object at 0x10357c4e0&gt;对象组成的列表,而非最终的结果,但这一步是在join后执行的,证明结果已经计算完毕,剩下的事情就是调用每个对象下的get方法去获取结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l:</span><br><span class="line">        print(i.get()) <span class="comment">#使用get来获取apply_aync的结果,如果是apply,则没有get方法,因为apply是同步执行,立刻获取结果,也根本无需get</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二：使用进程池（同步调用,apply）</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print( <span class="string">"msg:"</span>, msg)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pool = Pool(processes = <span class="number">3</span>)</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">"hello %d"</span> %(i)</span><br><span class="line">        res=pool.apply(func, (msg, ))   <span class="comment">#维持执行的进程总数为processes，当一个进程执行完毕后会添加新的进程进去</span></span><br><span class="line">        res_l.append(res) <span class="comment">#同步执行，即执行完一个拿到结果，再去执行另外一个</span></span><br><span class="line">    print(<span class="string">"==============================&gt;"</span>)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()   <span class="comment">#调用join之前，先调用close函数，否则会出错。执行完close后不会有新的进程加入到pool,join函数等待所有子进程结束</span></span><br><span class="line"></span><br><span class="line">    print(res_l) <span class="comment">#看到的就是最终的结果组成的列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l: <span class="comment">#apply是同步的，所以直接得到结果，没有get()方法</span></span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><h2 id="11-回调函数"><a href="#11-回调函数" class="headerlink" title="11.回调函数"></a>11.回调函数</h2><blockquote><p>  需要回调函数的场景：进程池中任何一个任务一旦处理完了，就立即告知主进程：我好了额，你可以处理我的结果了。主进程则调用一个函数去处理该结果，该函数即回调函数。</p></blockquote><p>我们可以把耗时间（阻塞）的任务放到进程池中，然后指定回调函数（主进程负责执行），这样主进程在执行回调函数时就省去了I/O的过程，直接拿到的是任务的结果。</p><ul><li>爬取猫眼的案例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url,pattern)</span>:</span></span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> (response.text,pattern)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(info)</span>:</span></span><br><span class="line">    page_content,pattern=info</span><br><span class="line">    res=re.findall(pattern,page_content)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">        dic=&#123;</span><br><span class="line">            <span class="string">'index'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'actor'</span>:item[<span class="number">2</span>].strip()[<span class="number">3</span>:],</span><br><span class="line">            <span class="string">'time'</span>:item[<span class="number">3</span>][<span class="number">5</span>:],</span><br><span class="line">            <span class="string">'score'</span>:item[<span class="number">4</span>]+item[<span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        print(dic)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pattern1=re.compile(<span class="string">r'&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;.*?title="(.*?)".*?star.*?&gt;(.*?)&lt;.*?releasetime.*?&gt;(.*?)&lt;.*?integer.*?&gt;(.*?)&lt;.*?fraction.*?&gt;(.*?)&lt;'</span>,re.S)</span><br><span class="line"></span><br><span class="line">    url_dic=&#123;</span><br><span class="line">        <span class="string">'http://maoyan.com/board/7'</span>:pattern1,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p=Pool()</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> url,pattern <span class="keyword">in</span> url_dic.items():</span><br><span class="line">        res=p.apply_async(get_page,args=(url,pattern),callback=parse_page)</span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l:</span><br><span class="line">        i.get()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># res=requests.get('http://maoyan.com/board/7')</span></span><br><span class="line">    <span class="comment"># print(re.findall(pattern,res.text))</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.python.org/dev/library/concurrent.futures.html" target="_blank" rel="noopener">进程池的其他实现方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> multiprocessing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络编程基础</title>
      <link href="//%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>//%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=760021011,2575433862&amp;fm=26&amp;gp=0.jpg" alt="OSI七层协议"></p><p>自从互联网诞生以来，现在市场上所有的程序都是基本网络程序，单击版的应用程序几乎不见了。计算机网络就是负责将各个计算机连接到一起，让网络中的计算机可以互相通信。网络编程就是如何在各个程序中实现两台计算机的通信。</p><a id="more"></a><h1 id="一、C-S架构和B-S架构"><a href="#一、C-S架构和B-S架构" class="headerlink" title="一、C/S架构和B/S架构"></a>一、C/S架构和B/S架构</h1><h2 id="1-B-S架构"><a href="#1-B-S架构" class="headerlink" title="1.B/S架构"></a>1.B/S架构</h2><blockquote><p>  实际上<code>B/S</code>架构也是<code>C/S</code>架构的一种 </p></blockquote><h2 id="2-C-S架构"><a href="#2-C-S架构" class="headerlink" title="2.C/S架构"></a>2.C/S架构</h2><ul><li>硬件硬件C/S架构(如打印机)</li><li>软件C/S架构</li></ul><blockquote><p>  互联网中到处是C/S架构，如你的浏览器就是客户端，你的目标网站就是服务端 </p></blockquote><h1 id="二、网络通信原理"><a href="#二、网络通信原理" class="headerlink" title="二、网络通信原理"></a>二、网络通信原理</h1><h2 id="1-互联网的本质就是一系列的网络协议"><a href="#1-互联网的本质就是一系列的网络协议" class="headerlink" title="1.互联网的本质就是一系列的网络协议"></a>1.互联网的本质就是一系列的网络协议</h2><p>若将计算机比作动物，互联网协议就可以视成计算机界的英语。只要计算机都学会了并遵守互联网协议（Internet Protocol Suite），则所有的计算机都可以按照统一的标准来实现数据的传递任务了。</p><h2 id="2-OSI七层协议"><a href="#2-OSI七层协议" class="headerlink" title="2.OSI七层协议"></a>2.OSI七层协议</h2><p>互联网协议按照功能不同分为<code>OSI</code>七层或<code>TCP/IP</code>五层</p><h2 id="3-TCP-IP五层模型讲解"><a href="#3-TCP-IP五层模型讲解" class="headerlink" title="3.TCP/IP五层模型讲解"></a>3.TCP/IP五层模型讲解</h2><blockquote><p>  将应用层，表示层，会话层并作应用层，从<code>TCP/IP</code>五层协议的角度来阐述每层的由来与功能，只要我们搞清楚了每层的主要协议，就可以理解整个互联网通信的过程及原理。首先，在用户感知到的范围是最上面一层应用层，自上而下每层都依赖于下一层，所以我们就从最下一层开始切入，比较好理解每层都运行特定的协议，越往上越靠近用户，越往下越靠近硬件。</p></blockquote><ul><li>物理层</li></ul><p>物理层功能：主要是基于电器特性发送高低电压(电信号)，高电压对应数字1，低电压对应数字0 </p><ul><li>数据链路层</li></ul><p>数据链路层出现的原因：单纯的电信号0和1没有任何意义，必须规定电信号多少位一组，每组什么意思</p><p>数据链路层的功能：定义了电信号的分组方式</p><blockquote><p>  <strong>以太网协议：</strong></p><ul><li>一组电信号构成一个数据包，叫做 “帧”</li><li>每一数据帧分成：报头<code>head</code>和数据<code>data</code>两部分</li></ul></blockquote><blockquote><p>  <strong>mac地址：</strong> <code>head</code>中包含的源和目标地址由来：<code>ethernet</code>规定接入<code>internet</code>的设备都必须具备网卡，发送端和接收端的地址便是指网卡的地址，即<code>mac</code>地址。每块网卡出厂时都被烧制上一个世界唯一的<code>mac</code>地址，长度为48位2进制，通常由12位16进制数表示（前六位是厂商编号，后六位是流水线号） </p></blockquote><blockquote><p>  <strong>广播：</strong> <code>ethernet</code>采用最原始的方式，广播的方式进行通信，即计算机通信基本靠吼 </p></blockquote><ul><li>网络层</li></ul><p>网络层出现的原因：有了<code>ethernet、mac</code>地址、广播的发送方式之后，世界上的所有计算机就可以彼此通信了，但是问题是世界范围的互联网是由一个个彼此互相隔离的局域网组成的，如果所有的通信都采用以太网的广播方式，那么一台机器发送的包全世界都会收到，这个时候就不仅仅是效率低的问题了，这将是计算机界的一场巨大灾难。</p><blockquote><p>  <strong>IP协议：</strong> </p><ul><li>规定网络地址的协议叫IP协议，它定义的地址称之为IP地址，广泛采用的v4版本即ipv4，它规定网络地址由32位2进制表示</li><li>范围0.0.0.0-255.255.255.255</li><li>一个IP地址通常写成四段十进制数，例：192.168.0.0</li></ul></blockquote><blockquote><p>  <strong>IP地址分成两部分：</strong> </p><ul><li>网络部分：标识子网</li><li>主机部分：标识主机</li></ul></blockquote><blockquote><p>  <strong>子网掩码：</strong></p><p>  表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.10.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。 </p><p>  知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。 </p></blockquote><blockquote><p>  <strong>IP数据包：</strong> IP数据包也分为head和data部分，无须为IP包定义单独的栏位，直接放入以太网包的data部分 </p></blockquote><blockquote><p>  <strong>ARP协议：</strong> 计算机通信基本靠吼，即广播的方式，所有上层的包到最后都要封装上以太网头，然后通过以太网协议发送，在谈及以太网协议时候，我们了解到通信是基于mac的广播方式实现，计算机在发包时，获取自身的mac是容易的，如何获取目标主机的mac，就需要通过ARP协议。</p><ul><li>ARP协议功能：广播的方式发送数据包，获取目标主机的mac地址 </li><li>这个包会以广播的方式在发送端所处的自网内传输，所有主机接收后拆开包，发现目标IP为自己的，就响应，返回自己的mac </li></ul></blockquote><h2 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4.传输层"></a>4.传输层</h2><p>传输层的由来：网络层的IP区分子网，以太网层的mac找到主机，然后大家使用的都是应用程序，但是电脑上可能同时开启QQ，爱奇艺，等多个应用程序，我们通过IP和mac找到了一台特定的主机，如何标识这台主机上的应用程序，答案就是端口，端口即应用程序与网卡关联的编号。</p><p>传输层功能：建立端口到端口的通信。</p><blockquote><p> <strong>TCP协议：</strong> 可靠传输，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。 </p></blockquote><blockquote><p>  <strong>UDP协议：</strong> 不可靠传输，”报头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。 </p></blockquote><h2 id="5-应用层"><a href="#5-应用层" class="headerlink" title="5.应用层"></a>5.应用层</h2><p>应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 </p><p>应用层功能：规定应用程序的数据格式。</p><h2 id="6-Socket层"><a href="#6-Socket层" class="headerlink" title="6.Socket层"></a>6.Socket层</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543962645480&amp;di=cd503454476b6cab27517674fab44428&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D3233222235%2C290543934%26fm%3D214%26gp%3D0.jpg" alt="Socket"></p><p>两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。 </p><p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。 </p><h1 id="三、网络通信的实现"><a href="#三、网络通信的实现" class="headerlink" title="三、网络通信的实现"></a>三、网络通信的实现</h1><blockquote><p>  网络通信实现的四要素</p><ul><li>本机的IP地址</li><li>子网掩码</li><li>网关的IP地址</li><li>DNS的IP地址 </li></ul></blockquote><p><strong>四要素的获取方式：</strong></p><ul><li><p>静态获取：即手动获取</p></li><li><p>动态获取</p><blockquote><p>（1）最前面的”以太网标头”，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。 </p></blockquote><blockquote><p>（2）后面的”IP标头”，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。 </p></blockquote><blockquote><p>（3）最后的”UDP标头”，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。 </p></blockquote></li></ul><p>数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道”这个包是发给我的”，而其他计算机就可以丢弃这个包。 </p><p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个”DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p><p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数</p>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络编程HTTP协议</title>
      <link href="//%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BHTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>//%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BHTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543963917868&amp;di=8e495f6d33a89da9a1238f2f8d270a9c&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.dongcoder.com%2Fup%2Finfo%2F201807%2F20180718234110632745.png" alt="Http"></p><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。 </p><a id="more"></a><h1 id="一、HTTP协议简介"><a href="#一、HTTP协议简介" class="headerlink" title="一、HTTP协议简介"></a>一、HTTP协议简介</h1><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><h1 id="二、HTTP协议的特点"><a href="#二、HTTP协议的特点" class="headerlink" title="二、HTTP协议的特点"></a>二、HTTP协议的特点</h1><p>1.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p>2.基于TCP/IP协议之上的应用层协议。</p><p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>4.无状态：HTTP是一种不保存状态, 即无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。 </p><p>5.基于请求－响应模式：HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543964511479&amp;di=504efde45d15658340fa4266948c85f5&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D4202735791%2C3161582173%26fm%3D214%26gp%3D0.jpg" alt="Http请求-响应模式"></p><p>6.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p><h1 id="三、HTTP请求协议与响应协议"><a href="#三、HTTP请求协议与响应协议" class="headerlink" title="三、HTTP请求协议与响应协议"></a>三、HTTP请求协议与响应协议</h1><blockquote><p>http协议包含由浏览器发送数据到服务器需要遵循的请求协议与服务器发送数据到浏览器需要遵循的请求协议。用于HTTP协议交互的信被为HTTP报文。请求端(客户端)的HTTP报文 做请求报文,响应端(服务器端)的 做响应报文。HTTP报文本身是由多行数据构成的字 文本。 </p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543964905198&amp;di=a8d021f15983a57e3ed9853439864cf2&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201807%2F20180708214241618317.png" alt="Http请求与响应"></p><h2 id="1-请求协议Request"><a href="#1-请求协议Request" class="headerlink" title="1.请求协议Request"></a>1.请求协议Request</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544559844&amp;di=e57146b1833f20acc4ef1083dcbbba72&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201811%2F20181102211532342567.png" alt="Request"></p><h3 id="2-1请求方式"><a href="#2-1请求方式" class="headerlink" title="2.1请求方式"></a>2.1请求方式</h3><ul><li><p>GET与POST请求方式的区别</p><blockquote><ul><li>GET提交的数据会放在URL之后，以<code>?</code>分割URL和传输数据，参数之间以<code>&amp;</code>相连，如login?name=yourname&amp;pwd=123456. POST方法是把提交的数据放在HTTP包的请求体中。</li></ul><ul><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li><li>GET与POST请求在服务端获取请求数据方式不同。</li></ul></blockquote></li></ul><ul><li>GET请求头信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET请求</span><br><span class="line"><span class="comment"># 请求首行</span></span><br><span class="line">    GET / HTTP/1.1\r\n</span><br><span class="line"><span class="comment"># get请求后面的参数</span></span><br><span class="line">GET /?name=lqz&amp;age=18 HTTP/1.1\r\n</span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">Host: 127.0.0.1:8008\r\n</span><br><span class="line">Connection: keep-alive\r\n</span><br><span class="line">Cache-Control: max-age=0\r\n</span><br><span class="line">Upgrade-Insecure-Requests: 1\r\n</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/65.0.3325.181 Safari/537.36\r\n</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate, br\r\n</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9\r\n</span><br><span class="line">Cookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n<span class="string">'</span></span><br><span class="line"><span class="string"># 请求体（get请求，请求体为空）</span></span><br></pre></td></tr></table></figure><ul><li>POST请求头信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求首行</span></span><br><span class="line">POST /?name=lqz&amp;age=18 HTTP/1.1\r\n</span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">Host: 127.0.0.1:8008\r\nConnection: keep-alive\r\nContent-Length: 21\r\nCache-Control: max-age=0\r\nOrigin: http://127.0.0.1:8008\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nReferer: http://127.0.0.1:8008/?name=lqz&amp;age=18\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n</span><br><span class="line"><span class="comment"># 请求体</span></span><br><span class="line">name=lqz&amp;password=123<span class="string">'</span></span><br></pre></td></tr></table></figure><h2 id="2-响应协议Response"><a href="#2-响应协议Response" class="headerlink" title="2.响应协议Response"></a>2.响应协议Response</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543965446960&amp;di=e85eb8f2f482c2234983d6429ae4c4eb&amp;imgtype=0&amp;src=http%3A%2F%2Fstatic.zybuluo.com%2Fwmh1106%2Flfn6x3tpi2s8jtrfij1ibyld%2Fimage_1b6oc0q291kc91tbn10pl8iedcs13.png" alt="Response"></p><h3 id="2-1状态码"><a href="#2-1状态码" class="headerlink" title="2.1状态码"></a>2.1状态码</h3><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td>指示信息，表示请求已接收，继续处理</td></tr><tr><td>2xx</td><td>成功，表示请求已被处理完毕</td></tr><tr><td>3xx</td><td>重定向，要完成请求必须进行更进一步的操作</td></tr><tr><td>4xx</td><td>客户端错误，请求有语法错误或请求服务器无法实现</td></tr><tr><td>5xx</td><td>服务器端错误，服务器处理请求出错</td></tr></tbody></table><h1 id="四、HTTP工作原理"><a href="#四、HTTP工作原理" class="headerlink" title="四、HTTP工作原理"></a>四、HTTP工作原理</h1><blockquote><p>  HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。 </p></blockquote><h2 id="1-HTTP-请求-响应的步骤"><a href="#1-HTTP-请求-响应的步骤" class="headerlink" title="1. HTTP 请求/响应的步骤"></a>1. HTTP 请求/响应的步骤</h2><h3 id="1-1-客户端连接到Web服务器"><a href="#1-1-客户端连接到Web服务器" class="headerlink" title="1.1 客户端连接到Web服务器"></a>1.1 客户端连接到Web服务器</h3><p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="https://www.ice5.vip">https://www.ice5.vip</a></p><h3 id="1-2-发送HTTP请求"><a href="#1-2-发送HTTP请求" class="headerlink" title="1.2 发送HTTP请求"></a>1.2 发送HTTP请求</h3><p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。 </p><h3 id="1-3-服务器接受请求并返回HTTP响应"><a href="#1-3-服务器接受请求并返回HTTP响应" class="headerlink" title="1.3 服务器接受请求并返回HTTP响应"></a>1.3 服务器接受请求并返回HTTP响应</h3><p>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。 </p><h3 id="1-4-释放连接TCP连接"><a href="#1-4-释放连接TCP连接" class="headerlink" title="1.4 释放连接TCP连接"></a>1.4 释放连接TCP连接</h3><p>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接；若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求。</p><h3 id="1-5-客户端浏览器解析HTML内容"><a href="#1-5-客户端浏览器解析HTML内容" class="headerlink" title="1.5 客户端浏览器解析HTML内容"></a>1.5 客户端浏览器解析HTML内容</h3><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。 </p><blockquote><p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p><ul><li>1.浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址</li><li>2.解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接</li><li>3.浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手]的第三个报文的数据发送给服务器</li><li>4.服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器</li><li>5.释放 TCP连接</li><li>6.浏览器将该 html 文本并显示内容</li></ul></blockquote><h1 id="五、URL简介"><a href="#五、URL简介" class="headerlink" title="五、URL简介"></a>五、URL简介</h1><blockquote><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p></blockquote><blockquote><p>  URL,全称是统一资源定位符(Uniform Resource Locator)，对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</p></blockquote><h2 id="1-格式"><a href="#1-格式" class="headerlink" title="1.格式"></a>1.格式</h2><p>　协议：//IP:端口（80）/路径?name=yourname&amp;pwd=123456 </p><blockquote><p>  如：<a href="https://www.ice5.vip/2018/12/03/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/">https://www.ice5.vip/name=myname&amp;pwd=123</a></p><p>  ？之前的是请求路径，？之后的是 <code>GET</code>请求数据部分 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python实现23种设计模式</title>
      <link href="//Python%E5%AE%9E%E7%8E%B023%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>//Python%E5%AE%9E%E7%8E%B023%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268/sign=e2a135117d1ed21b79c929e3956fddae/faedab64034f78f092033e1079310a55b2191ccc.jpg" alt="python"></p><a id="more"></a><h1 id="一、创建类设计模式（5种）"><a href="#一、创建类设计模式（5种）" class="headerlink" title="一、创建类设计模式（5种）"></a>一、创建类设计模式（5种）</h1><h2 id="1-单利模式"><a href="#1-单利模式" class="headerlink" title="1.单利模式"></a>1.单利模式</h2><blockquote><p>单例模式是所有设计模式中比较简单的一类，其定义如下：Ensure a class has only one instance, and provide a global point of access to it.（保证某一个类只有一个实例，而且在全局只有一个访问点）</p></blockquote><blockquote><p>settings.py<br>IP=’1.1.1.1’<br>PORT=3306</p></blockquote><ul><li><p>方式一:自定义元类来实现实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,class_name,class_bases,class_dic)</span>:</span></span><br><span class="line">        super(Mymeta, self).__init__(class_name,class_bases,class_dic)</span><br><span class="line">        <span class="comment"># 造出一个Mysql的空对象</span></span><br><span class="line">        self.__instance=self.__new__(self)</span><br><span class="line">        <span class="comment"># 为空对象从文件中读取数据并完成初始化</span></span><br><span class="line">        self.__init__(self.__instance,settings.IP,settings.PORT)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在调用时会自动触发__call__方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(args)==<span class="number">0</span> <span class="keyword">and</span> len(kwargs)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__instance</span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span><span class="params">(object,metaclass=Mymeta)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ip,port)</span>:</span></span><br><span class="line">        self.ip=ip</span><br><span class="line">        self.port=port</span><br><span class="line">        </span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line"></span><br><span class="line">print(id(obj1))  <span class="comment"># 2028744394680</span></span><br><span class="line">print(id(obj2))  <span class="comment"># 2028744394680</span></span><br></pre></td></tr></table></figure></li><li><p>方式二:自定义装饰器来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    cls.__instance=cls(settings.IP,settings.PORT)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(args)==<span class="number">0</span> <span class="keyword">and</span> len(kwargs)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        <span class="keyword">return</span> cls(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ip,port)</span>:</span></span><br><span class="line">        self.ip=ip</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line"></span><br><span class="line">print(obj1.__dict__)</span><br><span class="line">print(id(obj1))   <span class="comment"># 1452804392832</span></span><br><span class="line">print(id(obj2))   <span class="comment"># 1452804392832</span></span><br></pre></td></tr></table></figure></li><li><p>方式三:普通方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    __instance=<span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ip,port)</span>:</span></span><br><span class="line">        self.ip=ip</span><br><span class="line">        self.port=port</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info_from_conf</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls.__instance=cls(settings.IP,settings.PORT)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"><span class="comment"># 正常实例化一次即占用一份内存资源</span></span><br><span class="line"><span class="comment"># obj1=Mysql('192.168.0.0',3306)</span></span><br><span class="line"><span class="comment"># obj2=Mysql('192.168.0.0',3306)</span></span><br><span class="line"><span class="comment"># obj3=Mysql('192.168.0.0',3306)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(id(obj1))     #2362806290360</span></span><br><span class="line"><span class="comment"># print(id(obj2))     # 2362806290416</span></span><br><span class="line"><span class="comment"># print(id(obj3))     #2362806290528</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用单例模式之后占用同一份内存资源</span></span><br><span class="line">obj1=Mysql.get_info_from_conf()</span><br><span class="line">obj2=Mysql.get_info_from_conf()</span><br><span class="line">obj3=Mysql.get_info_from_conf()</span><br><span class="line"></span><br><span class="line">print(obj1.__dict__)</span><br><span class="line">print(id(obj1))    <span class="comment"># 1591701587896</span></span><br><span class="line">print(id(obj2))    <span class="comment"># 1591701587896</span></span><br><span class="line">print(id(obj3))    <span class="comment"># 1591701587896</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1单利模式的优缺点"><a href="#1-1单利模式的优缺点" class="headerlink" title="1.1单利模式的优缺点"></a>1.1单利模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>由于单例模式要求在全局内只有一个实例，因而可以节省比较多的内存空间  </li><li>全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用  </li><li>单例可长驻内存，减少系统开销。 </li></ul><blockquote><p>缺点</p></blockquote><ul><li>单例模式的扩展是比较困难的  </li><li>赋于了单例以太多的职责，某种程度上违反单一职责原则（六大原则在《设计模式》中普及）  </li><li>单例模式是并发协作软件模块中需要最先完成的，因而其不利于测试   </li><li>单例模式在某种情况下会导致“资源瓶颈”。</li></ul><h3 id="1-2单利模式的应用"><a href="#1-2单利模式的应用" class="headerlink" title="1.2单利模式的应用"></a>1.2单利模式的应用</h3><ul><li>生成全局惟一的序列号  </li><li>访问全局复用的惟一资源，如磁盘、总线等  </li><li>单个对象占用的资源过多，如数据库等  </li><li>系统全局统一管理，如Windows下的Task Manager  </li><li>网站计数器。</li></ul><h2 id="2-工厂模式-简单工厂模式、抽象工厂模式"><a href="#2-工厂模式-简单工厂模式、抽象工厂模式" class="headerlink" title="2.工厂模式(简单工厂模式、抽象工厂模式)"></a>2.工厂模式(简单工厂模式、抽象工厂模式)</h2><blockquote><p>快餐点餐系统想必大家都是用过的。在一个大的触摸显示屏上，有三类可以选择的上餐品：汉堡等主餐、小食、饮料。当我们选择好自己需要的食物，支付完成后，订单就生成了。下面，我们用今天的主角–工厂模式–来生成这些食物的逻辑主体。</p></blockquote><ul><li><p><em>首先</em>，来看主餐的生成（仅以两种汉堡为例）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Burger</span><span class="params">()</span>:</span></span><br><span class="line">    name=<span class="string">""</span></span><br><span class="line">    price=<span class="number">0.0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self,price)</span>:</span></span><br><span class="line">        self.price=price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cheeseBurger</span><span class="params">(Burger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name=<span class="string">"cheese burger"</span></span><br><span class="line">        self.price=<span class="number">10.0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spicyChickenBurger</span><span class="params">(Burger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name=<span class="string">"spicy chicken burger"</span></span><br><span class="line">        self.price=<span class="number">15.0</span></span><br></pre></td></tr></table></figure></li><li><p><em>其次</em>，是小食（内容基本一致）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snack</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">""</span></span><br><span class="line">    price = <span class="number">0.0</span></span><br><span class="line">    type = <span class="string">"SNACK"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.price = price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chips</span><span class="params">(Snack)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"chips"</span></span><br><span class="line">        self.price = <span class="number">6.0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chickenWings</span><span class="params">(Snack)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"chicken wings"</span></span><br><span class="line">        self.price = <span class="number">12.0</span></span><br></pre></td></tr></table></figure></li><li><p><em>然后</em>，是饮料</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beverage</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">""</span></span><br><span class="line">    price = <span class="number">0.0</span></span><br><span class="line">    type = <span class="string">"BEVERAGE"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPrice</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.price = price</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">coke</span><span class="params">(Beverage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"coke"</span></span><br><span class="line">        self.price = <span class="number">4.0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milk</span><span class="params">(Beverage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"milk"</span></span><br><span class="line">        self.price = <span class="number">5.0</span></span><br></pre></td></tr></table></figure></li><li><p><em>接下来</em>，“工厂”就要出现了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foodFactory</span><span class="params">()</span>:</span></span><br><span class="line">    type=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createFood</span><span class="params">(self,foodClass)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.type,<span class="string">" factory produce a instance."</span></span><br><span class="line">        foodIns=foodClass()</span><br><span class="line">        <span class="keyword">return</span> foodIns</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">burgerFactory</span><span class="params">(foodFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.type=<span class="string">"BURGER"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">snackFactory</span><span class="params">(foodFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.type=<span class="string">"SNACK"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">beverageFactory</span><span class="params">(foodFactory)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.type=<span class="string">"BEVERAGE"</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>同样，foodFactory为抽象的工厂类，而burgerFactory，snackFactory，beverageFactory为具体的工厂类。在业务场景中，工厂模式是如何“生产”产品的呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    burger_factory=burgerFactory()</span><br><span class="line">    snack_factorry=snackFactory()</span><br><span class="line">    beverage_factory=beverageFactory()</span><br><span class="line">    cheese_burger=burger_factory.createFood(cheeseBurger)</span><br><span class="line">    <span class="keyword">print</span> cheese_burger.getName(),cheese_burger.getPrice()</span><br><span class="line">    chicken_wings=snack_factorry.createFood(chickenWings)</span><br><span class="line">    <span class="keyword">print</span> chicken_wings.getName(),chicken_wings.getPrice()</span><br><span class="line">    coke_drink=beverage_factory.createFood(coke)</span><br><span class="line">    <span class="keyword">print</span> coke_drink.getName(),coke_drink.getPrice()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">业务中先生成了工厂，然后用工厂中的createFood方法和对应的参数直接生成产品实例。</span><br><span class="line">打印结果如下：</span><br><span class="line">BURGER factory produce a instance.</span><br><span class="line">cheese burger 10.0</span><br><span class="line">SNACK factory produce a instance.</span><br><span class="line">chicken wings 12.0</span><br><span class="line">BEVERAGE factory produce a instance.</span><br><span class="line">coke 4.0</span><br></pre></td></tr></table></figure><ul><li>定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。其通用类图如下。其产品类定义产品的公共属性和接口，工厂类定义产品实例化的“方式”。</li></ul><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4de13625bf85daa0d3a60e710770044c.png" alt="factory" title="&#39;工厂模式 简单工厂模式 抽象工厂模式&#39;">  </p><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/d5eea7768ab2be7321a841958560650a.png" alt="factory" title="&#39;工厂模式 简单工厂模式 抽象工厂模式&#39;"></p><ul><li><p>在上述例子中，工厂在使用前必须实例化。如果，把工厂加个类方法，写成如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">simpleFoodFactory</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createFood</span><span class="params">(cls,foodClass)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Simple factory produce a instance."</span></span><br><span class="line">        foodIns = foodClass()</span><br><span class="line">        <span class="keyword">return</span> foodIns</span><br></pre></td></tr></table></figure></li><li><p>在场景中写成如下形式：</p></li></ul><blockquote><p>省去将工厂实例化的过程.这种模式就叫做<em>简单工厂模式</em></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spicy_chicken_burger=simpleFoodFactory.createFood(spicyChickenBurger)</span><br></pre></td></tr></table></figure><blockquote><p><code>burgerFactory</code>就是具体食物工厂的一层抽象。这种模式，就是<em>抽象工厂模式</em></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createFood方法中必须传入foodClass才可以指定生成的food实例种类，如果，将每一个细致的产品都建立对应的工厂（如cheeseBurger建立对应一个cheeseBurgerFactory），这样，生成食物时，foodClass也不必指定。</span><br></pre></td></tr></table></figure><h3 id="2-1工厂模式的优缺点"><a href="#2-1工厂模式的优缺点" class="headerlink" title="2.1工厂模式的优缺点"></a>2.1工厂模式的优缺点</h3><blockquote><p>优点</p></blockquote><ul><li>工厂模式巨有非常好的封装性，代码结构清晰；在抽象工厂模式中，其结构还可以随着需要进行更深或者更浅的抽象层级调整，非常灵活  </li><li>屏蔽产品类，使产品的被使用业务场景和产品的功能细节可以分而开发进行，是比较典型的解耦框架  </li></ul><blockquote><p>缺点</p></blockquote><ul><li>工厂模式相对于直接生成实例过程要复杂一些，所以，在小项目中，可以不使用工厂模式 </li><li>抽象工厂模式中，产品类的扩展比较麻烦。毕竟，每一个工厂对应每一类产品，产品扩展，就意味着相应的抽象工厂也要扩展  </li></ul><h3 id="2-2工厂模式的应用"><a href="#2-2工厂模式的应用" class="headerlink" title="2.2工厂模式的应用"></a>2.2工厂模式的应用</h3><blockquote><p>当系统实例要求比较灵活和可扩展时，可以考虑工厂模式或者抽象工厂模式实现。比如，<br>在通信系统中，高层通信协议会很多样化，同时，上层协议依赖于下层协议，那么就可以对应建立对应层级的抽象工厂，根据不同的“产品需求”去生产定制的实例。</p></blockquote><h2 id="3-建造者模式"><a href="#3-建造者模式" class="headerlink" title="3.建造者模式"></a>3.建造者模式</h2><h2 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="4.原型模式"></a>4.原型模式</h2><h1 id="二、结构类设计模式（7种）"><a href="#二、结构类设计模式（7种）" class="headerlink" title="二、结构类设计模式（7种）"></a>二、结构类设计模式（7种）</h1><h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h2><h2 id="2-装饰器模式"><a href="#2-装饰器模式" class="headerlink" title="2.装饰器模式"></a>2.装饰器模式</h2><h2 id="3-适配器模式"><a href="#3-适配器模式" class="headerlink" title="3.适配器模式"></a>3.适配器模式</h2><h2 id="4-门面模式"><a href="#4-门面模式" class="headerlink" title="4.门面模式"></a>4.门面模式</h2><h2 id="5-组合模式"><a href="#5-组合模式" class="headerlink" title="5.组合模式"></a>5.组合模式</h2><h2 id="6-享元模式"><a href="#6-享元模式" class="headerlink" title="6.享元模式"></a>6.享元模式</h2><h2 id="7-桥梁模式"><a href="#7-桥梁模式" class="headerlink" title="7.桥梁模式"></a>7.桥梁模式</h2><h1 id="三、行为类设计模式（11种）"><a href="#三、行为类设计模式（11种）" class="headerlink" title="三、行为类设计模式（11种）"></a>三、行为类设计模式（11种）</h1><h2 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1.策略模式"></a>1.策略模式</h2><h2 id="2-责任链模式"><a href="#2-责任链模式" class="headerlink" title="2.责任链模式"></a>2.责任链模式</h2><h2 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h2><h2 id="4-中介者模式"><a href="#4-中介者模式" class="headerlink" title="4.中介者模式"></a>4.中介者模式</h2><h2 id="5-模板模式"><a href="#5-模板模式" class="headerlink" title="5.模板模式"></a>5.模板模式</h2><h2 id="6-迭代器模式"><a href="#6-迭代器模式" class="headerlink" title="6.迭代器模式"></a>6.迭代器模式</h2><h2 id="7-访问者模式"><a href="#7-访问者模式" class="headerlink" title="7.访问者模式"></a>7.访问者模式</h2><h2 id="8-观察者模式"><a href="#8-观察者模式" class="headerlink" title="8.观察者模式"></a>8.观察者模式</h2><h2 id="9-解释器模式"><a href="#9-解释器模式" class="headerlink" title="9.解释器模式"></a>9.解释器模式</h2><h2 id="10-备忘录模式"><a href="#10-备忘录模式" class="headerlink" title="10.备忘录模式"></a>10.备忘录模式</h2><h2 id="11-状态模式"><a href="#11-状态模式" class="headerlink" title="11.状态模式"></a>11.状态模式</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式</title>
      <link href="//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>设计模式是面对各种问题进行提炼和抽象而形成的解决方案。这些设计方案是前人不断试验，考虑了封装性、复用性、效率、可修改、可移植等各种因素的高度总结。模式不是代码，而是某类问题的通用设计解决方案。</p><a id="more"></a><h1 id="一、设计模式与架构、框架的关系"><a href="#一、设计模式与架构、框架的关系" class="headerlink" title="一、设计模式与架构、框架的关系"></a>一、设计模式与<em>架构</em>、<em>框架</em>的关系</h1><ul><li><p>1.软件框架与设计模式的关系</p><blockquote><p>软件框架随着软件工程的发展而出现，所谓的软件框架，是提取了特定领域的软件的共性部分所形成的软件体系，它并不是一个成熟的软件，而更像是一个“半成品”，程序员在框架之上，可以很方便地某些特定领域实现又快又可靠的二次开发。<br>设计模式和软件框架在软件设计中是两个不同的研究领域：A、设计模式如前边的定义所讲，它指的是针对一类问题的解决方法，一个设计模式可应用于不同的框架和被不同的语言所实现；而框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体；B、设计模式相较于框架更容易移植，并且可以用各种语言实现，而软件框架则受限于领域大环境。虽然设计模式和软件框架有很多不同，但在某些方面他们二者是统一的，即重视软件复用，提高开发效率。</p></blockquote></li><li><p>2.软件架构与设计模式的关系</p><blockquote><p>软件架构是个比较大的概念，架构要考虑软件的整体结构、层次划分以及不同部分间的协作和交互等，架构的着眼点偏整体。相比之下，框架和设计模式的范围则具体很多，框架着眼于领域内的解决方法，而设计模式则针对一类问题的解决方案和设计思路。<br>总体来说，软件架构可以由不同的框架和不同的设计模式，再加上特定的构件组合来实现；框架可以根据设计模式结合特定编程语言和环境来实现。设计模式就是解决单一问题的设计思路和解决方法。</p></blockquote></li></ul><h1 id="二、设计模式的意义"><a href="#二、设计模式的意义" class="headerlink" title="二、设计模式的意义"></a>二、设计模式的意义</h1><blockquote><p>由于公司人事的变动，代码非常有可能会被移交，即代码的编写者和维护者很有可能会是不同的人。那么代码的可读性就显得非常重要了。由于高级语言的出现，让机器读懂你的意图已经不是最主要的“矛盾”，而让人读懂你的意图才是最重要。按照设计模式编写的代码，其可读性也会大大提升，利于团队项目的继承和扩展</p></blockquote><h1 id="三、设计模式的种类"><a href="#三、设计模式的种类" class="headerlink" title="三、设计模式的种类"></a>三、设计模式的种类</h1><ul><li><p>1.创建类设计模式（5种）</p><blockquote><p>单例模式、工厂模式（简单工厂模式、抽象工厂模式）、建造者模式、原型模式</p></blockquote></li><li><p>2.结构类设计模式（7种）</p><blockquote><p>代理模式、装饰器模式、适配器模式、门面模式、组合模式、享元模式、桥梁模式</p></blockquote></li><li><p>3.行为类设计模式（11种）</p><blockquote><p>策略模式、责任链模式、命令模式、中介者模式、模板模式、迭代器模式、访问者模式、观察者模式、解释器模式、备忘录模式、状态模式</p></blockquote></li></ul><h1 id="四、设计模式遵循的六大原则"><a href="#四、设计模式遵循的六大原则" class="headerlink" title="四、设计模式遵循的六大原则"></a>四、设计模式遵循的六大原则</h1><blockquote><p>设计模式与设计原则，基本符合规则与原则的关系，设计模式是一个个具体问题的解决方案，设计原则则反映了这些设计模式的指导思想；同时，设计原则可衍生出的设计模式也不仅限于上述介绍到了23种设计模式，任何一种针对特定业务场景中的解决方法，虽然找不到对应的设计模式与之匹配，但若符合设计原则，也可以认为是一种全新的设计模式。从这个意义上来说，设计模式是程序设计方法的形，而设计原则是程序设计方法的神。</p></blockquote><ul><li><p>1.开闭原则（Open Close Principle）</p><blockquote><p>开闭原则是非常基础的一个原则，也有人把开闭原则称为“原则的原则”。前面讲到过，模块分原子模块，低层模块，高层模块，业务层可以认为是最高层次的模块。对扩展开放，意味着模块的行为是可以扩展的，当高层模块需求改变时，我们可以对低层模块进行扩展，使其具有满足高层模块的新功能；对修改关闭，即对低层模块行为进行扩展时，不必改动模块的源代码。最理想的情况是，业务变动时，仅修改业务代码，不修改依赖的模块（类、函数等）代码，通过扩展依赖的模块单元来实现业务变化。</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假设一个原始基类水果类，苹果类是它的派生类，苹果中包含水果的各种属性，如形状、颜色等；另有两个类，农民类和花园类，最高层次（业务层次）为农民在花园种苹果。如果此时，农民决定不种苹果了，改种梨，符合OCP原则的设计应该为基于水果类构建一个新的类，即梨类（对扩展开放），而并不应该去修改苹果类，使它成为一个梨类（对修改关闭）。修改应仅在最高层，即业务层中进行。</span><br></pre></td></tr></table></figure></li><li><p>2.里氏代换原则（Liskov Substitution Principle）</p><blockquote><p>面向对象设计的最为基本原则之一。 里氏替换原则的含义为：任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当子类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，子类也能够在基类的基础上增加新的行为。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于一个鸟类，可以衍生出麻雀、喜鹊、布谷等子类，这些子类都可继承鸟类的鸣叫、飞行、吃食等接口。而对于一个鸡类，虽然它在生物学上属于鸟类，但它不会飞，那么符合LSP设计原则的情况下，鸡就不应该是鸟的一个子类：在鸟类调用飞行接口的地方，鸡类并不能出现。如果鸡类要使用鸟类的接口，应该使用关联关系，而不是继承关系。</span><br></pre></td></tr></table></figure></blockquote></li></ul><ul><li><p>3.依赖倒转原则（Dependence Inversion Principle）</p><blockquote><p>高层模块不应该依赖于低层模块，两者都应该依赖其抽象。抽象不应该依赖于细节，细节应该依赖于抽象。我们将每个不可细分的逻辑叫作原子逻辑，原子逻辑组装，形成低层模块，低层模块组装形成高层模块。依赖倒置原则的含义为，高层模块和低层模块都应该由各自的抽象模块派生而来，同时接口设计应该依赖于抽象，而非具体模块。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">司机与汽车是依赖的关系，司机可以有实习司机类、老司机类等派生；汽车可以有轿车、SUV、卡车等派生类。如果司机中设计一个接口drive，汽车是其参数，符合DIP设计原则的参数，应该是在基类司机类中，将基类汽车类作为参数，而司机的派生类中，drive的参数同样应该为基类汽车类，而不应该是汽车类的任一个派生类。如果规定实习司机只能开轿车等业务逻辑，应该在其接口中进行判断，而不应该将参数替换成子类轿车。</span><br></pre></td></tr></table></figure></blockquote></li><li><p>4.接口隔离原则（Interface Segregation Principle）</p><blockquote><p>类间的依赖关系不应该建立一个大的接口，而应该建立其最小的接口，即客户端不应该依赖那些它不需要的接口。这里的接口的概念是非常重要的。从逻辑上来讲，这里的接口可以指一些属性和方法的集合；从业务上来讲，接口就可以指特定业务下的接口（如函数，URL调用等）。接口应该尽量小，同时仅留给客户端必要的接口，弃用没有必要的接口。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果要根据具体的数据，生成饼图、直方图、表格，这个类该如何设计？如果将生成饼图、直方图、表格等“接口”（这里的接口就是“操作”的集合的概念），写在一个类中，是不符合接口隔离原则的。符合ISP原则的设计应该是设计三个类，每个类分别实现饼图、直方图、表格的绘制。</span><br></pre></td></tr></table></figure></blockquote></li><li><p>5.迪米特法则（最少知识原则）（Demeter Principle）（Least Knowledge Principle）</p><blockquote><p>一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个公司有多个部门，每个部门有多个员工，如果公司CEO要下发通知给每个员工，是调用接口直接通知所有员工么？其实不然，CEO只需和它的“朋友”类部门Leader交流就好，部门Leader再下发通知信息即可。而CEO类不需要与员工进行“交流”。</span><br></pre></td></tr></table></figure></blockquote></li><li><p>6.合成复用原则（Composite Reuse Principle）</p><blockquote><p>尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</p></blockquote></li></ul><h1 id="五、设计模式的优点"><a href="#五、设计模式的优点" class="headerlink" title="五、设计模式的优点"></a>五、设计模式的优点</h1><blockquote><p>设计原则是设计模式的提炼，因而设计原则的好处与设计模式是一致的，即：代码易于理解；更适于团体合作；适应需求变化等。</p></blockquote><h1 id="六、设计模式与设计原则"><a href="#六、设计模式与设计原则" class="headerlink" title="六、设计模式与设计原则"></a>六、设计模式与设计原则</h1><ul><li><p>1.创建类设计模式</p><blockquote><p>工厂模式：工厂方法模式是一种解耦结构，工厂类只需要知道抽象产品类，符合最少知识原则（迪米特法则）；同时符合依赖倒置原则和里氏替换原则；</p></blockquote><blockquote><p>抽象工厂模式：抽象工厂模式具有工厂模式的优点，但同时，如果产品族要扩展，工厂类也要修改，违反了开闭原则；</p></blockquote><blockquote><p>模板模式：优秀的扩展能力符合开闭原则。</p></blockquote></li><li><p>2.结构类设计模式</p><blockquote><p>代理模式：代理模式在业务逻辑中将对主体对象的操作进行封装，合适的应用会符合开闭原则和单一职责原则；事实上，几乎带有解耦作用的结构类设计模式都多少符合些开闭原则；</p></blockquote><blockquote><p>门面模式：门面模式不符合开闭原则，有时不符合单一职责原则，如若不注意，也会触碰接口隔离原则；</p></blockquote><blockquote><p>组合模式：符合开闭原则，但由于一般在拼接树时使用实现类，故不符合依赖倒置原则；</p></blockquote><blockquote><p>桥梁模式：桥梁模式堪称依赖倒置原则的典范，同时也符合开闭原则。</p></blockquote></li><li><p>3.行为类设计模式</p><blockquote><p>策略模式：符合开闭原则，但高层模块调用时，不符合迪米特法则。行为类设计模式多少会符合些单一职责原则，典型的如观察者模式、中介者模式、访问者模式等；</p></blockquote><blockquote><p>责任链模式：符合单一职责原则和迪米特法则；</p></blockquote><blockquote><p>命令模式：符合开闭原则。</p></blockquote><blockquote><p>在不同的业务逻辑中，不同的设计模式也会显示出不同的设计原则特点，从这个意义上来说，设计模式是设计原则的体现，但体现不是固定的，是根据业务而有所不同的。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git的使用</title>
      <link href="//Git/"/>
      <url>//Git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543786942656&amp;di=ee2ca9ccc083cc7790ae46e232d0ef9f&amp;imgtype=0&amp;src=http%3A%2F%2Fs1.51cto.com%2Fwyfs02%2FM00%2F42%2F58%2FwKioL1PXRRvQXJSoAAAmRZX5S78326.jpg" alt="Git" title="&#39;Git&#39;"></p><p>简单地说，Git 究竟是怎样的一个系统呢？GIT是一种<em>版本控制器</em>，更直白的说，团队开发的时候，管理代码使用的软件。Git 有多种使用方式。你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。</p><a id="more"></a><h1 id="一、Git-基础"><a href="#一、Git-基础" class="headerlink" title="一、Git 基础"></a>一、Git 基础</h1><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><blockquote><p>1.1在 Linux 上安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure><blockquote><p>1.2在 Window 上安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问 [Git官网](https://git-scm.com/) 下载windows版，一路“Next”完毕，安装成功！</span><br></pre></td></tr></table></figure><h2 id="2-Git的配置"><a href="#2-Git的配置" class="headerlink" title="2.Git的配置"></a>2.Git的配置</h2><blockquote><p>2.1 设置账户(需要和github账户设置一致,引号内的内容需要更改)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"your-name"</span>    </span><br><span class="line">git config --global user.email <span class="string">"your-email@163.com"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.2 查看设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br><span class="line">user.name=&quot;your-name&quot;</span><br><span class="line">user.email=&quot;your-email@163.com&quot;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-创建版本库-创建完文件夹-在该文件夹内启动git-bash"><a href="#3-创建版本库-创建完文件夹-在该文件夹内启动git-bash" class="headerlink" title="3.创建版本库(创建完文件夹,在该文件夹内启动git bash)"></a>3.创建版本库(创建完文件夹,在该文件夹内启动<code>git bash</code>)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/</span><br><span class="line">mkdir mygit</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><em>注意</em><br><code>.git</code>是一个隐藏的目录，该文件的不要乱动(每一次的操作，都会有记录)<br>仓库建在中文目录下，可能出现问题</p><h2 id="4-查看Git的状态"><a href="#4-查看Git的状态" class="headerlink" title="4.查看Git的状态"></a>4.查看Git的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><blockquote><p>一般来说会显示需要提交的文件(uncommited)和未追踪的文件(untracked)</p><blockquote><p>uncommited：已有的，刚被修改尚未提交的;untracked：原先没有的，新建的 </p></blockquote></blockquote><h2 id="5-添加文件至版本库的步骤"><a href="#5-添加文件至版本库的步骤" class="headerlink" title="5.添加文件至版本库的步骤"></a>5.添加文件至版本库的步骤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;your_file_name&gt;                       <span class="comment"># 将 your_file_name 文件保存在暂存区</span></span><br><span class="line">git commit -m <span class="string">"add your explain for the file"</span>  <span class="comment"># 将 your_file_name 提交到版本库</span></span><br></pre></td></tr></table></figure><h2 id="6-Git删除文件（夹）"><a href="#6-Git删除文件（夹）" class="headerlink" title="6.Git删除文件（夹）"></a>6.Git删除文件（夹）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm your_file_name   <span class="comment"># 删除文件</span></span><br><span class="line">git rm -r folder        <span class="comment"># 删除文件夹</span></span><br></pre></td></tr></table></figure><blockquote><p>git rm和直接删除的区别在于git rm会将此文件的操作记录删除，而直接删除仅仅是删除了物理文件，没有删除和此文件相关的记录。git rm后会在版本库产生区别（有操作日志），而直接删除没有。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt   &gt;&gt;&gt;    git commit -m <span class="string">'delete a file'</span></span><br><span class="line">rm test.txt       &gt;&gt;&gt;    git commit -am <span class="string">'delete a file'</span></span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em>：命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p></blockquote><h1 id="二、Git-远程仓库之团队合作"><a href="#二、Git-远程仓库之团队合作" class="headerlink" title="二、Git 远程仓库之团队合作"></a>二、Git 远程仓库之团队合作</h1><h2 id="1-Git查看操作日志"><a href="#1-Git查看操作日志" class="headerlink" title="1.Git查看操作日志"></a>1.Git查看操作日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>                                          <span class="comment"># 查看项目日志</span></span><br><span class="line">git <span class="built_in">log</span> file                                     <span class="comment"># 查看某个文件日志</span></span><br><span class="line">git <span class="built_in">log</span>                                          <span class="comment"># 查看本目录日志</span></span><br><span class="line">git reflog                                       <span class="comment"># 查看详细做了啥</span></span><br><span class="line">git <span class="built_in">log</span> --decorate --graph --oneline --all       <span class="comment"># 显示当前及之前的版本号</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline                         <span class="comment"># 将版本历史显示为一行，历史版本号全部显示</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit         <span class="comment"># 将版本历史显示为一行，历史版本号部分显示</span></span><br><span class="line">git <span class="built_in">log</span> --graph                                  <span class="comment"># 查看分支合并图</span></span><br></pre></td></tr></table></figure><h2 id="2-Git版本回退"><a href="#2-Git版本回退" class="headerlink" title="2.Git版本回退"></a>2.Git版本回退</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard <span class="string">"head^^^"</span></span><br><span class="line">git reset --hard 123abc</span><br></pre></td></tr></table></figure><blockquote><p><code>--hard</code>代表的是当前版本，后面的^符号代表的是退回到第几个版本，几个^符号就代表退回第几个;<code>123abc</code>代表的是版本号，保证版本号是唯一的即可  </p></blockquote><h2 id="3-Git还原"><a href="#3-Git还原" class="headerlink" title="3.Git还原"></a>3.Git还原</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- myfile.md</span><br></pre></td></tr></table></figure><h2 id="4-Git分支"><a href="#4-Git分支" class="headerlink" title="4.Git分支"></a>4.Git分支</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch          <span class="comment"># 查看分支</span></span><br><span class="line">git branch dev      <span class="comment"># 创建分支</span></span><br><span class="line">git checkout dev    <span class="comment"># 切换分支</span></span><br><span class="line">git merge dev       <span class="comment"># 合并分支</span></span><br></pre></td></tr></table></figure><h2 id="5-Git远程仓库配置"><a href="#5-Git远程仓库配置" class="headerlink" title="5.Git远程仓库配置"></a>5.Git远程仓库配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote </span><br><span class="line">git remote -v                               <span class="comment"># 查看名称和详细地址</span></span><br><span class="line">git remote remove &lt;远程地址&gt;                  <span class="comment"># 删除远程仓库</span></span><br><span class="line">git remote add &lt;远程仓库别名&gt; &lt;远程仓库地址&gt;   <span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote rename &lt;旧名称&gt; &lt;新名称&gt;          <span class="comment"># 修改远程仓库</span></span><br></pre></td></tr></table></figure><h2 id="6-Git推送本地分支代码到远程仓库"><a href="#6-Git推送本地分支代码到远程仓库" class="headerlink" title="6.Git推送本地分支代码到远程仓库"></a>6.Git推送本地分支代码到远程仓库</h2><blockquote><p>6.1创建项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https地址:https://github.com/smart1san/smart1san.github.io.git</span><br><span class="line">SSH地址:  git@github.com:smart1san/smart1san.github.io.git</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.2将代码推到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/smart1san.git   <span class="comment"># 首先为本地库添加远程库</span></span><br><span class="line">git push origin master                                   <span class="comment"># 将本地的版本(默认是master)，推到代号为origin的远程库</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="7-Git团队合作"><a href="#7-Git团队合作" class="headerlink" title="7.Git团队合作"></a>7.Git团队合作</h2><blockquote><p>7.1需要<code>clone</code>一份代码到自己的本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/smart1san/smart1san.github.io.git</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.2在本地创建和远程分支对应的分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.3在本地分支完成任务后，可以试图用以下代码推送自己的修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.4若推送失败，则表明远程分支比本地更新，需要先用<code>git pull</code>试图合并<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.5若<code>pull</code>失败并提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令创建链接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=&lt;远程主机名&gt;/&lt;远程分支名&gt;  &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.6若合并有冲突，则解决冲突，并在本地提交<code>（add =&gt; commit）</code><br>7.7在没有冲突或者解决掉冲突后，再用<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;</code>推送就能成功</p></blockquote><h1 id="三、配置公钥免密登录"><a href="#三、配置公钥免密登录" class="headerlink" title="三、配置公钥免密登录"></a>三、配置公钥免密登录</h1><h2 id="1-配置ssh格式的远程仓库"><a href="#1-配置ssh格式的远程仓库" class="headerlink" title="1.配置ssh格式的远程仓库"></a>1.配置ssh格式的远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远程仓库名&gt; &lt;远程仓库地址&gt;</span><br></pre></td></tr></table></figure><h2 id="2-在用户主目录下，看看有没有-ssh目录，如果有，再看看这个目录下有没有id-rsa-私钥-和id-rsa-pub-公钥-这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git-Bash）-执行下一步"><a href="#2-在用户主目录下，看看有没有-ssh目录，如果有，再看看这个目录下有没有id-rsa-私钥-和id-rsa-pub-公钥-这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git-Bash）-执行下一步" class="headerlink" title="2.在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa(私钥)和id_rsa.pub(公钥)这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash）,执行下一步"></a>2.在用户主目录下，看看有没有<code>.ssh</code>目录，如果有，再看看这个目录下有没有<code>id_rsa(私钥)</code>和<code>id_rsa.pub(公钥)</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开<code>Shell（Windows下打开Git Bash）</code>,执行下一步</h2><blockquote><p>windows位置：‪C:\Users\用户名.ssh\id_rsa.pub</p></blockquote><blockquote><p>Linux位置：cat ~/.ssh/id_rsa.pub</p></blockquote><h2 id="3-创建ssh-key"><a href="#3-创建ssh-key" class="headerlink" title="3.创建ssh key"></a>3.创建<code>ssh key</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@163.com"</span></span><br></pre></td></tr></table></figure><h2 id="4-获得key的内容，复制下来，添加到gitHub的SSH-key中"><a href="#4-获得key的内容，复制下来，添加到gitHub的SSH-key中" class="headerlink" title="4.获得key的内容，复制下来，添加到gitHub的SSH key中"></a>4.获得<code>key</code>的内容，复制下来，添加到<code>gitHub</code>的<code>SSH key</code>中</h2><p><img src="https://img-blog.csdn.net/20180610011201583" alt="SSH" title="&#39;ssh&#39;"></p><blockquote><p>4.1 settings<br>4.2 SSH and GPG keys<br>4.3 ADD SSH key</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django基础知识</title>
      <link href="//Django/"/>
      <url>//Django/</url>
      
        <content type="html"><![CDATA[<p><strong>Web框架</strong>（Web framework）是一种开发框架，用来支持动态网站、网络应用和网络服务的开发。这大多数的web框架提供了一套开发和部署网站的方式，也为web行为提供了一套通用的方法。Python的WEB框架有Django、Tornado、Flask 等多种，Django相较与其他WEB框架其<strong>优势</strong>为：大而全，框架本身集成了ORM、模型绑定、模板引擎、缓存、Session等诸多功能。</p><a id="more"></a><h1 id="一、Django-简介"><a href="#一、Django-简介" class="headerlink" title="一、Django 简介"></a>一、Django 简介</h1><h2 id="1-Http-协议特性"><a href="#1-Http-协议特性" class="headerlink" title="1.Http 协议特性"></a>1.Http 协议特性</h2><ul><li>TCP/IP协议之上的应用层协议</li><li>基于Request-Response模式</li><li>无状态保存</li><li>无连接</li></ul><h2 id="2-MVC和MTV"><a href="#2-MVC和MTV" class="headerlink" title="2.MVC和MTV"></a>2.MVC和MTV</h2><h3 id="①-MVC"><a href="#①-MVC" class="headerlink" title="① MVC"></a>① MVC</h3><ul><li>M：Model（存取数据）</li><li>V：View（取到数据展示给用户）</li><li>C：Controller（分配工作给M和V）</li></ul><h3 id="②-MTV"><a href="#②-MTV" class="headerlink" title="② MTV"></a>② MTV</h3><ul><li>M：Model（存取数据）</li><li>T：Template（取到数据展示给用户）</li><li>V：View（从M处取数据，返回给T）</li><li>URL控制器</li></ul><h2 id="3-Django请求生命周期"><a href="#3-Django请求生命周期" class="headerlink" title="3.Django请求生命周期"></a>3.Django请求生命周期</h2><p>Browser — Web服务器（wsgi协议）— Middleware — URL路由 —View === ①从DataBase取数据；②将数据渲染至template</p><h1 id="二、路由"><a href="#二、路由" class="headerlink" title="二、路由"></a>二、路由</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>本质是<strong>URL与要为该URL调用的视图函数之间的映射表</strong> </p><h2 id="2-简单路由配置"><a href="#2-简单路由配置" class="headerlink" title="2.简单路由配置"></a>2.简单路由配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">urlpatterns = [</span><br><span class="line">     url(<span class="string">r"pattern"</span>,views.视图函数,&#123;key:value&#125;,name=别名),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">注意:urlpatterns从上至下逐行匹配,成功不再往下执行</span><br></pre></td></tr></table></figure><h2 id="3-有名分组"><a href="#3-有名分组" class="headerlink" title="3.有名分组"></a>3.有名分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">url(<span class="string">"index/(?P&lt;num&gt;pattern)"</span>,views.index),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request,num=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line">    </span><br><span class="line">注意：捕获的值作为关键字参数而不是位置参数传递给视图函数</span><br></pre></td></tr></table></figure><h2 id="4-无名分组"><a href="#4-无名分组" class="headerlink" title="4. 无名分组"></a>4. 无名分组</h2><h2 id="5-路由分发"><a href="#5-路由分发" class="headerlink" title="5.路由分发"></a>5.路由分发</h2><p>① 主URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url,include</span><br><span class="line"># from django.urls import path,re_path,include  // 2.+版本</span><br><span class="line">from app01 import views</span><br><span class="line">from app01 import urls</span><br><span class="line">urlpatterns = [ </span><br><span class="line">　　path(&apos;app01/&apos;,include(&apos;app01.urls&apos;)),</span><br><span class="line">　　path(&apos;app01/&apos;, include(urls)),</span><br><span class="line">]</span><br><span class="line">注意:include() 括号中建议写app01.urls的方式,而不是直接写urls</span><br></pre></td></tr></table></figure><p>② app01中的URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path  // <span class="number">2.</span>+版本</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r"pattern"</span>,views.视图函数,&#123;key:value&#125;,name=别名),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="6-路由反向解析"><a href="#6-路由反向解析" class="headerlink" title="6.路由反向解析"></a>6.路由反向解析</h2><ul><li>应用:获得URL 的最终形式，用于嵌入到生成的内容中（视图中和显示给用户的URL等）或者用于处理服务器端的导航（重定向等）。</li></ul><p>①urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r"有名分组"</span>,views.视图函数,&#123;key:value&#125;,name=别名),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>②html代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &quot;别名&quot; 参数1 参数2 ... %&#125;</span><br></pre></td></tr></table></figure><p>③视图函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=reverse(&apos;test&apos;)</span><br><span class="line">url=reverse(&apos;test&apos;,args=(10,20))</span><br></pre></td></tr></table></figure><h2 id="7-名称空间"><a href="#7-名称空间" class="headerlink" title="7.名称空间"></a>7.名称空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由于name没有作用域，Django在反解URL时，会在项目全局顺序搜索，当查找到第一个name指定URL时，立即返回</span><br><span class="line">在开发项目时，会经常使用name属性反解出URL，当不小心在不同的app的urls中定义相同的name时，可能会导致URL反解错误，为了避免这种事情发生，引入了命名空间。</span><br></pre></td></tr></table></figure><ul><li>解决方式：在路由分发时，指定名称空间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">url(r&apos;app01/&apos;,include(&apos;app01.urls&apos;,namespace=&apos;app01&apos;)),</span><br><span class="line">url(r&apos;app02/&apos;,include(&apos;app02.urls&apos;,namespace=&apos;app02&apos;))，</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">视图函数</span><br><span class="line">url=reverse(&apos;app02:index&apos;)</span><br><span class="line">url2=reverse(&apos;app01:index&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模板</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;app02:index&apos;%&#125;&quot;&gt;LOL NB&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="8-Django-2-版的path"><a href="#8-Django-2-版的path" class="headerlink" title="8.Django 2.+版的path"></a>8.Django 2.+版的path</h2><p>①模板</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.urls import path  </span></span><br><span class="line"><span class="xml">from app01 import views  </span></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path(r'index/<span class="tag">&lt;<span class="name">int:year</span>&gt;</span>/<span class="tag">&lt;<span class="name">slug</span>&gt;</span>/', views.视图函数),</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><p>②基本规则</p><ul><li>使用尖括号(<code>&lt;&gt;</code>)从url中捕获值。</li><li>捕获值中可以包含一个转化器类型（converter type），比如使用 <code>&lt;int:name&gt;</code> 捕获一个整数变量。若果没有转化器，将匹配任何字符串，当然也包括了 <code>/</code> 字符。</li><li>无需添加前导斜杠。</li></ul><p>③path转换器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span><br><span class="line">int,匹配正整数，包含<span class="number">0</span></span><br><span class="line">slug,匹配字母、数字以及横杠、下划线组成的字符串</span><br><span class="line">uuid,匹配格式化的uuid，如 <span class="number">075194</span>d3<span class="number">-6885</span><span class="number">-417</span>e-a8a8<span class="number">-6</span>c931e272f00</span><br><span class="line">path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span><br></pre></td></tr></table></figure><p>④自定义注册转换器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对于一些复杂或者复用的需要，可以定义自己的转化器。转化器是一个类或接口，它的要求有三点：</span><br><span class="line"></span><br><span class="line">  regex 类属性，字符串类型</span><br><span class="line">  to_python(self, value) 方法，value是由类属性 regex 所匹配到的字符串，返回具体的Python变量值，以供Django传递到对应的视图函数中。</span><br><span class="line">  to_url(self, value) 方法，和 to_python 相反，value是一个具体的Python变量值，返回其字符串，通常用于url反向引用。</span><br></pre></td></tr></table></figure><ul><li>自定义文件</li></ul><p>app01/Myconverter.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConverter</span>:</span>  </span><br><span class="line">    regex = <span class="string">"pattern"</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span>  </span><br><span class="line">        <span class="keyword">return</span> int(value)  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%04d'</span> % value</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> register_converter, path  </span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> converters, views  </span><br><span class="line">①注册</span><br><span class="line">register_converter(converters.MyConverter, <span class="string">'type'</span>) </span><br><span class="line">②使用</span><br><span class="line">urlpatterns = [  </span><br><span class="line">    path(<span class="string">'articles/&lt;type:year&gt;/'</span>, views.year_archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="三、视图"><a href="#三、视图" class="headerlink" title="三、视图"></a>三、视图</h1><h2 id="1-三剑客"><a href="#1-三剑客" class="headerlink" title="1.三剑客"></a>1.三剑客</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.shortcuts import render, HttpResponse, redirect</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">视图层，熟练掌握两个对象即可：请求对象(request)和响应对象(HttpResponse)</span></span><br></pre></td></tr></table></figure><h2 id="2-HttpRequest对象"><a href="#2-HttpRequest对象" class="headerlink" title="2. HttpRequest对象"></a>2. HttpRequest对象</h2><ul><li>Django将请求报文中的请求行、首部信息、内容主体封装成 HttpRequest 类中的属性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">request.GET</span><br><span class="line">类似于字典的对象,包含 HTTP GET 的所有参数;QueryDict</span><br><span class="line"></span><br><span class="line">request.POST</span><br><span class="line">类似于字典的对象,如果请求中包含表单数据,则将这些数据封装成 QueryDict 对象</span><br><span class="line">注意：键值对的值是多个的时候,比如checkbox类型的input标签，select标签，需要用： request.POST.getlist(<span class="string">"hobby"</span>)</span><br><span class="line"></span><br><span class="line">request.body</span><br><span class="line">一个字符串，代表请求报文的主体。在处理非 HTTP 形式的报文时非常有用，例如：二进制图片、XML,Json等。但是，如果要处理表单数据的时候，推荐还是使用 HttpRequest.POST </span><br><span class="line"></span><br><span class="line">request.path</span><br><span class="line">一个字符串，表示请求的路径组件（不含域名）。</span><br><span class="line">　　例如：<span class="string">"/music/bands/the_beatles/"</span></span><br><span class="line">　　</span><br><span class="line">request.method</span><br><span class="line">一个字符串，表示请求使用的HTTP 方法。必须使用大写。</span><br><span class="line"></span><br><span class="line">request.FILES</span><br><span class="line">一个类似于字典的对象，包含所有的上传文件信息。FILES 中的每个键为&lt;input type=<span class="string">"file"</span> name=<span class="string">""</span> &gt; 中的name，值则为对应的数据。</span><br><span class="line">　　 <span class="comment"># 注意，FILES 只有在请求的方法为POST 且提交的&lt;form&gt; 带有enctype="multipart/form-data" 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象。</span></span><br><span class="line">　　 </span><br><span class="line">request.COOKIES</span><br><span class="line">一个标准的Python 字典，包含所有的cookie。键和值都为字符串。</span><br><span class="line"></span><br><span class="line">request.session</span><br><span class="line">一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">request.encoding</span><br><span class="line">一个字符串，表示提交的数据的编码方式（如果为 <span class="keyword">None</span> 则表示使用 DEFAULT_CHARSET 的设置，默认为 <span class="string">'utf-8'</span>）。</span><br><span class="line">    这个属性是可写的，你可以修改它来修改访问表单数据使用的编码。</span><br><span class="line">    接下来对属性的任何访问（例如从 GET 或 POST 中读取数据）将使用新的 encoding 值。</span><br><span class="line">    若你知道表单数据的编码不是 DEFAULT_CHARSET ，则使用它。</span><br><span class="line">    </span><br><span class="line">request.META</span><br><span class="line"> 　　一个标准的 Python 字典，包含所有的 HTTP 首部。具体的头部信息取决于客户端和服务器，下面是一些示例：</span><br><span class="line">　　取值：</span><br><span class="line"></span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME 类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-Type。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送的HTTP Host 头部。</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端的user-agent 字符串。</span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP 地址。</span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">"GET"</span> 或<span class="string">"POST"</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，</span><br><span class="line">    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line">    </span><br><span class="line">request.user(用户认证组件下使用)</span><br><span class="line">一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。</span><br><span class="line">如果用户当前没有登录，user 将设置为 django.contrib.auth.models.AnonymousUser 的一个实例。可以通过 is_authenticated() 区分它们。</span><br></pre></td></tr></table></figure><ul><li>request常用方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">request.get_full_path()</span><br><span class="line">返回 path，如果可以将加上查询字符串。</span><br><span class="line">例如：<span class="string">"/music/bands/the_beatles/?print=true"</span></span><br><span class="line"></span><br><span class="line">request.path()</span><br><span class="line">返回：/music/bands/the_beatles</span><br><span class="line"></span><br><span class="line">request.is_ajax()</span><br><span class="line">若请求是通过 XMLHttpRequest 发起的,则返回 <span class="keyword">True</span>,方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串<span class="string">'XMLHttpRequest'</span></span><br><span class="line">大部分现代的 JavaScript 库都会发送这个头部。若自己编写的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 is_ajax() 可以工作。</span><br><span class="line">　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware，</span><br><span class="line">   你应该使用 vary_on_headers(<span class="string">'HTTP_X_REQUESTED_WITH'</span>) 装饰你的视图以让响应能够正确地缓存。</span><br></pre></td></tr></table></figure><h2 id="3-HttpResponse-对象"><a href="#3-HttpResponse-对象" class="headerlink" title="3.HttpResponse 对象"></a>3.HttpResponse 对象</h2><ul><li>响应三剑客</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse, redirect</span><br></pre></td></tr></table></figure><ul><li>HttpResponse()</li></ul><p>括号内直接跟上字符串作为响应体</p><ul><li>render()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render(request, template_name[, context]）</span><br><span class="line"></span><br><span class="line">     request： 用于生成响应的请求对象。</span><br><span class="line">     template_name：要使用的模板的完整名称，可选的参数</span><br><span class="line">     context：添加到模板上下文的一个字典。默认是一个空字典。如果字典中的某个值是可调用的，视图将在渲染模板之前调用它。</span><br><span class="line"></span><br><span class="line">render方法就是将一个模板页面中的模板语法进行渲染，最终渲染成一个html页面作为响应体</span><br></pre></td></tr></table></figure><ul><li>redirect()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跳转至指定的 URL</span><br></pre></td></tr></table></figure><ul><li>重定向301和302的异同点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">相同点：浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址</span><br><span class="line">不同点：</span><br><span class="line">301表示旧地址A的资源已经被永久地移除了（该资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；</span><br><span class="line">302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301</span><br><span class="line"></span><br><span class="line">重定向原因：</span><br><span class="line">（1）网站调整（如改变网页目录结构）；</span><br><span class="line">（2）网页被移到一个新地址；</span><br><span class="line">（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。</span><br><span class="line">    这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的</span><br><span class="line">    网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</span><br></pre></td></tr></table></figure><h2 id="4-JsonResponse"><a href="#4-JsonResponse" class="headerlink" title="4.JsonResponse"></a>4.JsonResponse</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line"><span class="comment"># import json</span></span><br><span class="line"><span class="comment"># data=&#123;'name':'lqz','age':18&#125;</span></span><br><span class="line"><span class="comment"># data1=['lqz','egon']</span></span><br><span class="line"><span class="comment">#     return HttpResponse(json.dumps(data1))</span></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'lqz'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">data1 = [<span class="string">'lqz'</span>, <span class="string">'egon'</span>]</span><br><span class="line"><span class="keyword">return</span> JsonResponse(data)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(data1,safe=<span class="keyword">False</span>)  <span class="comment"># safe=True(默认) 表示只有字典才可以被序列化</span></span><br><span class="line">向前端返回一个json格式字符串的两种方式</span><br></pre></td></tr></table></figure><h2 id="5-CBV和FBV"><a href="#5-CBV和FBV" class="headerlink" title="5.CBV和FBV"></a>5.CBV和FBV</h2><ul><li>CBV:Class base view —基于类的视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPublish</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request)</span><br><span class="line">        print(args)</span><br><span class="line">        print(kwargs)</span><br><span class="line">        <span class="comment"># 可以写类似装饰器的东西，在前后加代码</span></span><br><span class="line">        obj=super().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        request</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure><ul><li>FBV:Function base view 基于函数的视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"hi"</span>)</span><br></pre></td></tr></table></figure><h2 id="6-简单文件上传"><a href="#6-简单文件上传" class="headerlink" title="6.简单文件上传"></a>6.简单文件上传</h2><ul><li>html 文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>py 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.files.uploadedfile <span class="keyword">import</span> InMemoryUploadedFile</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(request.FILES)</span><br><span class="line">    print(type(request.FILES.get(<span class="string">'file_name'</span>)))</span><br><span class="line">    file_name=request.FILES.get(<span class="string">'file_name'</span>).name</span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">'wb'</span>)<span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> request.FILES.get(<span class="string">'file_name'</span>).chunks():</span><br><span class="line">                f.write(i)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Ok"</span>)</span><br></pre></td></tr></table></figure><h1 id="四、模板"><a href="#四、模板" class="headerlink" title="四、模板"></a>四、模板</h1><h2 id="1-template-html"><a href="#1-template-html" class="headerlink" title="1.template.html"></a>1.template.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 写非逻辑代码 &#125;&#125;  ---变量</span><br><span class="line">&#123;% 写逻辑代码 %&#125;    ---标签---if/for/extract</span><br><span class="line"></span><br><span class="line">服务器传到前端的数据(data)如果是字典的取值方式(深度查询): data.字段</span><br></pre></td></tr></table></figure><h2 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2.过滤器"></a>2.过滤器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; obj | filter__name:param &#125;&#125;  变量名 | 过滤器名:参数</span><br><span class="line"></span><br><span class="line">&#123;&#123; obj | safe &#125;&#125;  告诉浏览器是安全的,可以直接进行渲染,不必转义</span><br><span class="line">xss攻击：跨站脚本攻击</span><br><span class="line">可以在视图函数里处理</span><br><span class="line">from django.utils.safestring import mark_safe</span><br><span class="line">obj=mark_safe(obj)</span><br><span class="line"></span><br><span class="line">&#123;&#123; value|default:"nothing" &#125;&#125; 变量是false或者为空,使用给定的默认值</span><br><span class="line">&#123;&#123; value|length &#125;&#125; 返回值的长度.它对字符串和列表都起作用</span><br><span class="line">&#123;&#123; value|filesizeformat &#125;&#125; 将值格式化为"人类可读的"文件尺寸</span><br><span class="line">&#123;&#123; value|date:"Y-m-d" &#125;&#125; 显示value的时间</span><br><span class="line">&#123;&#123; value|slice:"2:-1" &#125;&#125; 将value切分</span><br><span class="line">&#123;&#123; value|truncatechars:9 &#125;&#125; 如果字符串字符多于指定的字符数量,那么会被截断,截断的字符串将以可翻译的省略号序列（“...”）结尾</span><br><span class="line">&#123;&#123; value|truncatewords:2 &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他过滤器：https://www.cnblogs.com/liuqingzheng/articles/9509806.html</span><br></pre></td></tr></table></figure><h2 id="3-标签"><a href="#3-标签" class="headerlink" title="3.标签"></a>3.标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% empty %&#125; 只能在for循环当中使用</span><br><span class="line"></span><br><span class="line">//起别名</span><br><span class="line">&#123;% with total=business.employees.count %&#125;</span><br><span class="line">&#123;&#123; total &#125;&#125; employee&#123;&#123; total|pluralize &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br><span class="line"></span><br><span class="line">跨站请求伪造保护</span><br><span class="line">&#123;% csrf_token%&#125;</span><br></pre></td></tr></table></figure><h2 id="4-自定义templatetags"><a href="#4-自定义templatetags" class="headerlink" title="4.自定义templatetags"></a>4.自定义templatetags</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">①在app01写创建templatetags目录(名字不可变动)</span><br><span class="line">②创建 my_tags.py 文件</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">register=template.Library() //register 名字是固定的</span><br><span class="line"></span><br><span class="line">// 自定义标签</span><br><span class="line">// @register.simple_tag</span><br><span class="line">// <span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">(v1,v2)</span>:</span></span><br><span class="line">//   <span class="keyword">return</span>  v1 * v2</span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_input</span><span class="params">(id,arg)</span>:</span></span><br><span class="line">    result = <span class="string">"&lt;input type='text'&gt;"</span> </span><br><span class="line">    <span class="keyword">return</span> mark_safe(result)</span><br><span class="line">        </span><br><span class="line">// 自定义过滤器</span><br><span class="line"><span class="meta">@register.filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">(v1,v2)</span>:</span></span><br><span class="line"><span class="keyword">return</span>  v1 * v2</span><br><span class="line">③在使用自定义simple_tag和filter的html文件中导入之前创建的 my_tags.py</span><br><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line">&#123;&#123; num|demo2:<span class="number">2</span> &#125;&#125;</span><br><span class="line">&#123;&#123; num|demo2:<span class="string">"[22,333,4444]"</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% demo1 <span class="number">2</span> <span class="number">5</span> %&#125;  参数不限,但不能放在<span class="keyword">if</span> <span class="keyword">for</span>语句中</span><br><span class="line">&#123;% demo1i num <span class="number">5</span> %&#125;</span><br></pre></td></tr></table></figure><p>​<br>    注意：在settings.py中的INSTALLED_APPS配置当前app,不然Django无法找到自定义的simple_tag</p><h2 id="5-模板导入和继承"><a href="#5-模板导入和继承" class="headerlink" title="5.模板导入和继承"></a>5.模板导入和继承</h2><p>①导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include 'template.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; block.super &#125;&#125;  // 复用模板的 block 组件</span><br></pre></td></tr></table></figure><p>②继承</p><ul><li>模板 html 文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;My amazing site&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    &#123;% block sidebar %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/blog/"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base.html 定义了一个可以用于两列排版页面的简单HTML骨架。block 标签定义了三个可以被子模版内容填充的block。block 告诉模版引擎： 子模版可能会覆盖掉模版中的这些位置。</span><br></pre></td></tr></table></figure><ul><li>子模板 html 文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;% block title %&#125;My amazing blog&#123;% endblock %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% for entry in blog_entries %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; entry.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">"子模版"的工作是用它们的内容填充空的blocks。</span><br><span class="line">extends 它告诉模版引擎，这个模版"继承"了另一个模版。当模版系统处理这个模版时,将定位父模板 base.html</span><br></pre></td></tr></table></figure><ul><li>使用继承的注意点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在模版中使用 &#123;% extends %&#125; 标签，它必须是模版中的第一个标签。其他的任何情况下，模版继承都将无法工作</span><br><span class="line">base模版中设置越多的 &#123;% block %&#125; 标签越好</span><br><span class="line">当你在大量的模版中复制内容,可能意味着你应该把内容移动到父模版中的一个 &#123;% block %&#125; 中</span><br><span class="line">给 &#123;% endblock name %&#125; 标签一个 name,具有更高的可读性</span><br></pre></td></tr></table></figure><h2 id="6-静态文件相关"><a href="#6-静态文件相关" class="headerlink" title="6.静态文件相关"></a>6.静态文件相关</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% static "</span><span class="attr">images</span>/<span class="attr">hi.jpg</span>" %&#125;" <span class="attr">alt</span>=<span class="string">"Hi!"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用JS文件时使用 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static "</span><span class="attr">mytest.js</span>" %&#125;"&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>get_static_prefix </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;% get_static_prefix %&#125;images/hi.jpg"</span> <span class="attr">alt</span>=<span class="string">"Hi!"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line">&#123;% get_static_prefix as STATIC_PREFIX %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; STATIC_PREFIX &#125;&#125;images/hi.jpg"</span> <span class="attr">alt</span>=<span class="string">"Hi!"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; STATIC_PREFIX &#125;&#125;images/hi2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Hello!"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-inclusion-tag"><a href="#7-inclusion-tag" class="headerlink" title="7.inclusion_tag"></a>7.inclusion_tag</h2><ul><li>作用：返回 html 代码片段</li><li>templatetags / my_inclusion.py </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag('result.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(n)</span>:</span></span><br><span class="line">    n = <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">1</span> <span class="keyword">else</span> int(n)</span><br><span class="line">    data = [<span class="string">"第&#123;&#125;项"</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"data"</span>: data&#125;</span><br></pre></td></tr></table></figure><ul><li>templates / snippets / result.html </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &#123;% for choice in data %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>templates / index.html </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>my_inclusion<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% load my_inclusion %&#125;</span><br><span class="line">&#123;% show_results 10 %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、模型-models-py"><a href="#五、模型-models-py" class="headerlink" title="五、模型(models.py)"></a>五、模型(models.py)</h1><ul><li>单表操作</li></ul><p>①创建表</p><p>②字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">AutoField(Field)</span><br><span class="line">        - int自增列，必须填入参数 primary_key=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    BigAutoField(AutoField)</span><br><span class="line">        - bigint自增列，必须填入参数 primary_key=<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        注：当model中如果没有自增列，则自动会创建一个列名为id的列</span><br><span class="line">        <span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">            <span class="comment"># 自动创建一个列名为id的且为自增的整数列</span></span><br><span class="line">            username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">            <span class="comment"># 自定义自增列</span></span><br><span class="line">            nid = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">            name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    SmallIntegerField(IntegerField):</span><br><span class="line">        - 小整数 <span class="number">-32768</span> ～ <span class="number">32767</span></span><br><span class="line"></span><br><span class="line">    PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)</span><br><span class="line">        - 正小整数 <span class="number">0</span> ～ <span class="number">32767</span></span><br><span class="line">    IntegerField(Field)</span><br><span class="line">        - 整数列(有符号的) <span class="number">-2147483648</span> ～ <span class="number">2147483647</span></span><br><span class="line"></span><br><span class="line">    PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)</span><br><span class="line">        - 正整数 <span class="number">0</span> ～ <span class="number">2147483647</span></span><br><span class="line"></span><br><span class="line">    BigIntegerField(IntegerField):</span><br><span class="line">        - 长整型(有符号的) <span class="number">-9223372036854775808</span> ～ <span class="number">9223372036854775807</span></span><br><span class="line"></span><br><span class="line">    自定义无符号整数字段</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">UnsignedIntegerField</span><span class="params">(models.IntegerField)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">'integer UNSIGNED'</span></span><br><span class="line"></span><br><span class="line">        PS: 返回值为字段在数据库中的属性，Django字段默认的值为：</span><br><span class="line">            <span class="string">'AutoField'</span>: <span class="string">'integer AUTO_INCREMENT'</span>,</span><br><span class="line">            <span class="string">'BigAutoField'</span>: <span class="string">'bigint AUTO_INCREMENT'</span>,</span><br><span class="line">            <span class="string">'BinaryField'</span>: <span class="string">'longblob'</span>,</span><br><span class="line">            <span class="string">'BooleanField'</span>: <span class="string">'bool'</span>,</span><br><span class="line">            <span class="string">'CharField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">            <span class="string">'CommaSeparatedIntegerField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">            <span class="string">'DateField'</span>: <span class="string">'date'</span>,</span><br><span class="line">            <span class="string">'DateTimeField'</span>: <span class="string">'datetime'</span>,</span><br><span class="line">            <span class="string">'DecimalField'</span>: <span class="string">'numeric(%(max_digits)s, %(decimal_places)s)'</span>,</span><br><span class="line">            <span class="string">'DurationField'</span>: <span class="string">'bigint'</span>,</span><br><span class="line">            <span class="string">'FileField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">            <span class="string">'FilePathField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">            <span class="string">'FloatField'</span>: <span class="string">'double precision'</span>,</span><br><span class="line">            <span class="string">'IntegerField'</span>: <span class="string">'integer'</span>,</span><br><span class="line">            <span class="string">'BigIntegerField'</span>: <span class="string">'bigint'</span>,</span><br><span class="line">            <span class="string">'IPAddressField'</span>: <span class="string">'char(15)'</span>,</span><br><span class="line">            <span class="string">'GenericIPAddressField'</span>: <span class="string">'char(39)'</span>,</span><br><span class="line">            <span class="string">'NullBooleanField'</span>: <span class="string">'bool'</span>,</span><br><span class="line">            <span class="string">'OneToOneField'</span>: <span class="string">'integer'</span>,</span><br><span class="line">            <span class="string">'PositiveIntegerField'</span>: <span class="string">'integer UNSIGNED'</span>,</span><br><span class="line">            <span class="string">'PositiveSmallIntegerField'</span>: <span class="string">'smallint UNSIGNED'</span>,</span><br><span class="line">            <span class="string">'SlugField'</span>: <span class="string">'varchar(%(max_length)s)'</span>,</span><br><span class="line">            <span class="string">'SmallIntegerField'</span>: <span class="string">'smallint'</span>,</span><br><span class="line">            <span class="string">'TextField'</span>: <span class="string">'longtext'</span>,</span><br><span class="line">            <span class="string">'TimeField'</span>: <span class="string">'time'</span>,</span><br><span class="line">            <span class="string">'UUIDField'</span>: <span class="string">'char(32)'</span>,</span><br><span class="line"></span><br><span class="line">    BooleanField(Field)</span><br><span class="line">        - 布尔值类型</span><br><span class="line"></span><br><span class="line">    NullBooleanField(Field):</span><br><span class="line">        - 可以为空的布尔值</span><br><span class="line"></span><br><span class="line">    CharField(Field)</span><br><span class="line">        - 字符类型</span><br><span class="line">        - 必须提供max_length参数， max_length表示字符长度</span><br><span class="line"></span><br><span class="line">    TextField(Field)</span><br><span class="line">        - 文本类型</span><br><span class="line"></span><br><span class="line">    EmailField(CharField)：</span><br><span class="line">        - 字符串类型，Django Admin以及ModelForm中提供验证机制</span><br><span class="line"></span><br><span class="line">    IPAddressField(Field)</span><br><span class="line">        - 字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制</span><br><span class="line"></span><br><span class="line">    GenericIPAddressField(Field)</span><br><span class="line">        - 字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6</span><br><span class="line">        - 参数：</span><br><span class="line">            protocol，用于指定Ipv4或Ipv6， <span class="string">'both'</span>,<span class="string">"ipv4"</span>,<span class="string">"ipv6"</span></span><br><span class="line">            unpack_ipv4， 如果指定为<span class="keyword">True</span>，则输入::ffff:<span class="number">192.0</span><span class="number">.2</span><span class="number">.1</span>时候，可解析为<span class="number">192.0</span><span class="number">.2</span><span class="number">.1</span>，开启刺功能，需要protocol=<span class="string">"both"</span></span><br><span class="line"></span><br><span class="line">    URLField(CharField)</span><br><span class="line">        - 字符串类型，Django Admin以及ModelForm中提供验证 URL</span><br><span class="line"></span><br><span class="line">    SlugField(CharField)</span><br><span class="line">        - 字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号）</span><br><span class="line"></span><br><span class="line">    CommaSeparatedIntegerField(CharField)</span><br><span class="line">        - 字符串类型，格式必须为逗号分割的数字</span><br><span class="line"></span><br><span class="line">    UUIDField(Field)</span><br><span class="line">        - 字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证</span><br><span class="line"></span><br><span class="line">    FilePathField(Field)</span><br><span class="line">        - 字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能</span><br><span class="line">        - 参数：</span><br><span class="line">                path,                      文件夹路径</span><br><span class="line">                match=<span class="keyword">None</span>,                正则匹配</span><br><span class="line">                recursive=<span class="keyword">False</span>,           递归下面的文件夹</span><br><span class="line">                allow_files=<span class="keyword">True</span>,          允许文件</span><br><span class="line">                allow_folders=<span class="keyword">False</span>,       允许文件夹</span><br><span class="line"></span><br><span class="line">    FileField(Field)</span><br><span class="line">        - 字符串，路径保存在数据库，文件上传到指定目录</span><br><span class="line">        - 参数：</span><br><span class="line">            upload_to = <span class="string">""</span>      上传文件的保存路径</span><br><span class="line">            storage = <span class="keyword">None</span>      存储组件，默认django.core.files.storage.FileSystemStorage</span><br><span class="line"></span><br><span class="line">    ImageField(FileField)</span><br><span class="line">        - 字符串，路径保存在数据库，文件上传到指定目录</span><br><span class="line">        - 参数：</span><br><span class="line">            upload_to = <span class="string">""</span>      上传文件的保存路径</span><br><span class="line">            storage = <span class="keyword">None</span>      存储组件，默认django.core.files.storage.FileSystemStorage</span><br><span class="line">            width_field=<span class="keyword">None</span>,   上传图片的高度保存的数据库字段名（字符串）</span><br><span class="line">            height_field=<span class="keyword">None</span>   上传图片的宽度保存的数据库字段名（字符串）</span><br><span class="line"></span><br><span class="line">    DateTimeField(DateField)</span><br><span class="line">        - 日期+时间格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]</span><br><span class="line"></span><br><span class="line">    DateField(DateTimeCheckMixin, Field)</span><br><span class="line">        - 日期格式      YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">    TimeField(DateTimeCheckMixin, Field)</span><br><span class="line">        - 时间格式      HH:MM[:ss[.uuuuuu]]</span><br><span class="line"></span><br><span class="line">    DurationField(Field)</span><br><span class="line">        - 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型</span><br><span class="line"></span><br><span class="line">    FloatField(Field)</span><br><span class="line">        - 浮点型</span><br><span class="line"></span><br><span class="line">    DecimalField(Field)</span><br><span class="line">        - <span class="number">10</span>进制小数</span><br><span class="line">        - 参数：</span><br><span class="line">            max_digits，小数总长度</span><br><span class="line">            decimal_places，小数位长度</span><br><span class="line"></span><br><span class="line">    BinaryField(Field)</span><br><span class="line">        - 二进制类型</span><br><span class="line"></span><br><span class="line">字段</span><br></pre></td></tr></table></figure><p>③参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)null</span><br><span class="line"> </span><br><span class="line">如果为 <span class="keyword">True</span>，Django 将用 NULL 来在数据库中存储空值。 默认值是 <span class="keyword">False</span>.</span><br><span class="line"> </span><br><span class="line">(<span class="number">1</span>)blank</span><br><span class="line"> </span><br><span class="line">如果为 <span class="keyword">True</span>，该字段允许不填。默认为 <span class="keyword">False</span>。</span><br><span class="line">要注意，这与 null 不同。null 纯粹是数据库范畴的，而 blank 是数据验证范畴的。</span><br><span class="line">如果一个字段的blank=<span class="keyword">True</span>，表单的验证将允许该字段是空值。如果字段的blank=<span class="keyword">False</span>，该字段就是必填的。</span><br><span class="line"> </span><br><span class="line">(<span class="number">2</span>)default</span><br><span class="line"> </span><br><span class="line">字段的默认值。可以是一个值或者可调用对象。如果可调用 ，每有新对象被创建它都会被调用。</span><br><span class="line"> </span><br><span class="line">(<span class="number">3</span>)primary_key</span><br><span class="line"> </span><br><span class="line">如果为<span class="keyword">True</span>，那么这个字段就是模型的主键。如果你没有指定任何一个字段的primary_key=<span class="keyword">True</span>，</span><br><span class="line">Django 就会自动添加一个IntegerField字段做为主键，所以除非你想覆盖默认的主键行为，</span><br><span class="line">否则没必要设置任何一个字段的primary_key=<span class="keyword">True</span>。</span><br><span class="line"> </span><br><span class="line">(<span class="number">4</span>)unique</span><br><span class="line"> </span><br><span class="line">如果该值设置为 <span class="keyword">True</span>, 这个数据字段的值在整张表中必须是唯一的</span><br><span class="line"> </span><br><span class="line">(<span class="number">5</span>)choices</span><br><span class="line">由二元组组成的一个可迭代对象（例如，列表或元组），用来给字段提供选择项。 如果设置了choices ，默认的表单将是一个选择框而不是标准的文本框，&lt;br&gt;而且这个选择框的选项就是choices 中的选项。</span><br><span class="line"></span><br><span class="line">参数</span><br></pre></td></tr></table></figure><p>④元信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">        nid = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">        username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">            <span class="comment"># 数据库中生成的表名称 默认 app名称 + 下划线 + 类名</span></span><br><span class="line">            db_table = <span class="string">"table_name"</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 联合索引</span></span><br><span class="line">            index_together = [</span><br><span class="line">                (<span class="string">"pub_date"</span>, <span class="string">"deadline"</span>),</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 联合唯一索引</span></span><br><span class="line">            unique_together = ((<span class="string">"driver"</span>, <span class="string">"restaurant"</span>),)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># admin中显示的表名称</span></span><br><span class="line">            verbose_name</span><br><span class="line"></span><br><span class="line">            <span class="comment"># verbose_name加s</span></span><br><span class="line">            verbose_name_plural</span><br></pre></td></tr></table></figure><p>⑤增加删除字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除，直接注释掉字段，执行数据库迁移命令即可</span><br><span class="line"></span><br><span class="line">新增字段，在类里直接新增字段，直接执行数据库迁移命令会提示输入默认值，此时需要设置</span><br><span class="line">QuerySet_obj = models.CharField(max_length=<span class="number">12</span>,default=<span class="string">'xxx'</span>,null=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>⑥添加表记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create方法的返回值book_obj就是插入book表中的python葵花宝典这本书籍纪录对象</span></span><br><span class="line">QuerySet_obj=Book.objects.create(字段=value,pub_date=<span class="string">"2012-12-12"</span>)</span><br><span class="line"><span class="comment"># 注意：时间格式必须是字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj=Book(字段=value,pub_date=<span class="string">"2012-12-12"</span>)</span><br><span class="line">obj.save()</span><br><span class="line"><span class="comment"># 注意：该方法必须调用保存</span></span><br></pre></td></tr></table></figure><p>⑦查询表记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">1</span>&gt; all():                  查询所有结果</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">2</span>&gt; filter(**kwargs):       它包含了与所给筛选条件相匹配的对象</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">3</span>&gt; get(**kwargs):          返回与所给筛选条件相匹配的对象，返回结果有且只有一个，如果符合筛选条件的对象超过一个或者没有都会抛出错误。</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">4</span>&gt; exclude(**kwargs):      它包含了与所给筛选条件不匹配的对象</span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">5</span>&gt; order_by(*field):       对查询结果排序(<span class="string">'-id'</span>)</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">6</span>&gt; reverse():              对查询结果反向排序</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">8</span>&gt; count():                返回数据库中匹配查询(QuerySet)的对象数量。</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">9</span>&gt; first():                返回第一条记录</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">10</span>&gt; last():                返回最后一条记录</span><br><span class="line">  </span><br><span class="line">&lt;<span class="number">11</span>&gt; exists():              如果QuerySet包含数据，就返回<span class="keyword">True</span>，否则返回<span class="keyword">False</span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">12</span>&gt; values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列</span><br><span class="line">                            model的实例化对象，而是一个可迭代的字典序列</span><br><span class="line">&lt;<span class="number">13</span>&gt; values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列</span><br><span class="line"> </span><br><span class="line">&lt;<span class="number">14</span>&gt; distinct():            从返回结果中剔除重复纪录</span><br></pre></td></tr></table></figure><p>⑧基于双下划线的模糊查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Book.objects.filter(price__in=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>])</span><br><span class="line">Book.objects.filter(price__gt=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__lt=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__gte=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__lte=<span class="number">100</span>)</span><br><span class="line">Book.objects.filter(price__range=[<span class="number">100</span>,<span class="number">200</span>])</span><br><span class="line">Book.objects.filter(title__contains=<span class="string">"python"</span>)</span><br><span class="line">Book.objects.filter(title__icontains=<span class="string">"python"</span>)</span><br><span class="line">Book.objects.filter(title__startswith=<span class="string">"py"</span>)</span><br><span class="line">Book.objects.filter(pub_date__year=<span class="number">2012</span>)</span><br></pre></td></tr></table></figure><p>⑨删除表记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">model_obj.delete()</span><br><span class="line">它运行时立即删除对象而不返回任何值。</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">可以一次性删除多个对象。每个 QuerySet 都有一个 delete() 方法，它一次性删除 QuerySet 中所有的对象。</span><br><span class="line">Entry.objects.filter(pub_date__year=<span class="number">2005</span>).delete()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">Django <span class="number">2.</span>+版本删除关联字段时，models.py 关联表中的关联字段必须设置 ON_DELETE=models.CASECADE</span><br><span class="line">    若不想级联删除，可设置</span><br><span class="line">    models.ForeignKey(to=<span class="string">'Publisher'</span>, on_delete=models.SET_NULL, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    delete() 方法是 QuerySet 上的方法，但并不适用于 Manager 本身。</span><br></pre></td></tr></table></figure><p>⑩修改表记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book.objects.filter(title__startswith=<span class="string">"py"</span>).update(price=<span class="number">120</span>）</span><br><span class="line">                                                   </span><br><span class="line">update()方法对于任何结果集（QuerySet）均有效，这意味着你可以同时更新多条记录update()方法会返回一个整型数值，表示受影响的记录条数。</span><br></pre></td></tr></table></figure><ul><li>多表操作</li></ul><h4 id="添加表记录"><a href="#添加表记录" class="headerlink" title="添加表记录"></a>添加表记录</h4><p>①一对多</p><p>②多对多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">book_obj.authors.add(yuan,egon) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book_obj.authors.remove()      <span class="comment"># 将某个特定的对象从被关联对象集合中去除。    ======   book_obj.authors.remove(*[])</span></span><br><span class="line">book_obj.authors.clear()       <span class="comment">#清空被关联对象集合</span></span><br><span class="line">book_obj.authors.set()         <span class="comment">#先清空再设置</span></span><br></pre></td></tr></table></figure><h4 id="跨表查询"><a href="#跨表查询" class="headerlink" title="跨表查询"></a>跨表查询</h4><p>①一对一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正向查询(按字段：authorDetail)</span><br><span class="line">obj=Author.objects.filter(name=<span class="string">"xxx"</span>).first()</span><br><span class="line">print(obj.authorDetail.telephone)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">反向查询(按表名：author)</span><br><span class="line"><span class="comment"># 查询所有住址在北京的作者的姓名</span></span><br><span class="line">authorDetail_list=AuthorDetail.objects.filter(addr=<span class="string">"beijing"</span>)</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> authorDetail_list:</span><br><span class="line">     print(obj.author.name)</span><br></pre></td></tr></table></figure><p>②一对多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正向查询（按字段：publish）</span><br><span class="line"><span class="comment"># 查询主键为1的书籍的出版社所在的城市</span></span><br><span class="line">book_obj=Book.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line"><span class="comment"># book_obj.publish 是主键为1的书籍对象关联的出版社对象</span></span><br><span class="line">print(book_obj.publish.city)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">反向查询（按表名：book_set）</span><br><span class="line">publish=Publish.objects.get(name=<span class="string">"苹果出版社"</span>)</span><br><span class="line"><span class="comment">#publish.book_set.all() : 与苹果出版社关联的所有书籍对象集合</span></span><br><span class="line">book_list=publish.book_set.all()    </span><br><span class="line"><span class="keyword">for</span> book_obj <span class="keyword">in</span> book_list:</span><br><span class="line">       print(book_obj.title)</span><br></pre></td></tr></table></figure><p>③多对多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正向查询(按字段：authors)</span><br><span class="line"><span class="comment"># 所有作者的名字以及手机号</span></span><br><span class="line">book_obj=Book.objects.filter(title=<span class="string">"眉"</span>).first()</span><br><span class="line">authors=book_obj.authors.all()</span><br><span class="line"><span class="keyword">for</span> author_obj <span class="keyword">in</span> authors:</span><br><span class="line">     print(author_obj.name,author_obj.authorDetail.telephone)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">反向查询(按表名：book_set)</span><br><span class="line"><span class="comment"># 查询xxx出过的所有书籍的名字</span></span><br><span class="line"> </span><br><span class="line">author_obj=Author.objects.get(name=<span class="string">"xxx"</span>)</span><br><span class="line">book_list=author_obj.book_set.all()       </span><br><span class="line"><span class="keyword">for</span> book_obj <span class="keyword">in</span> book_list:</span><br><span class="line">    print(book_obj.title)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：</span></span><br><span class="line">可通过在 ForeignKey() 和ManyToManyField的定义中设置 related_name 的值来覆写 FOO_set 的名称。</span><br><span class="line">publish = ForeignKey(Book, related_name=<span class="string">'bookList'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 人民出版社出版过的所有书籍</span></span><br><span class="line">publish=Publish.objects.get(name=<span class="string">"人民出版社"</span>)</span><br><span class="line">book_list=publish.bookList.all()  <span class="comment"># 与人民出版社关联的所有书籍对象集合</span></span><br></pre></td></tr></table></figure><h4 id="双下滑下跨表查询"><a href="#双下滑下跨表查询" class="headerlink" title="双下滑下跨表查询"></a>双下滑下跨表查询</h4><p>①一对多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向查询 按字段:publish</span></span><br><span class="line">queryResult=Book.objects.filter(publish__name=<span class="string">"苹果出版社"</span>).values_list(<span class="string">"title"</span>,<span class="string">"price"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向查询 按表名:book</span></span><br><span class="line">queryResult=Publish.objects.filter(name=<span class="string">"苹果出版社"</span>).values_list(<span class="string">"book__title"</span>,<span class="string">"book__price"</span>)</span><br></pre></td></tr></table></figure><p>②多对多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向查询 按字段:authors:</span></span><br><span class="line">queryResult=Book.objects.filter(authors__name=<span class="string">"xxx"</span>).values_list(<span class="string">"title"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向查询 按表名:book</span></span><br><span class="line">queryResult=Author.objects.filter(name=<span class="string">"xxx"</span>).values_list(<span class="string">"book__title"</span>,<span class="string">"book__price"</span>)</span><br></pre></td></tr></table></figure><p>③一对一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正向查询</span></span><br><span class="line">ret=Author.objects.filter(name=<span class="string">"xxx"</span>).values(<span class="string">"authordetail__telephone"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向查询</span></span><br><span class="line">ret=AuthorDetail.objects.filter(author__name=<span class="string">"alex"</span>).values(<span class="string">"telephone"</span>)</span><br></pre></td></tr></table></figure><h4 id="聚合查询和分组查询"><a href="#聚合查询和分组查询" class="headerlink" title="聚合查询和分组查询"></a>聚合查询和分组查询</h4><ul><li>aggregate(*args,**kwargs)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算所有图书的平均价格</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max, Min</span><br><span class="line">Book.objects.all().aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line"></span><br><span class="line">Book.objects.aggregate(Avg(<span class="string">'price'</span>), Max(<span class="string">'price'</span>), Min(<span class="string">'price'</span>))</span><br></pre></td></tr></table></figure><ul><li>annotate()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">annotate()为调用的QuerySet中每一个对象都生成一个独立的统计值（统计方法用聚合函数）。</span><br><span class="line"></span><br><span class="line">总结 ：跨表分组查询本质就是将关联表join成一张表，再按单表的思路进行分组查询。</span><br></pre></td></tr></table></figure><h4 id="F查询和Q查询"><a href="#F查询和Q查询" class="headerlink" title="F查询和Q查询"></a>F查询和Q查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">Django 提供 F() 来做这样的比较。F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。</span><br><span class="line"><span class="comment"># 查询评论数大于收藏数的书籍</span></span><br><span class="line">Book.objects.filter(commnetNum__lt=F(<span class="string">'keepNum'</span>))</span><br><span class="line"></span><br><span class="line">Django 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取模的操作。</span><br><span class="line"><span class="comment"># 查询评论数大于收藏数2倍的书籍</span></span><br><span class="line">Book.objects.filter(commnetNum__lt=F(<span class="string">'keepNum'</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">修改操作也可以使用F函数,比如将每一本书的价格提高<span class="number">30</span>元</span><br><span class="line">Book.objects.all().update(price=F(<span class="string">"price"</span>)+<span class="number">30</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Q 对象可以使用 &amp; 和 | 操作符组合起来。当一个操作符在两个 Q 对象上使用时，它产生一个新的 Q 对象。</span><br><span class="line">bookList=Book.objects.filter(Q(authors__name=<span class="string">"a"</span>)|Q(authors__name=<span class="string">"b"</span>))</span><br></pre></td></tr></table></figure><h1 id="六、组件"><a href="#六、组件" class="headerlink" title="六、组件"></a>六、组件</h1><h2 id="1-Ajax"><a href="#1-Ajax" class="headerlink" title="1.Ajax"></a>1.Ajax</h2><ul><li><p>定义</p><p>AJAX（Asynchronous Javascript And XML）翻译成中文就是“异步Javascript和XML”。即使用Javascript语言与服务器进行异步交互，传输的数据为XML（当然，传输的数据不只是XML,现在更多使用json数据）。</p></li></ul><p>​      特点：①异步交互—客户端发出请求后,无需等待服务器响应结束,就可以发出第二个请求 ; ②浏览器页面<strong>局部刷新</strong> </p><p>​      优点：①使用Javascript技术向服务器发送异步请求②无须刷新整个页面 </p><ul><li>XMLHttpResponse 方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpResponse:</span><br><span class="line">    ① 生成对象</span><br><span class="line">    ② 处理数据</span><br><span class="line">    ③ 发送数据</span><br><span class="line">    ④ 监听事件</span><br></pre></td></tr></table></figure><ul><li>Django 方式（常用）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123;            <span class="comment">// 是JQuery最底层的实现原理</span></span><br><span class="line">    url:<span class="string">""</span>,</span><br><span class="line">    type:<span class="string">""</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    <span class="comment">// dataType:"json",   //client 向 server指定接收的数据类型</span></span><br><span class="line">    <span class="comment">// contentType:"",  //告诉jQuery不要去设置Content-Type请求头</span></span><br><span class="line">    <span class="comment">// processData:boolean，// 告诉浏览器是否处理数据</span></span><br><span class="line">    <span class="comment">// data.parse()       // 将数据解析成指定格式</span></span><br><span class="line">    <span class="comment">// data.Jsonify()    // 将接接收的数据变成json类型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>应用场景:登录验证 </li></ul><ul><li>文件上传</li></ul><p>①ContentType请求头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application/x-www-form-urlencoded</span><br><span class="line">最常见的 POST 提交数据的方式了。浏览器的原生 &lt;form&gt; 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipart/form-data</span><br><span class="line">常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 &lt;form&gt; 表单的 enctype 等于 multipart/form-data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application/json</span><br><span class="line">用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</span><br></pre></td></tr></table></figure><ul><li>基于Form表单上传文件</li></ul><p>html 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/file_put/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span> <span class="attr">id</span>=<span class="string">"avatar1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>py文件视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_put</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'file_put.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)  <span class="comment"># 原始的请求体数据 </span></span><br><span class="line">        print(request.GET)  <span class="comment"># GET请求数据 </span></span><br><span class="line">        print(request.POST)  <span class="comment"># POST请求数据 </span></span><br><span class="line">        print(request.FILES)  <span class="comment"># 上传的文件数据</span></span><br><span class="line">        print(request.body.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        </span><br><span class="line">        file_obj=request.FILES.get(<span class="string">'avatar'</span>)</span><br><span class="line">        print(type(file_obj))</span><br><span class="line">        <span class="keyword">with</span> open(file_obj.name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><ul><li>基于Ajax上传</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#ajax_button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> formdata=<span class="keyword">new</span> FormData()</span><br><span class="line">    formdata.append(<span class="string">'name'</span>,$(<span class="string">"#id_name2"</span>).val())</span><br><span class="line">    formdata.append(<span class="string">'avatar'</span>,$(<span class="string">"#avatar2"</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">''</span>,</span><br><span class="line">        type:<span class="string">'post'</span>,</span><br><span class="line">        processData:<span class="literal">false</span>, <span class="comment">//告诉jQuery不要去处理发送的数据</span></span><br><span class="line">        contentType:<span class="literal">false</span>,<span class="comment">// 告诉jQuery不要去设置Content-Type请求头</span></span><br><span class="line">        data:formdata,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>Ajax提交json格式的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    $(<span class="string">"#ajax_test"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dic=&#123;<span class="string">'name'</span>:<span class="string">'lqz'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            contentType:<span class="string">'application/json'</span>,  <span class="comment">//一定要指定格式 contentType: 'application/json;charset=utf-8',</span></span><br><span class="line">            data:<span class="built_in">JSON</span>.stringify(dic),    <span class="comment">//转换成json字符串格式</span></span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">提交到服务器的数据都在 request.body 里，取出来自行处理</span><br></pre></td></tr></table></figure><h2 id="2-分页器"><a href="#2-分页器" class="headerlink" title="2.分页器"></a>2.分页器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator,EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line">Paginator对象：    paginator = Paginator(user_list, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># paginator.per_page:  每页显示条目数量</span></span><br><span class="line"><span class="comment"># paginator.count:     数据总个数</span></span><br><span class="line"><span class="comment"># paginator.num_pages: 总页数</span></span><br><span class="line"><span class="comment"># paginator.page_range:总页数的索引范围，如: (1,10),(1,200)</span></span><br><span class="line"><span class="comment"># paginator.page:      page对象    </span></span><br><span class="line">page对象：page=paginator.page(<span class="number">1</span>)  <span class="comment">#第1页的page对象</span></span><br><span class="line"><span class="comment"># page1.has_next              是否有下一页</span></span><br><span class="line"><span class="comment"># page1.next_page_number      下一页页码</span></span><br><span class="line"><span class="comment"># page1.has_previous          是否有上一页</span></span><br><span class="line"><span class="comment"># page1.previous_page_number  上一页页码</span></span><br><span class="line"><span class="comment"># page1.object_list           分页之后的数据列表</span></span><br><span class="line"><span class="comment"># page1.number                当前页</span></span><br><span class="line"><span class="comment"># page1.paginator             paginator对象</span></span><br></pre></td></tr></table></figure><ul><li>批量导入数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Booklist=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    Booklist.append(Book(title=<span class="string">"book"</span>+str(i),price=<span class="number">30</span>+i*i))</span><br><span class="line">Book.objects.bulk_create(Booklist)</span><br></pre></td></tr></table></figure><ul><li>View视图函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    book_list=Book.objects.all()</span><br><span class="line">    paginator = Paginator(book_list, <span class="number">10</span>)  </span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)   <span class="comment"># 从客户端传过来的所显示的当前页面</span></span><br><span class="line">    currentPage=int(page)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(page)</span><br><span class="line">        book_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        book_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        book_list = paginator.page(paginator.num_pages)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">"index.html"</span>,&#123;<span class="string">"book_list"</span>:book_list,<span class="string">"paginator"</span>:paginator,<span class="string">"currentPage"</span>:currentPage&#125;)</span><br></pre></td></tr></table></figure><ul><li>模板层 index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>分页器<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for book in book_list %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; book.title &#125;&#125; -----&#123;&#123; book.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span> <span class="attr">id</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">                 &#123;% if book_list.has_previous %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index/?page=&#123;&#123; book_list.previous_page_number &#125;&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                 &#123;% for num in paginator.page_range %&#125;</span><br><span class="line">                     &#123;% if num == currentPage %&#125;</span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index/?page=&#123;&#123; num &#125;&#125;"</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     &#123;% else %&#125;</span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index/?page=&#123;&#123; num &#125;&#125;"</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                     &#123;% endif %&#125;</span><br><span class="line">                 &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                 &#123;% if book_list.has_next %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index/?page=&#123;&#123; book_list.next_page_number &#125;&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                 &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>核心逻辑</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">显示左5，右5，总共11个页，</span><br><span class="line">1 如果总页码大于11</span><br><span class="line">    1.1 if 当前页码减5小于1，要生成1到12的列表（顾头不顾尾，共11个页码）</span><br><span class="line">        page_range=range(1,12)</span><br><span class="line">    1.2 elif 当前页码+5大于总页码，生成当前页码减10，到当前页码加1的列表（顾头不顾尾，共11个页码）</span><br><span class="line">        page_range=range(paginator.num_pages-10,paginator.num_pages+1)</span><br><span class="line">    1.3 else 生成当前页码-5，到当前页码+6的列表</span><br><span class="line">         page_range=range(current_page_num-5,current_page_num+6)</span><br><span class="line">2 其它情况，生成的列表就是pageinator的page_range</span><br><span class="line">    page_range=paginator.page_range</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    book_list=Book.objects.all()</span><br><span class="line">    paginator = Paginator(book_list, <span class="number">15</span>)</span><br><span class="line">    page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)</span><br><span class="line">    currentPage=int(page)</span><br><span class="line">    <span class="comment">#  如果页数十分多时，换另外一种显示方式</span></span><br><span class="line">    <span class="keyword">if</span> paginator.num_pages&gt;<span class="number">11</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> currentPage<span class="number">-5</span>&lt;<span class="number">1</span>:</span><br><span class="line">            pageRange=range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">        <span class="keyword">elif</span> currentPage+<span class="number">5</span>&gt;paginator.num_pages:</span><br><span class="line">            pageRange=range(currentPage<span class="number">-5</span>,paginator.num_pages+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pageRange=range(currentPage<span class="number">-5</span>,currentPage+<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pageRange=paginator.page_range</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(page)</span><br><span class="line">        book_list = paginator.page(page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        book_list = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        book_list = paginator.page(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">"index.html"</span>,locals())</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for foo in page %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; foo.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">        &#123;% if page.has_previous %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page_test/?page=&#123;&#123; page.previous_page_number &#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% for foo in page_range %&#125;</span><br><span class="line">            &#123;% if current_page == foo %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page_test/?page=&#123;&#123; foo &#125;&#125;"</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page_test/?page=&#123;&#123; foo &#125;&#125;"</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        </span><br><span class="line">        &#123;% if page.has_next %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page_test/?page=&#123;&#123; page.next_page_number &#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-forms组件"><a href="#3-forms组件" class="headerlink" title="3.forms组件"></a>3.forms组件</h2><ul><li>校验字段（如用户注册）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">models.py</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pwd=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email=models.EmailField()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">模板文件</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwd"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r_pwd"</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"r_pwd"</span> <span class="attr">id</span>=<span class="string">"r_pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">视图函数</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件</span></span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">wid_01=widgets.TextInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;)</span><br><span class="line">wid_02=widgets.PasswordInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name=forms.CharField(max_length=<span class="number">32</span>,</span><br><span class="line">                         widget=wid_01</span><br><span class="line">                         )</span><br><span class="line">    pwd=forms.CharField(max_length=<span class="number">32</span>,widget=wid_02)</span><br><span class="line">    r_pwd=forms.CharField(max_length=<span class="number">32</span>,widget=wid_02)</span><br><span class="line">    email=forms.EmailField(widget=wid_01)</span><br><span class="line">    tel=forms.CharField(max_length=<span class="number">32</span>,widget=wid_01)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 此时 request.POST 字典中的数据是未验证过的证据</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">"POST"</span>:</span><br><span class="line">        form=UserForm(request.POST)</span><br><span class="line">        <span class="comment"># 验证符合之后的字典形式数据</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            print(form.cleaned_data)       <span class="comment"># 所有干净的字段以及对应的值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.cleaned_data)       </span><br><span class="line">            print(form.errors.get(<span class="string">"__all__"</span>))</span><br><span class="line">            print(form.errors)             <span class="comment"># ErrorDict : &#123;"校验错误的字段":["错误信息",]&#125;</span></span><br><span class="line">            print(form.errors.get(<span class="string">"name"</span>)) <span class="comment"># ErrorList ["错误信息",]</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"OK"</span>)</span><br><span class="line">    form=UserForm()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">"register.html"</span>,locals())</span><br></pre></td></tr></table></figure><ul><li>渲染标签</li></ul><p>①方式一（拓展性高）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-lg-offset-3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                    &#123;% csrf_token %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form.name &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form.pwd &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form.r_pwd &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span> 邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form.email &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default pull-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②方式二（推荐）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line">&#123;% for field in form %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">&#123;&#123; field &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default pull-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③方式三</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;  </span><br><span class="line">    &#123;&#123; form.as_p &#125;  <span class="comment">&lt;!-- 直接全部当成p标签渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default pull-right"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>校验不通过错误信息渲染</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Views.py</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">"POST"</span>:</span><br><span class="line">        form=UserForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            print(form.cleaned_data)       <span class="comment"># 所有干净的字段以及对应的值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.cleaned_data)       <span class="comment">#</span></span><br><span class="line">            print(form.errors)             <span class="comment"># ErrorDict : &#123;"校验错误的字段":["错误信息",]&#125;</span></span><br><span class="line">            print(form.errors.get(<span class="string">"name"</span>)) <span class="comment"># ErrorList ["错误信息",]</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">"register.html"</span>,locals())</span><br><span class="line">    form=UserForm()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">"register.html"</span>,locals())</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% for field in form %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            &#123;&#123; field &#125;&#125; </span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right"</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>组件参数设置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ret</span><span class="params">(Form)</span>:</span></span><br><span class="line">    <span class="comment"># 这里有label之后,html中可以不用写label标签,可以添加错误信息,也可以控制组件的属性</span></span><br><span class="line">    name = forms.CharField(max_length=<span class="number">10</span>, min_length=<span class="number">2</span>, label=<span class="string">'用户名'</span>,</span><br><span class="line">                           error_messages=&#123;<span class="string">'required'</span>: <span class="string">'该字段不能为空'</span>, <span class="string">'invalid'</span>: <span class="string">'格式错误'</span>, <span class="string">'max_length'</span>: <span class="string">'太长'</span>,<span class="string">'min_length'</span>: <span class="string">'太短'</span>&#125;,</span><br><span class="line">                           widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control'</span>&#125;))</span><br><span class="line">    pwd = forms.CharField(max_length=<span class="number">10</span>, min_length=<span class="number">2</span>, widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control'</span>&#125;))</span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>, error_messages=&#123;<span class="string">'required'</span>: <span class="string">'该字段不能为空'</span>, <span class="string">'invalid'</span>: <span class="string">'格式错误'</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>局部钩子（校验字段）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> NON_FIELD_ERRORS, ValidationError</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        val=self.cleaned_data.get(<span class="string">"name"</span>)</span><br><span class="line">        ret=UserInfo.objects.filter(name=val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">"该用户已注册!"</span>)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_tel</span><span class="params">(self)</span>:</span></span><br><span class="line">val=self.cleaned_data.get(<span class="string">"tel"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> len(val)==<span class="number">11</span>:</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span>  ValidationError(<span class="string">"手机号格式错误"</span>)</span><br></pre></td></tr></table></figure><ul><li>全局钩子（校验两次密码）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">pwd=self.cleaned_data.get(<span class="string">'pwd'</span>)</span><br><span class="line">r_pwd=self.cleaned_data.get(<span class="string">'r_pwd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pwd <span class="keyword">and</span> r_pwd:</span><br><span class="line"><span class="keyword">if</span> pwd==r_pwd:</span><br><span class="line"><span class="keyword">return</span> self.cleaned_data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> ValidationError(<span class="string">'两次密码不一致'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><ul><li>全部文件</li></ul><p>①自定义forms组件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> NON_FIELD_ERRORS, ValidationError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name=forms.CharField(min_length=<span class="number">4</span>,label=<span class="string">"用户名"</span>,error_messages=&#123;<span class="string">"required"</span>:<span class="string">"该字段不能为空"</span>&#125;,</span><br><span class="line">                         widget=widgets.TextInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;)</span><br><span class="line">                         )</span><br><span class="line">    pwd=forms.CharField(min_length=<span class="number">4</span>,label=<span class="string">"密码"</span>,</span><br><span class="line">                        widget=widgets.PasswordInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;)</span><br><span class="line">                        )</span><br><span class="line">    r_pwd=forms.CharField(min_length=<span class="number">4</span>,label=<span class="string">"确认密码"</span>,error_messages=&#123;<span class="string">"required"</span>:<span class="string">"该字段不能为空"</span>&#125;,widget=widgets.TextInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;))</span><br><span class="line">    email=forms.EmailField(label=<span class="string">"邮箱"</span>,error_messages=&#123;<span class="string">"required"</span>:<span class="string">"该字段不能为空"</span>,<span class="string">"invalid"</span>:<span class="string">"格式错误"</span>&#125;,widget=widgets.TextInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;))</span><br><span class="line">    tel=forms.CharField(label=<span class="string">"手机号"</span>,widget=widgets.TextInput(attrs=&#123;<span class="string">"class"</span>:<span class="string">"form-control"</span>&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_name</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        val=self.cleaned_data.get(<span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line">        ret=UserInfo.objects.filter(name=val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">"该用户已注册!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_tel</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        val=self.cleaned_data.get(<span class="string">"tel"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(val)==<span class="number">11</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span>  ValidationError(<span class="string">"手机号格式错误"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        pwd=self.cleaned_data.get(<span class="string">'pwd'</span>)</span><br><span class="line">        r_pwd=self.cleaned_data.get(<span class="string">'r_pwd'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pwd <span class="keyword">and</span> r_pwd:</span><br><span class="line">            <span class="keyword">if</span> pwd==r_pwd:</span><br><span class="line">                <span class="keyword">return</span> self.cleaned_data</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValidationError(<span class="string">'两次密码不一致'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><p>②视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01.myforms <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">"POST"</span>:</span><br><span class="line">        print(request.POST)</span><br><span class="line">        <span class="comment">#form=UserForm(&#123;"name":"yu","email":"123@qq.com","xxxx":"alex"&#125;)</span></span><br><span class="line">        form=UserForm(request.POST) <span class="comment"># form表单的name属性值应该与forms组件字段名称一致</span></span><br><span class="line">        print(form.is_valid()) <span class="comment"># 返回布尔值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            print(form.cleaned_data)  <span class="comment"># &#123;"name":"yuan","email":"123@qq.com"&#125;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.cleaned_data)  <span class="comment"># &#123;"email":"123@qq.com"&#125;</span></span><br><span class="line">            <span class="comment"># print(form.errors)        # &#123;"name":[".........."]&#125;</span></span><br><span class="line">            <span class="comment"># print(type(form.errors))  # ErrorDict</span></span><br><span class="line">            <span class="comment"># print(form.errors.get("name"))</span></span><br><span class="line">            <span class="comment"># print(type(form.errors.get("name")))    # ErrorList</span></span><br><span class="line">            <span class="comment"># print(form.errors.get("name")[0])</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#   全局钩子错误</span></span><br><span class="line">            <span class="comment">#print("error",form.errors.get("__all__")[0])</span></span><br><span class="line">            errors=form.errors.get(<span class="string">"__all__"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> render(request,<span class="string">"reg.html"</span>,locals())</span><br><span class="line"></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        form.is_valid()   :返回布尔值</span></span><br><span class="line"><span class="string">        form.cleaned_data :&#123;"name":"yuan","email":"123@qq.com"&#125;</span></span><br><span class="line"><span class="string">        form.errors       :&#123;"name":[".........."]&#125;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    form=UserForm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">"reg.html"</span>,locals())</span><br></pre></td></tr></table></figure><p>③模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .error&#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-lg-offset-3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &#123;#<span class="tag">&lt;<span class="name">h3</span>&gt;</span>简单form<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#    &#123;% csrf_token %&#125;#&#125;</span><br><span class="line">            &#123;#    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#    <span class="tag">&lt;<span class="name">p</span>&gt;</span>确认密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"r_pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#    <span class="tag">&lt;<span class="name">p</span>&gt;</span>手机号 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;/<span class="name">form</span>&gt;</span>#&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>forms组件渲染方式1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                &#123;% csrf_token %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.name.label &#125;&#125;</span><br><span class="line">                    &#123;&#123; form.name &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right error"</span>&gt;</span>&#123;&#123; form.name.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.pwd.label &#125;&#125;</span><br><span class="line">                    &#123;&#123; form.pwd &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right error"</span>&gt;</span>&#123;&#123; form.pwd.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>确认密码</span><br><span class="line">                    &#123;&#123; form.r_pwd &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right error"</span>&gt;</span>&#123;&#123; form.r_pwd.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right error"</span>&gt;</span>&#123;&#123; errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱 &#123;&#123; form.email &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right error"</span>&gt;</span>&#123;&#123; form.email.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>手机号 &#123;&#123; form.tel &#125;&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pull-right error"</span>&gt;</span>&#123;&#123; form.tel.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &#123;#<span class="tag">&lt;<span class="name">h3</span>&gt;</span>forms组件渲染方式2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#     &#123;% csrf_token %&#125;#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#    &#123;% for field in form %&#125;#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#        <span class="tag">&lt;<span class="name">div</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#            &#123;&#123; field &#125;&#125;#&#125;</span><br><span class="line">            &#123;#        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#    &#123;% endfor %&#125;#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;/<span class="name">form</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;<span class="name">h3</span>&gt;</span>forms组件渲染方式3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#     &#123;% csrf_token %&#125;#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#     &#123;&#123; form.as_p &#125;&#125;#&#125;</span><br><span class="line">            &#123;##&#125;</span><br><span class="line">            &#123;#     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>#&#125;</span><br><span class="line">            &#123;#<span class="tag">&lt;/<span class="name">form</span>&gt;</span>#&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-cookie和session"><a href="#4-cookie和session" class="headerlink" title="4.cookie和session"></a>4.cookie和session</h2><ul><li>COOKIE</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cookie：保存在浏览器端的键值对（应用：登录认证）</span><br><span class="line">Cookie的工作原理是：由服务器产生内容，浏览器收到请求后保存在本地；当浏览器再次访问时，浏览器会自动带上Cookie，这样服务器就能通过Cookie的内容来判断这个是“谁”了。</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">obj=HttpResponse()</span><br><span class="line">    存cookie: obj.set_cookie(key,value,max_age(IE浏览器版本低不认识)/expires)</span><br><span class="line">              obj.set_signed_cookie() <span class="comment"># 设置加密方式的cookie;</span></span><br><span class="line">    删除COOKIE:obj.delete_cookie()   <span class="comment"># 删除用户浏览器上之前设置的usercookie值</span></span><br><span class="line">    取COOKIE：request.COOKIES.get(key)</span><br><span class="line">         request.get_signed_cookie()  <span class="comment"># 敏感信息还是在前端可以看到</span></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">csrf_token 也是在cookie中的，客户端/服务端均可设置</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookie规范</span><br><span class="line">Cookie大小上限为4KB； </span><br><span class="line">一个服务器最多在客户端浏览器上保存20个Cookie； </span><br><span class="line">一个浏览器最多保存300个Cookie；</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cookie参数</span><br><span class="line"></span><br><span class="line">①key, 键</span><br><span class="line">②value=&apos;&apos;, 值</span><br><span class="line">④max_age=None, 超时时间 cookie需要延续的时间（以秒为单位）如果参数是\ None`` ，这个cookie会延续到浏览器关闭为止</span><br><span class="line">⑤expires=None, 超时时间(IE requires expires, so set it if hasn&apos;t been already.)</span><br><span class="line">⑥path=&apos;/&apos;, Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问，浏览器只会把cookie回传给带有该路径的页面，这样可以避免将cookie传给站点中的其他的应用。</span><br><span class="line">⑦domain=None, Cookie生效的域名 你可用这个参数来构造一个跨站cookie。如， domain=&quot;.example.com&quot;所构造的cookie对下面这些站点都是可读的：www.example.com 、 www2.example.com 和an.other.sub.domain.example.com 。如果该参数设置为 None ，cookie只能由设置它的站点读取</span><br><span class="line">⑧secure=False, 浏览器将通过HTTPS来回传cookie</span><br><span class="line">⑨httponly=False 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Cookie登录检验+装饰器</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_auth</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request,*args,**kwargs)</span>:</span></span><br><span class="line">        next_url=request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">'is_login'</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'cookie_login/?next=%s'</span>%next_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cookie_order</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'我是订单页面'</span>)</span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cookie_index</span><span class="params">(request)</span>:</span></span><br><span class="line">    name=request.COOKIES.get(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'cookie_index.html'</span>,&#123;<span class="string">'name'</span>:name&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cookie_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method ==<span class="string">'POST'</span>:</span><br><span class="line">        next_url=request.GET.get(<span class="string">'next'</span>)</span><br><span class="line">        name=request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        password=request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'lqz'</span> <span class="keyword">and</span> password == <span class="string">'123'</span>:</span><br><span class="line">            <span class="keyword">import</span> datetime</span><br><span class="line">            now=datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">            print(now)</span><br><span class="line">            obj=redirect(next_url)</span><br><span class="line">            obj.set_cookie(<span class="string">'is_login'</span>,<span class="keyword">True</span>)</span><br><span class="line">            obj.set_cookie(<span class="string">'username'</span>,name)</span><br><span class="line">            obj.set_cookie(<span class="string">'login_time'</span>,now)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'cookie_login.html'</span>)</span><br></pre></td></tr></table></figure><ul><li>session</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Session（字典的操作session基本都满足）：保存在服务端的键值对,内部机制依赖于cookie</span><br><span class="line"></span><br><span class="line">Session一般在很多页面都需要用到,所有可以用装饰器的方式来对多个函数进行装饰,减少重复代码</span><br><span class="line"></span><br><span class="line">存：request.session[key]=value</span><br><span class="line">取：request.session.get(key)</span><br><span class="line">    request.session.iterkeys(), 不会直接取出值,只会在循环迭代时取值</span><br><span class="line">    request.session.session_key, 当前用户session的随机字符串</span><br><span class="line">    request.session.clear_expired(), 清除所有session已过期的数据</span><br><span class="line">    request.session.exists(<span class="string">"key"</span>), 检查当期那用户session是否在数据库中</span><br><span class="line">    request.session.delete(<span class="string">"key"</span>), 删除当前用户session数据</span><br><span class="line">    清除除session：request.session.clear()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 所有 键、值、键值对</span></span><br><span class="line">request.session.keys()</span><br><span class="line">request.session.values()</span><br><span class="line">request.session.items()</span><br><span class="line">request.session.iterkeys()</span><br><span class="line">request.session.itervalues()</span><br><span class="line">request.session.iteritems()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">settings.py</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cache'</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.file'</span>    <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="keyword">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cached_db'</span>        <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span>   <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ <span class="string">"sessionid"</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">SESSION_COOKIE_PATH ＝ <span class="string">"/"</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="keyword">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="keyword">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="keyword">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="keyword">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="keyword">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure><ul><li>CBV 加装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='get')</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='post')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserList</span><span class="params">(views.View)</span>:</span></span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        obj=super().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_decorator(login_auth)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'我是用户列表'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'我是用户列表'</span>)</span><br></pre></td></tr></table></figure><h2 id="5-中间件"><a href="#5-中间件" class="headerlink" title="5.中间件"></a>5.中间件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中间件，是介于request与response处理之间的一道处理过程，相对比较轻量级，并且在全局上改变django的输入与输出。</span><br></pre></td></tr></table></figure><ul><li>settings.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line"><span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line"><span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line"><span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line"><span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,<span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>自定义中间件（MyMiddlewares.py）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        print(<span class="string">"MyMiddleware1请求"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        print(<span class="string">"MyMiddleware1返回"</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        print(<span class="string">"MyMiddleware2请求"</span>)</span><br><span class="line">        <span class="comment">#return HttpResponse("Md2中断")</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        print(<span class="string">"MyMiddleware2返回"</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li>views.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">"view函数..."</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure><ul><li>settins.py中注册自定义中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">"..."</span>,</span><br><span class="line">    <span class="string">"MyMiddlewares.MyMiddleware1"</span>,</span><br><span class="line">    <span class="string">"MyMiddlewares.MyMiddleware2"</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>中间件中的几个方法（主要用到request和response）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">process_request(self,request)</span><br><span class="line"></span><br><span class="line">process_view(self, request, callback, callback_args, callback_kwargs)</span><br><span class="line"></span><br><span class="line">process_template_response(self,request,response)</span><br><span class="line"></span><br><span class="line">process_exception(self, request, exception)</span><br><span class="line"></span><br><span class="line">process_response(self, request, response)</span><br></pre></td></tr></table></figure><ul><li>中间件和视图函数的联系</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">中间件的process_request方法是在执行视图函数之前执行的。</span><br><span class="line">当配置多个中间件时，会按照MIDDLEWARE中的注册顺序，也就是列表的索引值，从前到后依次执行的。</span><br><span class="line">不同中间件之间传递的request都是同一个对象</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">多个中间件中的process_response方法是按照MIDDLEWARE中的注册顺序倒序执行的，也就是说第一个中间件的process_request方法首先执行，而它的process_response方法最后执行，最后一个中间件的process_request方法最后一个执行，它的process_response方法是最先执行。</span><br></pre></td></tr></table></figure><ul><li>中间件的应用</li></ul><p>① IP频率限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">某些IP访问服务器的频率过高，进行拦截，比如限制每分钟不能超过20次。</span><br></pre></td></tr></table></figure><p>② URL访问过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">假设用户访问的是login视图（可以通过）</span><br><span class="line"></span><br><span class="line">但是访问其他视图，需要检测是不是有session认证，已经有了放行，没有返回login，这样就省得在多个视图函数上写装饰器了！</span><br><span class="line"></span><br><span class="line">&apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class="line">&apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br></pre></td></tr></table></figure><h3 id="CSRF-TOKEN跨站请求伪造"><a href="#CSRF-TOKEN跨站请求伪造" class="headerlink" title="CSRF_TOKEN跨站请求伪造"></a>CSRF_TOKEN跨站请求伪造</h3><ul><li>定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一种对网站的恶意利用，尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性</span><br></pre></td></tr></table></figure><ul><li>CSRF攻击防范</li></ul><p>①方式一：验证 HTTP Referer 字段 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。若 Referer 中记录的不是指向自己网站，则认为是 CSRF 攻击，拒绝该访问。</span><br><span class="line">优点：</span><br><span class="line">简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。</span><br><span class="line">缺点：</span><br><span class="line">Referer 值会记录用户的访问来源，用户认为这样会侵犯到隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</span><br></pre></td></tr></table></figure><p>②方式二：在请求地址中添加 token 并验证 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这种方法要比检查 Referer 要安全一些，token 可以在用户登录后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。</span><br><span class="line">对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。</span><br><span class="line">对于 POST 请求来说，要在 form 的最后加上 &lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;，这样就把 token 以参数的形式加入请求了。</span><br><span class="line">但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</span><br></pre></td></tr></table></figure><p>③方式三：在 HTTP 头中自定义属性并验证 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</span><br></pre></td></tr></table></figure><h2 id="6-Auth模块（Django自带的用户认证模块）"><a href="#6-Auth模块（Django自带的用户认证模块）" class="headerlink" title="6.Auth模块（Django自带的用户认证模块）"></a>6.Auth模块（Django自带的用户认证模块）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br></pre></td></tr></table></figure><ul><li><h3 id="authenticate"><a href="#authenticate" class="headerlink" title="authenticate()"></a>authenticate()</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = authenticate(username=&apos;usernamer&apos;,password=&apos;password&apos;)</span><br><span class="line">用户认证功能，即验证用户名以及密码是否正确，一般需要username 、password两个关键字参数。认证成功（用户名和密码正确有效），便会返回一个 User 对象。authenticate()会在该 User 对象上设置一个属性来标识后端已经认证了该用户，且该信息在后续的登录过程中是需要的。</span><br></pre></td></tr></table></figure><ul><li><h3 id="login-HttpRequest-user"><a href="#login-HttpRequest-user" class="headerlink" title="login(HttpRequest, user)"></a>login(HttpRequest, user)</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数接受一个HttpRequest对象，以及一个经过认证的User对象。实现一个用户登录的功能。它本质上会在后端为该用户生成相关session数据。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    username = request.POST[<span class="string">'username'</span>]</span><br><span class="line">    password = request.POST[<span class="string">'password'</span>]</span><br><span class="line">    user = authenticate(username=username, password=password)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        login(request, user)</span><br><span class="line">        <span class="comment"># Redirect to a success page.</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Return an 'invalid login' error message.</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><ul><li><h3 id="logout-request"><a href="#logout-request" class="headerlink" title="logout(request)"></a><strong>logout(request)</strong></h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数接受一个HttpRequest对象，无返回值。用该函数时，当前请求的session信息会全部清除。该用户即使没有登录，使用该函数也不会报错。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout_view</span><span class="params">(request)</span>:</span></span><br><span class="line">  logout(request)</span><br><span class="line">  <span class="comment"># Redirect to a success page.</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="is-authenticated"><a href="#is-authenticated" class="headerlink" title="is_authenticated()"></a>is_authenticated()</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用来判断当前请求是否通过了认证。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.user.is_authenticated():</span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'%s?next=%s'</span> % (settings.LOGIN_URL, request.path))</span><br></pre></td></tr></table></figure><ul><li><h3 id="login-requierd"><a href="#login-requierd" class="headerlink" title="login_requierd()"></a>login_requierd()</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auth 给我们提供的一个装饰器工具，用来快捷的给某个视图添加登录校验。</span><br><span class="line">若用户没有登录，则会跳转到django默认的 登录URL &apos;/accounts/login/ &apos; 并传递当前访问url的绝对路径 (登陆成功后，会重定向到该路径)。</span><br><span class="line"></span><br><span class="line">如果需要自定义登录的URL，则需要在settings.py文件中通过LOGIN_URL进行修改。</span><br><span class="line"></span><br><span class="line">LOGIN_URL = &apos;/login/&apos;  # 这里配置成你项目登录页面的路由</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line">      </span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><ul><li><h3 id="create-user"><a href="#create-user" class="headerlink" title="create_user()"></a>create_user()</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 提供的一个创建新用户的方法，需要提供必要参数（username、password）等。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.create_user（username=<span class="string">'用户名'</span>,password=<span class="string">'密码'</span>,email=<span class="string">'邮箱'</span>,...）</span><br></pre></td></tr></table></figure><ul><li><h3 id="create-superuser"><a href="#create-superuser" class="headerlink" title="create_superuser()"></a>create_superuser()</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 提供的一个创建新的超级用户的方法，需要提供必要参数（username、password）等。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.create_superuser（username=<span class="string">'用户名'</span>,password=<span class="string">'密码'</span>,email=<span class="string">'邮箱'</span>,...）</span><br></pre></td></tr></table></figure><ul><li><h3 id="check-password-password"><a href="#check-password-password" class="headerlink" title="check_password(password)"></a>check_password(password)</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 提供的一个检查密码是否正确的方法，需要提供当前请求用户的密码。密码正确返回True，否则返回False。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = user.check_password(<span class="string">'密码'</span>)</span><br></pre></td></tr></table></figure><ul><li><h3 id="set-password-password"><a href="#set-password-password" class="headerlink" title="set_password(password)"></a>set_password(password)</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auth 提供的一个修改密码的方法，接收 要设置的新密码 作为参数。</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意 --&gt;</span></span><br><span class="line">设置完一定要调用用户对象的save方法！！！</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_password</span><span class="params">(request)</span>:</span></span><br><span class="line">    user = request.user</span><br><span class="line">    err_msg = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        old_password = request.POST.get(<span class="string">'old_password'</span>, <span class="string">''</span>)</span><br><span class="line">        new_password = request.POST.get(<span class="string">'new_password'</span>, <span class="string">''</span>)</span><br><span class="line">        repeat_password = request.POST.get(<span class="string">'repeat_password'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 检查旧密码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> user.check_password(old_password):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> new_password:</span><br><span class="line">                err_msg = <span class="string">'新密码不能为空'</span></span><br><span class="line">            <span class="keyword">elif</span> new_password != repeat_password:</span><br><span class="line">                err_msg = <span class="string">'两次密码不一致'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                user.set_password(new_password)  <span class="comment"># 设置密码</span></span><br><span class="line">                user.save()                 <span class="comment"># 一定要保存</span></span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">"/login/"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err_msg = <span class="string">'原密码输入错误'</span></span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">'err_msg'</span>: err_msg,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'set_password.html'</span>, content)</span><br></pre></td></tr></table></figure><ul><li><h3 id="User对象的属性"><a href="#User对象的属性" class="headerlink" title="User对象的属性"></a>User对象的属性</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User对象属性：username， password</span><br><span class="line">is_staff ： 用户是否拥有网站的管理权限.</span><br><span class="line"></span><br><span class="line">is_active ： 是否允许用户登录, 设置为 False，可以在不删除用户的前提下禁止用户登录。</span><br></pre></td></tr></table></figure><h3 id="扩展auth-user表"><a href="#扩展auth-user表" class="headerlink" title="扩展auth_user表"></a>扩展auth_user表</h3><ul><li>自定义Model类，继承AbstractUser类，又能使用Django强大的认证系统了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息表"""</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="keyword">True</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, null=<span class="keyword">True</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line">扩展了内置的auth_user表之后，一定要在settings.py中告诉Django，我现在使用我新定义的UserInfo表来做用户认证。</span><br><span class="line">    一旦我们指定了新的认证系统所使用的表，我们就需要重新在数据库中创建该表，而不能继续使用原来默认的auth_user表了。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用Django自带的User表，继承使用时需要设置</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">"app名.UserInfo"</span></span><br></pre></td></tr></table></figure><h2 id="7-ContentType（Django提供的ContentType表-）"><a href="#7-ContentType（Django提供的ContentType表-）" class="headerlink" title="7.ContentType（Django提供的ContentType表 ）"></a>7.ContentType（Django提供的ContentType表 ）</h2><ul><li>models.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey, GenericRelation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># 不会在数据库中生成字段，只用于数据库操作</span></span><br><span class="line">    <span class="comment"># policy = GenericRelation('PricePolicy',object_id_field='object_id',content_type_field='contentType')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DegreeCourse</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PricePolicy</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 跟Django提供的ContentType表做外键关联</span></span><br><span class="line">    contentType = models.ForeignKey(to=ContentType)</span><br><span class="line">    <span class="comment"># 正数</span></span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 引入一个字段，不会在数据库中创建，只用来做数据库操作</span></span><br><span class="line">    <span class="comment"># content_obj = GenericForeignKey('contentType', 'object_id')</span></span><br><span class="line">    period = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.FloatField()</span><br></pre></td></tr></table></figure><ul><li>views.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    <span class="comment"># 方式一插入价格规则</span></span><br><span class="line">    <span class="comment"># ret=models.ContentType.objects.filter(model='course').first()</span></span><br><span class="line">    <span class="comment"># course=models.Course.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(ret.id)</span></span><br><span class="line">    <span class="comment"># models.PricePolicy.objects.create(period='30',price=100,object_id=course.id,contentType_id=ret.id)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方式二插入价格规则</span></span><br><span class="line">    <span class="comment"># course=models.Course.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # content_obj=course  会自动的把课程id放到object_id上，并且去ContentType表中查询课程表的id，放到contentType上</span></span><br><span class="line">    <span class="comment"># models.PricePolicy.objects.create(period='60',price=800,content_obj=course)</span></span><br><span class="line">    <span class="comment"># 增加学位课，价格规则</span></span><br><span class="line">    <span class="comment"># degreecourse = models.DegreeCourse.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># models.PricePolicy.objects.create(period='60', price=800, content_obj=degreecourse)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询所有价格策略，并且显示对应的课程名称</span></span><br><span class="line">    <span class="comment"># ret=models.PricePolicy.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in ret:</span></span><br><span class="line">    <span class="comment">#     print(i.price)</span></span><br><span class="line">    <span class="comment">#     print(i.period)</span></span><br><span class="line">    <span class="comment">#     # content_obj 就是代指关联的课程，或者学位课程的那个对象</span></span><br><span class="line">    <span class="comment">#     print(type(i.content_obj))</span></span><br><span class="line">    <span class="comment">#     print(i.content_obj.title)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过课程id，获取课程信息和价格策略</span></span><br><span class="line">    course=models.Course.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line">    print(course.policy.all())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'test.html'</span>)</span><br></pre></td></tr></table></figure><h1 id="七、Rest-Framework"><a href="#七、Rest-Framework" class="headerlink" title="七、Rest Framework"></a>七、Rest Framework</h1><h2 id="1-RESTful规范"><a href="#1-RESTful规范" class="headerlink" title="1.RESTful规范"></a>1.RESTful规范</h2><ul><li>定义：</li></ul><p>①REST是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</p><p>②所有的数据，不过是通过网络获取的还是操作（增删改查）的数据，都是资源，将一切数据视为资源是REST区别与其他架构风格的最本质属性</p><p>③REST从资源的角度类审视整个网络，它将分布在网络中某个节点的资源通过URL进行标识，客户端应用通过URL来获取资源的表征，获得这些表征致使这些应用转变状态</p><ul><li>RESTful API设计</li></ul><p>①API与用户的通信协议，总是使用[HTTPs协议</p><p>②域名 </p><p>​    <a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>   —尽量将API部署在专用域名(会存在跨域问题) </p><p>​    <a href="https://example.org/api/" target="_blank" rel="noopener">https://example.org/api/</a>      —API很简单 </p><p>③路径，视网络上任何东西都是资源，均使用名词表示（可复数） </p><ul><li><a href="https://api.example.com/zoos" target="_blank" rel="noopener">https://api.example.com/zoos</a></li></ul><p>④method </p><table><thead><tr><th>METHOD</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td>GET</td><td style="text-align:left">从服务器取出资源（一项或多项）</td></tr><tr><td>POST</td><td style="text-align:left">在服务器新建一个资源</td></tr><tr><td>PUT</td><td style="text-align:left">在服务器更新资源（客户端提供改变后的完整资源）</td></tr><tr><td>PATCH</td><td style="text-align:left">在服务器更新资源（客户端提供改变的属性）</td></tr><tr><td>DELETE</td><td style="text-align:left">从服务器删除资源</td></tr></tbody></table><p>⑤过滤，通过在url上传参的形式传递搜索条件 </p><ul><li><a href="https://api.example.com/v1/zoos?limit=10：指定返回记录的数量" target="_blank" rel="noopener">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li><li><a href="https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置" target="_blank" rel="noopener">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li><li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数" target="_blank" rel="noopener">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li></ul><p>⑥状态码 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><p>⑦返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /collection：返回资源对象的列表（数组）</span><br><span class="line">GET /collection/resource：返回单个资源对象</span><br><span class="line">POST /collection：返回新生成的资源对象</span><br><span class="line">PUT /collection/resource：返回完整的资源对象</span><br><span class="line">PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">DELETE /collection/resource：返回一个空文档</span><br></pre></td></tr></table></figure><p>⑧错误处理，应返回错误信息，error当做key。  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: "Invalid API key"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑨Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"link"</span>: &#123;</span><br><span class="line">  <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</span><br><span class="line">  <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">  <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>⑩版本</p><p>URL，如：<a href="https://api.example.com/v1/" target="_blank" rel="noopener">https://api.example.com/v1/</a></p><h2 id="2-APIView"><a href="#2-APIView" class="headerlink" title="2.APIView"></a>2.APIView</h2><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方式一：pip3 install djangorestframework</span><br><span class="line">方式二：pycharm图形化界面安装</span><br><span class="line">方式三：pycharm命令行下安装（装在当前工程所用的解释器下）</span><br></pre></td></tr></table></figure><ul><li>Djangorestframework的APIView分析</li></ul><p>① as_view()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Store the original class on the view function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       This allows us to discover information about the view when we do URL</span></span><br><span class="line"><span class="string">       reverse lookups.  Used for breadcrumb generation.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">if</span> isinstance(getattr(cls, <span class="string">'queryset'</span>, <span class="keyword">None</span>), models.query.QuerySet):</span><br><span class="line">           <span class="function"><span class="keyword">def</span> <span class="title">force_evaluation</span><span class="params">()</span>:</span></span><br><span class="line">               <span class="keyword">raise</span> RuntimeError(</span><br><span class="line">                   <span class="string">'Do not evaluate the `.queryset` attribute directly, '</span></span><br><span class="line">                   <span class="string">'as the result will be cached and reused between requests. '</span></span><br><span class="line">                   <span class="string">'Use `.all()` or call `.get_queryset()` instead.'</span></span><br><span class="line">               )</span><br><span class="line">           cls.queryset._fetch_all = force_evaluation</span><br><span class="line"></span><br><span class="line">       view = super(APIView, cls).as_view(**initkwargs)</span><br><span class="line">       view.cls = cls</span><br><span class="line">       view.initkwargs = initkwargs</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Note: session based authentication is explicitly CSRF validated,</span></span><br><span class="line">       <span class="comment"># all other authentication is CSRF exempt.</span></span><br><span class="line">       <span class="keyword">return</span> csrf_exempt(view)</span><br></pre></td></tr></table></figure><p>②dispatch()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        `.dispatch()` is pretty much the same as Django's regular dispatch,</span></span><br><span class="line"><span class="string">        but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = getattr(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure><p>③initialize_request(重新封装了request对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(),</span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>④initial方法（内部调用认证，权限和频率） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        self.check_throttles(request)</span><br><span class="line"></span><br><span class="line">initial方法（内部调用认证，权限和频率）</span><br></pre></td></tr></table></figure><h2 id="3-序列化组件"><a href="#3-序列化组件" class="headerlink" title="3.序列化组件"></a>3.序列化组件</h2><ul><li>Django 自带序列化组件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    book_list = Book.objects.all()    </span><br><span class="line">    ret = serializers.serialize(<span class="string">"json"</span>, book_list)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure><ul><li>rest-framework序列化之Serializer</li></ul><p>① models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price=models.IntegerField()</span><br><span class="line">    pub_date=models.DateField()</span><br><span class="line">    publish=models.ForeignKey(<span class="string">"Publish"</span>)</span><br><span class="line">    authors=models.ManyToManyField(<span class="string">"Author"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email=models.EmailField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age=models.IntegerField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>②views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializers</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    title=serializers.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price=serializers.IntegerField()</span><br><span class="line">    pub_date=serializers.DateField()</span><br><span class="line">    publish=serializers.CharField(source=<span class="string">"publish.name"</span>)</span><br><span class="line">    <span class="comment">#authors=serializers.CharField(source="authors.all")</span></span><br><span class="line">    authors=serializers.SerializerMethodField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        temp=[]</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> obj.authors.all():</span><br><span class="line">            temp.append(author.name)</span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line">　　<span class="comment">#此处可以继续用author的Serializers，</span></span><br><span class="line">　　<span class="comment"># def get_authors(self,obj):</span></span><br><span class="line">　　　　<span class="comment">#     ret=obj.authors.all()</span></span><br><span class="line">　　　　<span class="comment">#     ss=AuthorSerializer(ret,many=True)</span></span><br><span class="line">　　　　<span class="comment">#     return ss.data</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookViewSet</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        book_list=Book.objects.all()</span><br><span class="line">        <span class="comment"># 序列化方式1:</span></span><br><span class="line">        <span class="comment"># from django.forms.models import model_to_dict</span></span><br><span class="line">        <span class="comment"># import json</span></span><br><span class="line">        <span class="comment"># data=[]</span></span><br><span class="line">        <span class="comment"># for obj in book_list:</span></span><br><span class="line">        <span class="comment">#     data.append(model_to_dict(obj))</span></span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        <span class="comment"># return HttpResponse("ok")</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列化方式2:</span></span><br><span class="line">        <span class="comment"># data=serializers.serialize("json",book_list)</span></span><br><span class="line">        <span class="comment"># return HttpResponse(data)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 序列化方式3:</span></span><br><span class="line">        bs=BookSerializers(book_list,many=<span class="keyword">True</span>)     <span class="comment">#many=True代表有多条数据，如果只有一条数据，many=False</span></span><br><span class="line">        <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">　　　　 <span class="comment"># 序列化方式4: </span></span><br><span class="line">　　    <span class="comment"># ret=models.Book.objects.all().values('nid','title')</span></span><br><span class="line">　　　　 <span class="comment"># dd=list(ret)</span></span><br><span class="line">        <span class="comment"># return HttpResponse(json.dumps(dd))</span></span><br></pre></td></tr></table></figure><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">source 如果是字段，会显示字段，如果是方法，会执行方法，不用加括号（authors=serializers.CharField(source=<span class="string">'authors.all'</span>)）</span><br><span class="line"></span><br><span class="line">如在模型中定义一个方法，直接可以在在source指定执行</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user_type_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'普通用户'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'VIP'</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">'SVIP'</span>),</span><br><span class="line">    )</span><br><span class="line">    user_type = models.IntegerField(choices=user_type_choices)</span><br><span class="line"></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,unique=<span class="keyword">True</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#视图</span></span><br><span class="line">ret=models.UserInfo.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line">aa=ret.get_user_type_display()</span><br><span class="line"></span><br><span class="line"><span class="comment">#serializer</span></span><br><span class="line">xx=serializers.CharField(source=<span class="string">'get_user_type_display'</span>)</span><br></pre></td></tr></table></figure><ul><li>rest-framework序列化之ModelSerializer</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Book</span><br><span class="line">        <span class="comment"># fields = "__all__"</span></span><br><span class="line">        fields=[<span class="string">'nid'</span>,<span class="string">'title'</span>,<span class="string">'authors'</span>,<span class="string">'publish'</span>]</span><br><span class="line">        <span class="comment"># exclude=('nid',)   #不能跟fields同时用</span></span><br><span class="line">        <span class="comment"># depth = 1    #深度控制，层数越多，响应越慢</span></span><br><span class="line">    publish=serializers.SerializerMethodField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_publish</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> obj.publish.name</span><br><span class="line">    authors=serializers.SerializerMethodField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        ret=obj.authors.all()</span><br><span class="line">        ss=AuthorSerializer(ret,many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> ss.data</span><br></pre></td></tr></table></figure><ul><li>序列化组件之请求数据校验和保存功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model=Book</span><br><span class="line">        fields=<span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 添加一条数据</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        bs=BookSerializers(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> bs.is_valid():</span><br><span class="line">            bs.save()  <span class="comment"># 生成记录</span></span><br><span class="line">            <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(bs.errors)</span><br></pre></td></tr></table></figure><ul><li>序列化组件源码分析</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序列化组件，先调用__new__方法，如果many=True，生成ListSerializer对象，如果为False，生成Serializer对象</span><br><span class="line">序列化对象.data方法--调用父类data方法---调用对象自己的to_representation（自定义的序列化类无此方法，去父类找）</span><br><span class="line">Aerializer类里有to_representation方法，for循环执行attribute = field.get_attribute(instance)</span><br><span class="line">再去Field类里去找get_attribute方法，self.source_attrs就是被切分的source，然后执行get_attribute方法，source_attrs</span><br><span class="line">当参数传过去，判断是方法就加括号执行，是属性就把值取出来</span><br></pre></td></tr></table></figure><h2 id="4-视图组件"><a href="#4-视图组件" class="headerlink" title="4.视图组件"></a>4.视图组件</h2><ul><li>基本视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns=[</span><br><span class="line">    url(<span class="string">r'^publish/$'</span>, views.PublishView.as_view()),</span><br><span class="line">    url(<span class="string">r'^publish/(?P&lt;pk&gt;\d+)/$'</span>, views.PublishDetailView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model=models.Publish</span><br><span class="line">        fields=<span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        publish_list = models.Publish.objects.all()</span><br><span class="line">        bs = PublishSerializers(publish_list, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="comment"># 序列化数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(bs.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 添加一条数据</span></span><br><span class="line">        print(request.data)</span><br><span class="line"></span><br><span class="line">        bs=PublishSerializers(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> bs.is_valid():</span><br><span class="line">            bs.save()  <span class="comment"># 生成记录</span></span><br><span class="line">            <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(bs.errors)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishDetailView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        publish_obj=models.Publish.objects.filter(pk=pk).first()</span><br><span class="line">        bs=PublishSerializers(publish_obj,many=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        publish_obj = models.Publish.objects.filter(pk=pk).first()</span><br><span class="line"></span><br><span class="line">        bs=PublishSerializers(data=request.data,instance=publish_obj)</span><br><span class="line">        <span class="keyword">if</span> bs.is_valid():</span><br><span class="line">            bs.save() <span class="comment"># update</span></span><br><span class="line">            <span class="keyword">return</span> Response(bs.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(bs.errors)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        models.Publish.objects.filter(pk=pk).delete()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><ul><li>mixin类和 generice类编写视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> CreateModelMixin,RetrieveModelMixin,ListModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ListModelMixin,CreateModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishDetailView</span><span class="params">(RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin,GenericAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># retrieve()创建并保存</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request,*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request,*args,**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request,*args,**kwargs)</span><br></pre></td></tr></table></figure><ul><li>generices 下的ListCreateAPIView，RetieveUpdateDestroyAPIView</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListCreateAPIView,RetrieveUpdateDestroyAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishDetailView</span><span class="params">(RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure><ul><li>ModelViewSet</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns=[</span><br><span class="line">    url(<span class="string">r'^publish/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span><br><span class="line">    url(<span class="string">r'^publish/(?P&lt;pk&gt;\d+)/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,<span class="string">'put'</span>:<span class="string">'update'</span>,<span class="string">'delete'</span>:<span class="string">'destroy'</span>&#125;)),</span><br><span class="line">视图：</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure><h2 id="5-解析器、认证组件、频率组件、权限组件"><a href="#5-解析器、认证组件、频率组件、权限组件" class="headerlink" title="5.解析器、认证组件、频率组件、权限组件"></a>5.解析器、认证组件、频率组件、权限组件</h2><h3 id="5-1-解析器"><a href="#5-1-解析器" class="headerlink" title="5.1 解析器"></a>5.1 解析器</h3><ul><li>作用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据请求头 content-type 选择对应的解析器对请求体内容进行处理。</span><br><span class="line">有application/json，x-www-form-urlencoded，form-data等格式</span><br></pre></td></tr></table></figure><ul><li>使用解析器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">全局使用在settings.py中配置</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 解析器</span></span><br><span class="line">    <span class="string">'DEFAULT_PARSER_CLASSES'</span>:[</span><br><span class="line">        <span class="string">'rest_framework.parsers.JSONParser'</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.FormParser'</span></span><br><span class="line">        <span class="string">'rest_framework.parsers.MultiPartParser'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 全局使用认证组件</span></span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"app01.service.auth.Authentication"</span>,],</span><br><span class="line">    <span class="comment"># 全局使用权限组件</span></span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>:[<span class="string">"app01.service.auth.Authentication"</span>,],</span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>:[<span class="string">"app01.service.permissions.SVIPPermission"</span>,]</span><br><span class="line">    <span class="comment"># 全局使用频率组件,1min访问3次</span></span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>:&#123;</span><br><span class="line">        <span class="string">'luffy'</span>:<span class="string">'3/m'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'test/'</span>, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">views.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser,FormParser,MultiPartParser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 局部解析器,为MultiPartParser时,前端的form表单中必须有enctype="multipart/form-data"</span></span><br><span class="line">    parser_classes = [JSONParser,FormParser,MultiPartParser ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(request.content_type)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取请求的值，并使用对应的JSONParser进行处理</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="comment"># application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        print(request.FILES)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'POST请求，响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'PUT请求，响应内容'</span>)</span><br></pre></td></tr></table></figure><ul><li>源码分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">在调用request.data时，才进行解析，由此入手</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _hasattr(self, <span class="string">'_full_data'</span>):</span><br><span class="line">            self._load_data_and_files()</span><br><span class="line">        <span class="keyword">return</span> self._full_data</span><br><span class="line">查看self._load_data_and_files()方法----&gt;self._data, self._files = self._parse()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_parse</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="comment">#用户请求头里content_type的值</span></span><br><span class="line">            media_type = self.content_type</span><br><span class="line"></span><br><span class="line">            <span class="comment">#self.parsers 就是用户配置的parser_classes = [FileUploadParser,FormParser ]</span></span><br><span class="line">            <span class="comment">#self里就有content_type，传入此函数</span></span><br><span class="line">            parser = self.negotiator.select_parser(self, self.parsers)</span><br><span class="line">查看self.negotiator.select_parser(self, self.parsers)</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">select_parser</span><span class="params">(self, request, parsers)</span>:</span></span><br><span class="line">        <span class="comment">#同过media_type和request.content_type比较，来返回解析器，然后调用解析器的解析方法</span></span><br><span class="line">        <span class="comment">#每个解析器都有media_type = 'multipart/form-data'属性</span></span><br><span class="line">        <span class="keyword">for</span> parser <span class="keyword">in</span> parsers:</span><br><span class="line">            <span class="keyword">if</span> media_type_matches(parser.media_type, request.content_type):</span><br><span class="line">                <span class="keyword">return</span> parser</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">最终调用parser的解析方法来解析parsed = parser.parse(stream, media_type, self.parser_context)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Request实例化，parsers=self.get_parsers()</span><br><span class="line">    Request(</span><br><span class="line">                request,</span><br><span class="line">                parsers=self.get_parsers(),</span><br><span class="line">                authenticators=self.get_authenticators(),</span><br><span class="line">                negotiator=self.get_content_negotiator(),</span><br><span class="line">                parser_context=parser_context</span><br><span class="line">            )</span><br><span class="line">get_parsers方法，循环实例化出self.parser_classes中类对象</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_parsers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [parser() <span class="keyword">for</span> parser <span class="keyword">in</span> self.parser_classes]            </span><br><span class="line">self.parser_classes 先从类本身找，找不到去父类找即APIVIew 中的</span><br><span class="line">    parser_classes = api_settings.DEFAULT_PARSER_CLASSES</span><br><span class="line">api_settings是一个对象，对象里找DEFAULT_PARSER_CLASSES属性，找不到，会到getattr方法</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> attr <span class="keyword">not</span> <span class="keyword">in</span> self.defaults:</span><br><span class="line">                <span class="keyword">raise</span> AttributeError(<span class="string">"Invalid API setting: '%s'"</span> % attr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#调用self.user_settings方法，返回一个字典，字典再取attr属性</span></span><br><span class="line">                val = self.user_settings[attr]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="comment"># Fall back to defaults</span></span><br><span class="line">                val = self.defaults[attr]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Coerce import strings into classes</span></span><br><span class="line">            <span class="keyword">if</span> attr <span class="keyword">in</span> self.import_strings:</span><br><span class="line">                val = perform_import(val, attr)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Cache the result</span></span><br><span class="line">            self._cached_attrs.add(attr)</span><br><span class="line">            setattr(self, attr, val)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">user_settings方法 ，通过反射去setting配置文件里找REST_FRAMEWORK属性，找不到，返回空字典</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_settings</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user_settings'</span>):</span><br><span class="line">            self._user_settings = getattr(settings, <span class="string">'REST_FRAMEWORK'</span>, &#123;&#125;)</span><br><span class="line">        <span class="keyword">return</span> self._user_settings</span><br></pre></td></tr></table></figure><h3 id="5-2-认证组件"><a href="#5-2-认证组件" class="headerlink" title="5.2 认证组件"></a>5.2 认证组件</h3><ul><li>models.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    user_type=models.IntegerField(choices=((<span class="number">1</span>,<span class="string">'超级用户'</span>),(<span class="number">2</span>,<span class="string">'普通用户'</span>),(<span class="number">3</span>,<span class="string">'二笔用户'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserToken</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user=models.OneToOneField(to=<span class="string">'User'</span>)</span><br><span class="line">    token=models.CharField(max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure><ul><li>新建认证类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenAuth</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        token = request.GET.get(<span class="string">'token'</span>)</span><br><span class="line">        token_obj = models.UserToken.objects.filter(token=token).first()</span><br><span class="line">        <span class="keyword">if</span> token_obj:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">'认证失败'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>views.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    md=hashlib.md5()</span><br><span class="line">    md.update(bytes(str(time.time()),encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    md.update(bytes(name,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> md.hexdigest()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,reuquest)</span>:</span></span><br><span class="line">        back_msg=&#123;<span class="string">'status'</span>:<span class="number">1001</span>,<span class="string">'msg'</span>:<span class="keyword">None</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name=reuquest.data.get(<span class="string">'name'</span>)</span><br><span class="line">            pwd=reuquest.data.get(<span class="string">'pwd'</span>)</span><br><span class="line">            user=models.User.objects.filter(username=name,password=pwd).first()</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                token=get_random(name)</span><br><span class="line">                models.UserToken.objects.update_or_create(user=user,defaults=&#123;<span class="string">'token'</span>:token&#125;)</span><br><span class="line">                back_msg[<span class="string">'status'</span>]=<span class="string">'1000'</span></span><br><span class="line">                back_msg[<span class="string">'msg'</span>]=<span class="string">'登录成功'</span></span><br><span class="line">                back_msg[<span class="string">'token'</span>]=token</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                back_msg[<span class="string">'msg'</span>] = <span class="string">'用户名或密码错误'</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            back_msg[<span class="string">'msg'</span>]=str(e)</span><br><span class="line">        <span class="keyword">return</span> Response(back_msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 局部使用</span></span><br><span class="line">    authentication_classes = [TokenAuth, ]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure><h4 id="token认证：存数据库的—-gt-Redis—-gt-不存数据库的认证"><a href="#token认证：存数据库的—-gt-Redis—-gt-不存数据库的认证" class="headerlink" title="token认证：存数据库的—&gt;Redis—&gt;不存数据库的认证"></a>token认证：存数据库的—&gt;Redis—&gt;不存数据库的认证</h4><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Request对象的user方法</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment"># the authentication classes provided to the request.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user'</span>):</span><br><span class="line">            <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">                self._authenticate()</span><br><span class="line">        <span class="keyword">return</span> self._user</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user_auth_tuple = authenticator.authenticate(self)</span><br><span class="line">            <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="comment">#认证成功，可以返回一个元组，但必须是最后一个验证类才能返回</span></span><br><span class="line">            <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                self._authenticator = authenticator</span><br><span class="line">                self.user, self.auth = user_auth_tuple</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self._not_authenticated()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># self.authenticators</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_authenticators</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br><span class="line"></span><br><span class="line">认证类使用顺序：先用视图类中的验证类，再用settings里配置的验证类，最后用默认的验证类</span><br></pre></td></tr></table></figure><h3 id="6-2-频率组件"><a href="#6-2-频率组件" class="headerlink" title="6.2 频率组件"></a>6.2 频率组件</h3><ul><li>局部使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission_classes = [UserPermission,]</span><br></pre></td></tr></table></figure><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="keyword">None</span>)</span><br><span class="line">                )</span><br><span class="line">            </span><br><span class="line"><span class="comment"># self.get_permissions()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_permissions</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">return</span> [permission() <span class="keyword">for</span> permission <span class="keyword">in</span> self.permission_classes]</span><br></pre></td></tr></table></figure><h3 id="6-3-权限组件"><a href="#6-3-权限组件" class="headerlink" title="6.3 权限组件"></a>6.3 权限组件</h3><ul><li>自定义限制 ip 的访问频率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（1）取出访问者ip</span></span><br><span class="line"><span class="comment"># （2）判断当前ip不在访问字典里，添加进去，并且直接返回True,表示第一次访问，在字典里，继续往下走</span></span><br><span class="line"><span class="comment"># （3）循环判断当前ip的列表，有值，并且当前时间减去列表的最后一个时间大于60s，把这种数据pop掉，这样列表中只有60s以内的访问时间，</span></span><br><span class="line"><span class="comment"># （4）判断，当列表小于3，说明一分钟以内访问不足三次，把当前时间插入到列表第一个位置，返回True，顺利通过</span></span><br><span class="line"><span class="comment"># （5）当大于等于3，说明一分钟内访问超过三次，返回False验证失败</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThrottles</span><span class="params">()</span>:</span></span><br><span class="line">    VISIT_RECORD = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.history=<span class="keyword">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self,request, view)</span>:</span></span><br><span class="line">        <span class="comment">#（1）取出访问者ip</span></span><br><span class="line">        <span class="comment"># print(request.META)</span></span><br><span class="line">        ip=request.META.get(<span class="string">'REMOTE_ADDR'</span>)</span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        ctime=time.time()</span><br><span class="line">        <span class="comment"># （2）判断当前ip不在访问字典里，添加进去，并且直接返回True,表示第一次访问</span></span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> self.VISIT_RECORD:</span><br><span class="line">            self.VISIT_RECORD[ip]=[ctime,]</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        self.history=self.VISIT_RECORD.get(ip)</span><br><span class="line">        <span class="comment"># （3）循环判断当前ip的列表，有值，并且当前时间减去列表的最后一个时间大于60s，把这种数据pop掉，这样列表中只有60s以内的访问时间，</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> ctime-self.history[<span class="number">-1</span>]&gt;<span class="number">60</span>:</span><br><span class="line">            self.history.pop()</span><br><span class="line">        <span class="comment"># （4）判断，当列表小于3，说明一分钟以内访问不足三次，把当前时间插入到列表第一个位置，返回True，顺利通过</span></span><br><span class="line">        <span class="comment"># （5）当大于等于3，说明一分钟内访问超过三次，返回False验证失败</span></span><br><span class="line">        <span class="keyword">if</span> len(self.history)&lt;<span class="number">3</span>:</span><br><span class="line">            self.history.insert(<span class="number">0</span>,ctime)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        ctime=time.time()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60</span>-(ctime-self.history[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><ul><li>局部使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throttle_classes = [MyThrottles,]</span><br></pre></td></tr></table></figure><ul><li>错误信息的中文提示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [TokenAuth, ]</span><br><span class="line">    permission_classes = [UserPermission, ]</span><br><span class="line">    throttle_classes = [MyThrottles,]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttled</span><span class="params">(self, request, wait)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> Throttled</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyThrottled</span><span class="params">(Throttled)</span>:</span></span><br><span class="line">            default_detail = <span class="string">'傻逼啊'</span></span><br><span class="line">            extra_detail_singular = <span class="string">'还有 &#123;wait&#125; second.'</span></span><br><span class="line">            extra_detail_plural = <span class="string">'出了 &#123;wait&#125; seconds.'</span></span><br><span class="line">        <span class="keyword">raise</span> MyThrottled(wait)</span><br></pre></td></tr></table></figure><h2 id="7-分页器"><a href="#7-分页器" class="headerlink" title="7.分页器"></a>7.分页器</h2><ul><li>简单分页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="comment"># 一 基本使用：url=url=http://127.0.0.1:8000/pager/?page=2&amp;size=3，size无效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Pager</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取所有数据</span></span><br><span class="line">        ret=models.Book.objects.all()</span><br><span class="line">        <span class="comment"># 创建分页对象</span></span><br><span class="line">        page=PageNumberPagination()</span><br><span class="line">        <span class="comment"># 在数据库中获取分页的数据</span></span><br><span class="line">        page_list=page.paginate_queryset(ret,request,view=self)</span><br><span class="line">        <span class="comment"># 对分页进行序列化</span></span><br><span class="line">        ser=BookSerializer1(instance=page_list,many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"><span class="comment"># 二 自定制 url=http://127.0.0.1:8000/pager/?page=2&amp;size=3</span></span><br><span class="line"><span class="comment"># size=30，无效，最多5条</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mypage</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span></span><br><span class="line">    <span class="comment"># 定制传参</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    <span class="comment"># 最大一页的数据</span></span><br><span class="line">    max_page_size = <span class="number">5</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Pager</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取所有数据</span></span><br><span class="line">        ret=models.Book.objects.all()</span><br><span class="line">        <span class="comment"># 创建分页对象</span></span><br><span class="line">        page=Mypage()</span><br><span class="line">        <span class="comment"># 在数据库中获取分页的数据</span></span><br><span class="line">        page_list=page.paginate_queryset(ret,request,view=self)</span><br><span class="line">        <span class="comment"># 对分页进行序列化</span></span><br><span class="line">        ser=BookSerializer1(instance=page_list,many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="comment"># return Response(ser.data)</span></span><br><span class="line">        <span class="comment"># 这个也是返回Response对象，但是比基本的多了上一页，下一页，和总数据条数（了解即可）</span></span><br><span class="line">        <span class="keyword">return</span> page.get_paginated_response(ser.data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">settings.py</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 每页显示两条</span></span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns=[</span><br><span class="line">    url(<span class="string">r'^pager/$'</span>, views.Pager.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>偏移分页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在第N个位置,向后查看N条数据</span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/pager/?offset=4&amp;limit=3</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"><span class="comment"># 也可以自定制，同简单分页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Pager</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取所有数据</span></span><br><span class="line">        ret=models.Book.objects.all()</span><br><span class="line">        <span class="comment"># 创建分页对象</span></span><br><span class="line">        page=LimitOffsetPagination()</span><br><span class="line">        <span class="comment"># 在数据库中获取分页的数据</span></span><br><span class="line">        page_list=page.paginate_queryset(ret,request,view=self)</span><br><span class="line">        <span class="comment"># 对分页进行序列化</span></span><br><span class="line">        ser=BookSerializer1(instance=page_list,many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="comment"># return page.get_paginated_response(ser.data)</span></span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure><ul><li>CursorPagination加密分页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">只能查看上页和下页</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> CursorPagination</span><br><span class="line"><span class="comment"># 看源码，是通过sql查询，大于id和小于id</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Pager</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取所有数据</span></span><br><span class="line">        ret=models.Book.objects.all()</span><br><span class="line">        <span class="comment"># 创建分页对象</span></span><br><span class="line">        page=CursorPagination()</span><br><span class="line">        page.ordering=<span class="string">'nid'</span></span><br><span class="line">        <span class="comment"># 在数据库中获取分页的数据</span></span><br><span class="line">        page_list=page.paginate_queryset(ret,request,view=self)</span><br><span class="line">        <span class="comment"># 对分页进行序列化</span></span><br><span class="line">        ser=BookSerializer1(instance=page_list,many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="comment"># 可以避免页码被猜到</span></span><br><span class="line">        <span class="keyword">return</span> page.get_paginated_response(ser.data)</span><br></pre></td></tr></table></figure><h2 id="8-响应器（渲染器）"><a href="#8-响应器（渲染器）" class="headerlink" title="8.响应器（渲染器）"></a>8.响应器（渲染器）</h2><ul><li>作用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据 用户请求URL 或 用户可接受的类型，筛选出合适的 渲染组件。</span><br></pre></td></tr></table></figure><ul><li>内置渲染器</li></ul><p>①<strong>默认显示格式：BrowsableAPIRenderer（可以修改它的html文件）</strong></p><ul><li><a href="http://127.0.0.1:8000/test/?format=api" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=api</a></li><li><a href="http://127.0.0.1:8000/test.api" target="_blank" rel="noopener">http://127.0.0.1:8000/test.api</a> </li></ul><p>②<strong>显示json格式：JSONRenderer</strong> </p><ul><li><a href="http://127.0.0.1:8000/test/?format=json" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=json</a></li><li><a href="http://127.0.0.1:8000/test.json" target="_blank" rel="noopener">http://127.0.0.1:8000/test.json</a></li></ul><p>③<strong>表格方式：AdminRenderer</strong> </p><ul><li><a href="http://127.0.0.1:8000/test/?format=admin" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=admin</a></li><li><a href="http://127.0.0.1:8000/test.admin" target="_blank" rel="noopener">http://127.0.0.1:8000/test.admin</a></li></ul><p>④<strong>form表单方式：HTMLFormRenderer</strong> </p><ul><li><a href="http://127.0.0.1:8000/test/?format=form" target="_blank" rel="noopener">http://127.0.0.1:8000/test/?format=form</a></li><li><a href="http://127.0.0.1:8000/test.form" target="_blank" rel="noopener">http://127.0.0.1:8000/test.form</a></li></ul><ul><li>局部使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer_classes = [HTMLFormRenderer,BrowsableAPIRenderer ]</span><br></pre></td></tr></table></figure><h2 id="9-URL控制器"><a href="#9-URL控制器" class="headerlink" title="9.URL控制器"></a>9.URL控制器</h2><ul><li>自定义路由（原始方式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^books/$'</span>, views.BookView.as_view()),</span><br><span class="line">    url(<span class="string">r'^books/(?P&lt;pk&gt;\d+)$'</span>, views.BookDetailView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>半自动路由（视图继承ModelViewSet）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urls.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^publish/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>,<span class="string">'post'</span>:<span class="string">'create'</span>&#125;)),</span><br><span class="line">    url(<span class="string">r'^publish/(?P&lt;pk&gt;\d+)/$'</span>, views.PublishView.as_view(&#123;<span class="string">'get'</span>:<span class="string">'retrieve'</span>,<span class="string">'put'</span>:<span class="string">'update'</span>,<span class="string">'delete'</span>:<span class="string">'destroy'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">views.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure><ul><li>全自动路由（自动生成路由）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">urls.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line">router=routers.DefaultRouter()</span><br><span class="line"><span class="comment"># 两个参数，一个是匹配的路由，一个是视图中写的CBV的类</span></span><br><span class="line">router.register(<span class="string">'publish'</span>,views.PublishView)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/publish/format=json(渲染器通过这个判断，返回渲染的页面)</span></span><br><span class="line">    <span class="comment"># url(r'^publish/', views.PublishView.as_view(&#123;'get':'list','post':'create'&#125;)),</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/publish.json(渲染器通过这个判断，返回渲染的页面)</span></span><br><span class="line">    <span class="comment"># url(r'^publish\.(?P&lt;format&gt;\w+)$', views.PublishView.as_view(&#123;'get':'list','post':'create'&#125;)),</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 可以用 以下方式访问</span></span><br><span class="line">    <span class="comment"># 1 http://127.0.0.1:8000/publish/</span></span><br><span class="line">    <span class="comment"># 2 http://127.0.0.1:8000/publish.json</span></span><br><span class="line">    <span class="comment"># 3 http://127.0.0.1:8000/publish/3</span></span><br><span class="line">    <span class="comment"># 4 http://127.0.0.1:8000/publish/3.json   </span></span><br><span class="line">    url(<span class="string">r''</span>,include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">views.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset=models.Publish.objects.all()</span><br><span class="line">    serializer_class=PublishSerializers</span><br></pre></td></tr></table></figure><h2 id="10-版本控制"><a href="#10-版本控制" class="headerlink" title="10.版本控制"></a>10.版本控制</h2><ul><li>内置的版本控制类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning,AcceptHeaderVersioning,NamespaceVersioning,URLPathVersioning</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于url的get传参方式：QueryParameterVersioning------&gt;如：/users?version=v1</span></span><br><span class="line"><span class="comment">#基于url的正则方式：URLPathVersioning------&gt;/v1/users/</span></span><br><span class="line"><span class="comment">#基于 accept 请求头方式：AcceptHeaderVersioning------&gt;Accept: application/json; version=1.0</span></span><br><span class="line"><span class="comment">#基于主机名方法：HostNameVersioning------&gt;v1.example.com</span></span><br><span class="line"><span class="comment">#基于django路由系统的namespace：NamespaceVersioning------&gt;example.com/v1/users/</span></span><br></pre></td></tr></table></figure><ul><li>局部使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在CBV类中加入</span></span><br><span class="line">versioning_class = URLPathVersioning</span><br></pre></td></tr></table></figure><ul><li>全局使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>:<span class="string">'rest_framework.versioning.QueryParameterVersioning'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_VERSION'</span>: <span class="string">'v1'</span>,            <span class="comment"># 默认版本(从request对象里取不到，显示的默认值)</span></span><br><span class="line">    <span class="string">'ALLOWED_VERSIONS'</span>: [<span class="string">'v1'</span>, <span class="string">'v2'</span>],   <span class="comment"># 允许的版本</span></span><br><span class="line">    <span class="string">'VERSION_PARAM'</span>: <span class="string">'version'</span>          <span class="comment"># URL中获取值的key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行determine_version，返回两个值，放到request对象里</span></span><br><span class="line">version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">determine_version</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#当配置上版本类之后，就会实例化</span></span><br><span class="line">        <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line">        scheme = self.versioning_class()</span><br><span class="line">        <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br></pre></td></tr></table></figure><h1 id="八、settings-py配置"><a href="#八、settings-py配置" class="headerlink" title="八、settings.py配置"></a>八、settings.py配置</h1><h2 id="1-APPEND-SLASH"><a href="#1-APPEND-SLASH" class="headerlink" title="1.APPEND_SLASH"></a>1.<strong>APPEND_SLASH</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">APPEND_SLASH=<span class="keyword">True</span></span><br><span class="line">是否开启URL访问地址后面不为/跳转至带有/的路径的配置项</span><br></pre></td></tr></table></figure><h2 id="2-static（css文件，js文件，图片文件-）"><a href="#2-static（css文件，js文件，图片文件-）" class="headerlink" title="2.static（css文件，js文件，图片文件 ）"></a>2.static（css文件，js文件，图片文件 ）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>html页面对static静态文件的使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/mycss.css"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/jquery-3.3.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-数据库配置"><a href="#3-数据库配置" class="headerlink" title="3 数据库配置"></a>3 数据库配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'lqz'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'ATOMIC_REQUEST'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">"init_command"</span>: <span class="string">"SET storage_engine=MyISAM"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'NAME':要连接的数据库，连接前需要创建好</span></span><br><span class="line"><span class="string">'USER':连接数据库的用户名</span></span><br><span class="line"><span class="string">'PASSWORD':连接数据库的密码</span></span><br><span class="line"><span class="string">'HOST':连接主机，默认本机</span></span><br><span class="line"><span class="string">'PORT':端口 默认3306</span></span><br><span class="line"><span class="string">'ATOMIC_REQUEST': True,</span></span><br><span class="line"><span class="string">设置为True统一个http请求对应的所有sql都放在一个事务中执行（要么所有都成功，要么所有都失败）。</span></span><br><span class="line"><span class="string">是全局性的配置， 如果要对某个http请求放水（然后自定义事务），可以用non_atomic_requests修饰器 </span></span><br><span class="line"><span class="string">'OPTIONS': &#123;</span></span><br><span class="line"><span class="string">             "init_command": "SET storage_engine=MyISAM",</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">设置创建表的存储引擎为MyISAM，INNODB</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意1：</span></span><br><span class="line">在mysql连接数据库前必须已经创建数据库，而上面的sqlite数据库下的db.sqlite3则是项目自动创建 USER和PASSWORD分别是数据库的用户名和密码。设置完后，再启动我们的Django项目前，我们需要激活我们的mysql。然后，启动项目，会报错：no module named MySQLdb 。这是因为django默认你导入的驱动是MySQLdb，可是MySQLdb 对于py3有很大问题，所以我们需要的驱动是PyMySQL 所以，我们只需要找到项目名文件下的__init__,在里面写入：</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line">通过两条数据库迁移命令即可在指定的数据库中创建表</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意2:</span></span><br><span class="line">    确保配置文件中的INSTALLED_APPS中写入我们创建的app名称</span><br></pre></td></tr></table></figure><ul><li>打印orm转换过程中的sql</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>:&#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.db.backends'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="keyword">True</span>,</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作数据库时取出的对象obj</span></span><br><span class="line">print(obj.query)</span><br></pre></td></tr></table></figure><h1 id="九、创建Django"><a href="#九、创建Django" class="headerlink" title="九、创建Django"></a>九、创建Django</h1><p>0 <strong>安装Django</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>1 <strong>创建一个 Django project</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure><p>2 <strong>在mysite目录下创建应用</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp app01</span><br></pre></td></tr></table></figure><p>3 <strong>启动Django项目</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver http://ip:<span class="number">8000</span></span><br></pre></td></tr></table></figure><h1 id="十、跨域请求（同源策略）"><a href="#十、跨域请求（同源策略）" class="headerlink" title="十、跨域请求（同源策略）"></a>十、跨域请求（同源策略）</h1><ul><li>定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现</span><br><span class="line"></span><br><span class="line">同一个 http://ip:port(假设是 http://127.0.0.1:8000)</span><br><span class="line">当使用http://127.0.0.1:8001访问时，会抛出错误</span><br><span class="line">已拦截跨源请求：同源策略禁止读取位于 http://127.0.0.1:8001/SendAjax/ 的远程资源。（原因：CORS 头缺少 &apos;Access-Control-Allow-Origin&apos;）。</span><br></pre></td></tr></table></figure><ul><li>跨域资源共享（CORS）基本流程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</span><br><span class="line">浏览器发出CORS简单请求，只需要在头信息之中增加一个Origin字段。</span><br><span class="line">浏览器发出CORS非简单请求，会在正式通信之前，增加一次HTTP查询请求，称为&quot;预检&quot;请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</span><br></pre></td></tr></table></figure><ul><li>CORS简单请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（1) 请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line">（2）HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</span><br></pre></td></tr></table></figure><ul><li>CORS非简单请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">凡是不同时满足CORS简单请求条件，就属于非简单请求。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">两种请求的区别：</span><br><span class="line">简单请求：一次请求</span><br><span class="line">非简单请求：两次请求，在发送数据之前会先发一次请求用于做“预检”，只有“预检”通过后才再发送一次请求用于数据传输。</span><br><span class="line">关于“预检”</span><br><span class="line"></span><br><span class="line">- 请求方式：OPTIONS</span><br><span class="line">- “预检”其实做检查，检查如果通过则允许传输数据，检查不通过则不再发送真正想要发送的消息</span><br><span class="line">- 如何“预检”</span><br><span class="line">     =&gt; 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过</span><br><span class="line">        Access-Control-Request-Method</span><br><span class="line">     =&gt; 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过</span><br><span class="line">        Access-Control-Request-Headers</span><br></pre></td></tr></table></figure><ul><li>Django项目支持CORS</li></ul><p>① 在返回的结果中加入允许信息（简单请求） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    obj=HttpResponse(json.dumps(&#123;<span class="string">'name'</span>:<span class="string">'lqz'</span>&#125;))</span><br><span class="line">    <span class="comment"># obj['Access-Control-Allow-Origin']='*'</span></span><br><span class="line">    obj[<span class="string">'Access-Control-Allow-Origin'</span>]=<span class="string">'http://127.0.0.1:8004'</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>② 放到中间件处理复杂和简单请求 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CorsMiddleWare</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.method==<span class="string">"OPTIONS"</span>:</span><br><span class="line">            response[<span class="string">"Access-Control-Allow-Headers"</span>]=<span class="string">"Content-Type"</span></span><br><span class="line">        response[<span class="string">"Access-Control-Allow-Origin"</span>] = <span class="string">"http://localhost:8080"</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h1 id="十一、Django中使用Redis"><a href="#十一、Django中使用Redis" class="headerlink" title="十一、Django中使用Redis"></a>十一、Django中使用Redis</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>①新建utils文件夹，并在该文件夹下建立redis_pool.py </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>,password=<span class="string">'1234'</span>,max_connections=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>②视图函数中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> utils.redis_pool <span class="keyword">import</span> POOL</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hset(<span class="string">'kkk'</span>,<span class="string">'age'</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'设置成功'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(request)</span>:</span></span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hget(<span class="string">'kkk'</span>,<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'获取成功'</span>)</span><br></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>①安装django-redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django-redis</span><br></pre></td></tr></table></figure><p>②setting里配置： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"CONNECTION_POOL_KWARGS"</span>: &#123;<span class="string">"max_connections"</span>: <span class="number">100</span>&#125;</span><br><span class="line">            <span class="comment"># "PASSWORD": "123",</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line">conn = get_redis_connection(<span class="string">'default'</span>)</span><br><span class="line">print(conn.hgetall(<span class="string">'xxx'</span>))</span><br></pre></td></tr></table></figure><h1 id="十二、Django缓存机制"><a href="#十二、Django缓存机制" class="headerlink" title="十二、Django缓存机制"></a>十二、Django缓存机制</h1><h2 id="1-三个粒度"><a href="#1-三个粒度" class="headerlink" title="1.三个粒度"></a>1.三个粒度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 全站缓存</span><br><span class="line">用中间件：</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line"><span class="comment"># 'django.middleware.cache.UpdateCacheMiddleware',</span></span><br><span class="line"><span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 'django.middleware.cache.FetchFromCacheMiddleware'</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="comment"># CACHE_MIDDLEWARE_SECONDS=10</span></span><br><span class="line"><span class="number">2</span> 单视图：</span><br><span class="line">用装饰器</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="meta">@cache_page(24*60*60)</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"><span class="number">3</span> 局部页面：</span><br><span class="line">&#123;% load cache %&#125;</span><br><span class="line">&#123;% cache <span class="number">5</span> <span class="string">'test'</span> %&#125;   两个参数：时间，唯一标识</span><br><span class="line">&#123;&#123; ctime &#125;&#125;</span><br><span class="line">&#123;% endcache %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MTV </tag>
            
            <tag> restframework </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
